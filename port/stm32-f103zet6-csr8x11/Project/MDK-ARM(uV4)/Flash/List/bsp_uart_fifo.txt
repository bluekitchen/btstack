; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_uart_fifo.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_uart_fifo.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\Middleware\blue_angel\inc -I..\..\Middleware\bt_callback_manager -I..\..\Middleware\blue_angel\btif -I..\..\Middleware\blue_angel\common -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\src\common -I..\..\Middleware\blue_angel\src\inc -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\platform\rtos -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\ut_manager\Cunit\Headers -I..\..\Middleware\ut_manager\Cunit\interface -I..\..\Middleware\blue_angel\platform\test -I..\..\Middleware\blue_angel\driver -I..\..\Middleware\blue_angel\src\core\hci -I..\..\User\bt\inc -I..\..\Middleware\bt_callback_manager -I..\..\Middleware\at_command -I..\..\Middleware\blue_angel\src\core\gap -I..\..\Middleware\blue_angel\src\core\l2cap -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=522 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DNDEBUG --omf_browse=.\flash\obj\bsp_uart_fifo.crf ..\..\User\bsp\src\bsp_uart_fifo.c]
                          THUMB

                          AREA ||i.ComToUart||, CODE, READONLY, ALIGN=2

                  ComToUart PROC
;;;95     */
;;;96     UART_T *ComToUart(COM_PORT_E _ucPort)
000000  4601              MOV      r1,r0
;;;97     {
;;;98     	if (_ucPort == COM1)
000002  b909              CBNZ     r1,|L1.8|
;;;99     	{
;;;100    		#if UART1_FIFO_EN == 1
;;;101    			return &g_tUart1;
000004  4809              LDR      r0,|L1.44|
                  |L1.6|
;;;102    		#else
;;;103    			return 0;
;;;104    		#endif
;;;105    	}
;;;106    	else if (_ucPort == COM2)
;;;107    	{
;;;108    		#if UART2_FIFO_EN == 1
;;;109    			return &g_tUart2;
;;;110    		#else
;;;111    			return 0;
;;;112    		#endif
;;;113    	}
;;;114    	else if (_ucPort == COM3)
;;;115    	{
;;;116    		#if UART3_FIFO_EN == 1
;;;117    			return &g_tUart3;
;;;118    		#else
;;;119    			return 0;
;;;120    		#endif
;;;121    	}
;;;122    	else if (_ucPort == COM4)
;;;123    	{
;;;124    		#if UART4_FIFO_EN == 1
;;;125    			return &g_tUart4;
;;;126    		#else
;;;127    			return 0;
;;;128    		#endif
;;;129    	}
;;;130    	else if (_ucPort == COM5)
;;;131    	{
;;;132    		#if UART5_FIFO_EN == 1
;;;133    			return &g_tUart5;
;;;134    		#else
;;;135    			return 0;
;;;136    		#endif
;;;137    	}
;;;138    	else
;;;139    	{
;;;140    		/* 不做任何处理 */
;;;141    		return 0;
;;;142    	}
;;;143    }
000006  4770              BX       lr
                  |L1.8|
000008  2901              CMP      r1,#1                 ;106
00000a  d101              BNE      |L1.16|
00000c  4808              LDR      r0,|L1.48|
00000e  e7fa              B        |L1.6|
                  |L1.16|
000010  2902              CMP      r1,#2                 ;114
000012  d101              BNE      |L1.24|
000014  4807              LDR      r0,|L1.52|
000016  e7f6              B        |L1.6|
                  |L1.24|
000018  2903              CMP      r1,#3                 ;122
00001a  d101              BNE      |L1.32|
00001c  2000              MOVS     r0,#0                 ;127
00001e  e7f2              B        |L1.6|
                  |L1.32|
000020  2904              CMP      r1,#4                 ;130
000022  d101              BNE      |L1.40|
000024  2000              MOVS     r0,#0                 ;135
000026  e7ee              B        |L1.6|
                  |L1.40|
000028  2000              MOVS     r0,#0                 ;141
00002a  e7ec              B        |L1.6|
;;;144    
                          ENDP

                  |L1.44|
                          DCD      g_tUart1
                  |L1.48|
                          DCD      g_tUart2
                  |L1.52|
                          DCD      g_tUart3

                          AREA ||i.ConfigUartNVIC||, CODE, READONLY, ALIGN=1

                  ConfigUartNVIC PROC
;;;873    */
;;;874    static void ConfigUartNVIC(void)
000000  b508              PUSH     {r3,lr}
;;;875    {
;;;876    	NVIC_InitTypeDef NVIC_InitStructure;
;;;877    
;;;878    	/* Configure the NVIC Preemption Priority Bits */
;;;879    	/*	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);  --- 在 bsp.c 中 bsp_Init() 中配置中断优先级组 */
;;;880    
;;;881    #if UART1_FIFO_EN == 1
;;;882    	/* 使能串口1中断 */
;;;883    	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
000002  2025              MOVS     r0,#0x25
000004  f88d0000          STRB     r0,[sp,#0]
;;;884    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
000008  2001              MOVS     r0,#1
00000a  f88d0001          STRB     r0,[sp,#1]
;;;885    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
00000e  2000              MOVS     r0,#0
000010  f88d0002          STRB     r0,[sp,#2]
;;;886    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000014  2001              MOVS     r0,#1
000016  f88d0003          STRB     r0,[sp,#3]
;;;887    	NVIC_Init(&NVIC_InitStructure);
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       NVIC_Init
;;;888    #endif
;;;889    
;;;890    #if UART2_FIFO_EN == 1
;;;891    	/* 使能串口2中断 */
;;;892    	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
000020  2026              MOVS     r0,#0x26
000022  f88d0000          STRB     r0,[sp,#0]
;;;893    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
000026  2001              MOVS     r0,#1
000028  f88d0001          STRB     r0,[sp,#1]
;;;894    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
00002c  2000              MOVS     r0,#0
00002e  f88d0002          STRB     r0,[sp,#2]
;;;895    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000032  2001              MOVS     r0,#1
000034  f88d0003          STRB     r0,[sp,#3]
;;;896    	NVIC_Init(&NVIC_InitStructure);
000038  4668              MOV      r0,sp
00003a  f7fffffe          BL       NVIC_Init
;;;897    #endif
;;;898    
;;;899    #if UART3_FIFO_EN == 1
;;;900    	/* 使能串口3中断t */
;;;901    	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
00003e  2027              MOVS     r0,#0x27
000040  f88d0000          STRB     r0,[sp,#0]
;;;902    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
000044  2001              MOVS     r0,#1
000046  f88d0001          STRB     r0,[sp,#1]
;;;903    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
00004a  2000              MOVS     r0,#0
00004c  f88d0002          STRB     r0,[sp,#2]
;;;904    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000050  2001              MOVS     r0,#1
000052  f88d0003          STRB     r0,[sp,#3]
;;;905    	NVIC_Init(&NVIC_InitStructure);
000056  4668              MOV      r0,sp
000058  f7fffffe          BL       NVIC_Init
;;;906    #endif
;;;907    
;;;908    #if UART4_FIFO_EN == 1
;;;909    	/* 使能串口4中断t */
;;;910    	NVIC_InitStructure.NVIC_IRQChannel = UART4_IRQn;
;;;911    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
;;;912    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
;;;913    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;914    	NVIC_Init(&NVIC_InitStructure);
;;;915    #endif
;;;916    
;;;917    #if UART5_FIFO_EN == 1
;;;918    	/* 使能串口5中断t */
;;;919    	NVIC_InitStructure.NVIC_IRQChannel = UART5_IRQn;
;;;920    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
;;;921    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
;;;922    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;923    	NVIC_Init(&NVIC_InitStructure);
;;;924    #endif
;;;925    
;;;926    #if UART6_FIFO_EN == 1
;;;927    	/* 使能串口6中断t */
;;;928    	NVIC_InitStructure.NVIC_IRQChannel = USART6_IRQn;
;;;929    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
;;;930    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
;;;931    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;932    	NVIC_Init(&NVIC_InitStructure);
;;;933    #endif
;;;934    }
00005c  bd08              POP      {r3,pc}
;;;935    
                          ENDP


                          AREA ||i.InitHardUart||, CODE, READONLY, ALIGN=2

                  InitHardUart PROC
;;;628    */
;;;629    static void InitHardUart(void)
000000  b500              PUSH     {lr}
;;;630    {
000002  b085              SUB      sp,sp,#0x14
;;;631    	GPIO_InitTypeDef GPIO_InitStructure;
;;;632    	USART_InitTypeDef USART_InitStructure;
;;;633    
;;;634    #if UART1_FIFO_EN == 1		/* 串口1 TX = PA9   RX = PA10 或 TX = PB6   RX = PB7*/
;;;635    
;;;636    	/* 第1步：打开GPIO和USART部件的时钟 */
;;;637    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
000004  2101              MOVS     r1,#1
000006  2005              MOVS     r0,#5
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;638    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  0388              LSLS     r0,r1,#14
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;639    
;;;640    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;641    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
000014  f44f7000          MOV      r0,#0x200
000018  f8ad0010          STRH     r0,[sp,#0x10]
;;;642    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00001c  2018              MOVS     r0,#0x18
00001e  f88d0013          STRB     r0,[sp,#0x13]
;;;643    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000022  2003              MOVS     r0,#3
000024  f88d0012          STRB     r0,[sp,#0x12]
;;;644    	GPIO_Init(GPIOA, &GPIO_InitStructure);
000028  a904              ADD      r1,sp,#0x10
00002a  485e              LDR      r0,|L3.420|
00002c  f7fffffe          BL       GPIO_Init
;;;645    
;;;646    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;647    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;648    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;649    	*/
;;;650    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
000030  f44f6080          MOV      r0,#0x400
000034  f8ad0010          STRH     r0,[sp,#0x10]
;;;651    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000038  2004              MOVS     r0,#4
00003a  f88d0013          STRB     r0,[sp,#0x13]
;;;652    	GPIO_Init(GPIOA, &GPIO_InitStructure);
00003e  a904              ADD      r1,sp,#0x10
000040  4858              LDR      r0,|L3.420|
000042  f7fffffe          BL       GPIO_Init
;;;653    	
;;;654    	/* 第4步： 配置串口硬件参数 */
;;;655    	USART_InitStructure.USART_BaudRate = UART1_BAUD;	/* 波特率 */
000046  f44f2061          MOV      r0,#0xe1000
00004a  9000              STR      r0,[sp,#0]
;;;656    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
00004c  2000              MOVS     r0,#0
00004e  f8ad0004          STRH     r0,[sp,#4]
;;;657    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
000052  f8ad0006          STRH     r0,[sp,#6]
;;;658    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000056  f8ad0008          STRH     r0,[sp,#8]
;;;659    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
00005a  f8ad000c          STRH     r0,[sp,#0xc]
;;;660    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
00005e  200c              MOVS     r0,#0xc
000060  f8ad000a          STRH     r0,[sp,#0xa]
;;;661    	USART_Init(USART1, &USART_InitStructure);
000064  4669              MOV      r1,sp
000066  4850              LDR      r0,|L3.424|
000068  f7fffffe          BL       USART_Init
;;;662    
;;;663    	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
00006c  2201              MOVS     r2,#1
00006e  f2405125          MOV      r1,#0x525
000072  484d              LDR      r0,|L3.424|
000074  f7fffffe          BL       USART_ITConfig
;;;664    	/*
;;;665    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;666    		注意: 不要在此处打开发送中断
;;;667    		发送中断使能在SendUart()函数打开
;;;668    	*/
;;;669    	USART_Cmd(USART1, ENABLE);		/* 使能串口 */
000078  2101              MOVS     r1,#1
00007a  484b              LDR      r0,|L3.424|
00007c  f7fffffe          BL       USART_Cmd
;;;670    
;;;671    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;672    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;673    	USART_ClearFlag(USART1, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
000080  2140              MOVS     r1,#0x40
000082  4849              LDR      r0,|L3.424|
000084  f7fffffe          BL       USART_ClearFlag
;;;674    #endif
;;;675    
;;;676    #if UART2_FIFO_EN == 1		/* 串口2 TX = PA2， RX = PA3  */
;;;677    /******************************************************************************
;;;678     * description : Initialization of USART2.PA0->CTS PA1->RTS PA2->TX PA3->RX
;;;679    ******************************************************************************/
;;;680    	/* 第1步：打开GPIO和USART部件的时钟 */
;;;681    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
000088  2101              MOVS     r1,#1
00008a  2005              MOVS     r0,#5
00008c  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;682    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
000090  2101              MOVS     r1,#1
000092  0448              LSLS     r0,r1,#17
000094  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;683    
;;;684    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;685    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1|GPIO_Pin_2;
000098  2006              MOVS     r0,#6
00009a  f8ad0010          STRH     r0,[sp,#0x10]
;;;686    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00009e  2018              MOVS     r0,#0x18
0000a0  f88d0013          STRB     r0,[sp,#0x13]
;;;687    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
0000a4  2003              MOVS     r0,#3
0000a6  f88d0012          STRB     r0,[sp,#0x12]
;;;688    	GPIO_Init(GPIOA, &GPIO_InitStructure);
0000aa  a904              ADD      r1,sp,#0x10
0000ac  483d              LDR      r0,|L3.420|
0000ae  f7fffffe          BL       GPIO_Init
;;;689    
;;;690    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;691    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;692    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;693    	*/
;;;694    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_3;
0000b2  2009              MOVS     r0,#9
0000b4  f8ad0010          STRH     r0,[sp,#0x10]
;;;695    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
0000b8  2004              MOVS     r0,#4
0000ba  f88d0013          STRB     r0,[sp,#0x13]
;;;696    	GPIO_Init(GPIOA, &GPIO_InitStructure);
0000be  a904              ADD      r1,sp,#0x10
0000c0  4838              LDR      r0,|L3.420|
0000c2  f7fffffe          BL       GPIO_Init
;;;697    	/*  第3步已经做了，因此这步可以不做
;;;698    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;699    	*/
;;;700    	GPIO_Init(GPIOA, &GPIO_InitStructure);
0000c6  a904              ADD      r1,sp,#0x10
0000c8  4836              LDR      r0,|L3.420|
0000ca  f7fffffe          BL       GPIO_Init
;;;701    
;;;702    	/* 第4步： 配置串口硬件参数 */
;;;703    	USART_InitStructure.USART_BaudRate = UART2_BAUD;	/* 波特率 */
0000ce  f44f2061          MOV      r0,#0xe1000
0000d2  9000              STR      r0,[sp,#0]
;;;704    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
0000d4  2000              MOVS     r0,#0
0000d6  f8ad0004          STRH     r0,[sp,#4]
;;;705    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
0000da  f8ad0006          STRH     r0,[sp,#6]
;;;706    	USART_InitStructure.USART_Parity = USART_Parity_No ;
0000de  f8ad0008          STRH     r0,[sp,#8]
;;;707    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_RTS_CTS;
0000e2  f44f7040          MOV      r0,#0x300
0000e6  f8ad000c          STRH     r0,[sp,#0xc]
;;;708    	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;		/* 仅选择接收模式 */
0000ea  200c              MOVS     r0,#0xc
0000ec  f8ad000a          STRH     r0,[sp,#0xa]
;;;709    	USART_Init(USART2, &USART_InitStructure);
0000f0  4669              MOV      r1,sp
0000f2  482e              LDR      r0,|L3.428|
0000f4  f7fffffe          BL       USART_Init
;;;710    
;;;711    	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
0000f8  2201              MOVS     r2,#1
0000fa  f2405125          MOV      r1,#0x525
0000fe  482b              LDR      r0,|L3.428|
000100  f7fffffe          BL       USART_ITConfig
;;;712    	//USART_ITConfig(USART2, USART_IT_TXE, ENABLE);	/* 使能发送中断 */
;;;713    	/*
;;;714    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;715    		注意: 不要在此处打开发送中断
;;;716    		发送中断使能在SendUart()函数打开
;;;717    	*/
;;;718    	USART_Cmd(USART2, ENABLE);		/* 使能串口 */
000104  2101              MOVS     r1,#1
000106  4829              LDR      r0,|L3.428|
000108  f7fffffe          BL       USART_Cmd
;;;719    
;;;720    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;721    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;722    	USART_ClearFlag(USART2, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
00010c  2140              MOVS     r1,#0x40
00010e  4827              LDR      r0,|L3.428|
000110  f7fffffe          BL       USART_ClearFlag
;;;723    #endif
;;;724    
;;;725    #if UART3_FIFO_EN == 1			/* 串口3 TX = PB10   RX = PB11 */
;;;726    
;;;727    	/* 配置 PB2为推挽输出，用于切换 RS485芯片的收发状态 */
;;;728    #if RS485_ENABLE
;;;729    	{
;;;730    		RCC_APB2PeriphClockCmd(RCC_RS485_TXEN, ENABLE);
;;;731    
;;;732    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
;;;733    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;734    		GPIO_InitStructure.GPIO_Pin = PIN_RS485_TXEN;
;;;735    		GPIO_Init(PORT_RS485_TXEN, &GPIO_InitStructure);
;;;736    	}
;;;737    #endif
;;;738    	/* 第1步： 开启GPIO和UART时钟 */
;;;739    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO, ENABLE);
000114  2101              MOVS     r1,#1
000116  2009              MOVS     r0,#9
000118  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;740    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
00011c  2101              MOVS     r1,#1
00011e  0488              LSLS     r0,r1,#18
000120  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;741    
;;;742    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;743    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
000124  f44f6080          MOV      r0,#0x400
000128  f8ad0010          STRH     r0,[sp,#0x10]
;;;744    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
00012c  2018              MOVS     r0,#0x18
00012e  f88d0013          STRB     r0,[sp,#0x13]
;;;745    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000132  2003              MOVS     r0,#3
000134  f88d0012          STRB     r0,[sp,#0x12]
;;;746    	GPIO_Init(GPIOB, &GPIO_InitStructure);
000138  a904              ADD      r1,sp,#0x10
00013a  481d              LDR      r0,|L3.432|
00013c  f7fffffe          BL       GPIO_Init
;;;747    
;;;748    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;749    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;750    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;751    	*/
;;;752    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
000140  f44f6000          MOV      r0,#0x800
000144  f8ad0010          STRH     r0,[sp,#0x10]
;;;753    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000148  2004              MOVS     r0,#4
00014a  f88d0013          STRB     r0,[sp,#0x13]
;;;754    	GPIO_Init(GPIOB, &GPIO_InitStructure);
00014e  a904              ADD      r1,sp,#0x10
000150  4817              LDR      r0,|L3.432|
000152  f7fffffe          BL       GPIO_Init
;;;755    	/*  第3步已经做了，因此这步可以不做
;;;756    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;757    	*/
;;;758    	GPIO_Init(GPIOB, &GPIO_InitStructure);
000156  a904              ADD      r1,sp,#0x10
000158  4815              LDR      r0,|L3.432|
00015a  f7fffffe          BL       GPIO_Init
;;;759    
;;;760    	/* 第4步： 配置串口硬件参数 */
;;;761    	USART_InitStructure.USART_BaudRate = UART3_BAUD;	/* 波特率 */
00015e  f44f2061          MOV      r0,#0xe1000
000162  9000              STR      r0,[sp,#0]
;;;762    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000164  2000              MOVS     r0,#0
000166  f8ad0004          STRH     r0,[sp,#4]
;;;763    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00016a  f8ad0006          STRH     r0,[sp,#6]
;;;764    	USART_InitStructure.USART_Parity = USART_Parity_No ;
00016e  f8ad0008          STRH     r0,[sp,#8]
;;;765    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000172  f8ad000c          STRH     r0,[sp,#0xc]
;;;766    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000176  200c              MOVS     r0,#0xc
000178  f8ad000a          STRH     r0,[sp,#0xa]
;;;767    	USART_Init(USART3, &USART_InitStructure);
00017c  4669              MOV      r1,sp
00017e  480d              LDR      r0,|L3.436|
000180  f7fffffe          BL       USART_Init
;;;768    
;;;769    	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
000184  2201              MOVS     r2,#1
000186  f2405125          MOV      r1,#0x525
00018a  480a              LDR      r0,|L3.436|
00018c  f7fffffe          BL       USART_ITConfig
;;;770    	/*
;;;771    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;772    		注意: 不要在此处打开发送中断
;;;773    		发送中断使能在SendUart()函数打开
;;;774    	*/
;;;775    	USART_Cmd(USART3, ENABLE);		/* 使能串口 */
000190  2101              MOVS     r1,#1
000192  4808              LDR      r0,|L3.436|
000194  f7fffffe          BL       USART_Cmd
;;;776    
;;;777    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;778    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;779    	USART_ClearFlag(USART3, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
000198  2140              MOVS     r1,#0x40
00019a  4806              LDR      r0,|L3.436|
00019c  f7fffffe          BL       USART_ClearFlag
;;;780    #endif
;;;781    
;;;782    #if UART4_FIFO_EN == 1			/* 串口4 TX = PC10   RX = PC11 */
;;;783    	/* 第1步： 开启GPIO和UART时钟 */
;;;784    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_AFIO, ENABLE);
;;;785    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
;;;786    
;;;787    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;788    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
;;;789    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
;;;790    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;791    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;792    
;;;793    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;794    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;795    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;796    	*/
;;;797    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
;;;798    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
;;;799    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;800    
;;;801    	/* 第4步： 配置串口硬件参数 */
;;;802    	USART_InitStructure.USART_BaudRate = UART4_BAUD;	/* 波特率 */
;;;803    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
;;;804    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;805    	USART_InitStructure.USART_Parity = USART_Parity_No ;
;;;806    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;807    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
;;;808    	USART_Init(UART4, &USART_InitStructure);
;;;809    
;;;810    	USART_ITConfig(UART4, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
;;;811    	/*
;;;812    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;813    		注意: 不要在此处打开发送中断
;;;814    		发送中断使能在SendUart()函数打开
;;;815    	*/
;;;816    	USART_Cmd(UART4, ENABLE);		/* 使能串口 */
;;;817    
;;;818    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;819    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;820    	USART_ClearFlag(UART4, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
;;;821    #endif
;;;822    
;;;823    #if UART5_FIFO_EN == 1			/* 串口5 TX = PC12   RX = PD2 */
;;;824    	/* 第1步： 开启GPIO和UART时钟 */
;;;825    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD | RCC_APB2Periph_AFIO, ENABLE);
;;;826    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
;;;827    
;;;828    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;829    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
;;;830    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
;;;831    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;832    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;833    
;;;834    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;835    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;836    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;837    	*/
;;;838    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
;;;839    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
;;;840    	GPIO_Init(GPIOD, &GPIO_InitStructure);
;;;841    
;;;842    
;;;843    	/* 第4步： 配置串口硬件参数 */
;;;844    	USART_InitStructure.USART_BaudRate = UART5_BAUD;	/* 波特率 */
;;;845    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
;;;846    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;847    	USART_InitStructure.USART_Parity = USART_Parity_No ;
;;;848    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;849    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
;;;850    	USART_Init(UART5, &USART_InitStructure);
;;;851    
;;;852    	USART_ITConfig(UART5, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
;;;853    	/*
;;;854    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;855    		注意: 不要在此处打开发送中断
;;;856    		发送中断使能在SendUart()函数打开
;;;857    	*/
;;;858    	USART_Cmd(UART5, ENABLE);		/* 使能串口 */
;;;859    
;;;860    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;861    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;862    	USART_ClearFlag(UART5, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
;;;863    #endif
;;;864    }
0001a0  b005              ADD      sp,sp,#0x14
0001a2  bd00              POP      {pc}
;;;865    
                          ENDP

                  |L3.420|
                          DCD      0x40010800
                  |L3.424|
                          DCD      0x40013800
                  |L3.428|
                          DCD      0x40004400
                  |L3.432|
                          DCD      0x40010c00
                  |L3.436|
                          DCD      0x40004800

                          AREA ||i.RS485_InitTXE||, CODE, READONLY, ALIGN=2

                  RS485_InitTXE PROC
;;;399    */
;;;400    void RS485_InitTXE(void)
000000  b508              PUSH     {r3,lr}
;;;401    {
;;;402    	GPIO_InitTypeDef GPIO_InitStructure;
;;;403    
;;;404    	RCC_APB2PeriphClockCmd(RCC_RS485_TXEN, ENABLE);	/* 打开GPIO时钟 */
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;405    
;;;406    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00000a  2003              MOVS     r0,#3
00000c  f88d0002          STRB     r0,[sp,#2]
;;;407    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	/* 推挽输出模式 */
000010  2010              MOVS     r0,#0x10
000012  f88d0003          STRB     r0,[sp,#3]
;;;408    	GPIO_InitStructure.GPIO_Pin = PIN_RS485_TXEN;
000016  2004              MOVS     r0,#4
000018  f8ad0000          STRH     r0,[sp,#0]
;;;409    	GPIO_Init(PORT_RS485_TXEN, &GPIO_InitStructure);
00001c  4669              MOV      r1,sp
00001e  4802              LDR      r0,|L4.40|
000020  f7fffffe          BL       GPIO_Init
;;;410    }
000024  bd08              POP      {r3,pc}
;;;411    
                          ENDP

000026  0000              DCW      0x0000
                  |L4.40|
                          DCD      0x40010c00

                          AREA ||i.RS485_ReciveNew||, CODE, READONLY, ALIGN=1

                  RS485_ReciveNew PROC
;;;499    //extern void MODBUS_ReciveNew(uint8_t _byte);
;;;500    void RS485_ReciveNew(uint8_t _byte)
000000  4770              BX       lr
;;;501    {
;;;502    //	MODBUS_ReciveNew(_byte);
;;;503    }
;;;504    
                          ENDP


                          AREA ||i.RS485_SendBefor||, CODE, READONLY, ALIGN=2

                  RS485_SendBefor PROC
;;;442    */
;;;443    void RS485_SendBefor(void)
000000  2004              MOVS     r0,#4
;;;444    {
;;;445    	RS485_TX_EN();	/* 切换RS485收发芯片为发送模式 */
000002  4901              LDR      r1,|L6.8|
000004  6008              STR      r0,[r1,#0]
;;;446    }
000006  4770              BX       lr
;;;447    
                          ENDP

                  |L6.8|
                          DCD      0x40010c10

                          AREA ||i.RS485_SendBuf||, CODE, READONLY, ALIGN=1

                  RS485_SendBuf PROC
;;;470    */
;;;471    void RS485_SendBuf(uint8_t *_ucaBuf, uint16_t _usLen)
000000  b570              PUSH     {r4-r6,lr}
;;;472    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;473    	comSendBuf(COM3, _ucaBuf, _usLen);
000006  462a              MOV      r2,r5
000008  4621              MOV      r1,r4
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       comSendBuf
;;;474    }
000010  bd70              POP      {r4-r6,pc}
;;;475    
                          ENDP


                          AREA ||i.RS485_SendOver||, CODE, READONLY, ALIGN=2

                  RS485_SendOver PROC
;;;456    */
;;;457    void RS485_SendOver(void)
000000  2004              MOVS     r0,#4
;;;458    {
;;;459    	RS485_RX_EN();	/* 切换RS485收发芯片为接收模式 */
000002  4901              LDR      r1,|L8.8|
000004  6008              STR      r0,[r1,#0]
;;;460    }
000006  4770              BX       lr
;;;461    
                          ENDP

                  |L8.8|
                          DCD      0x40010c14

                          AREA ||i.RS485_SendStr||, CODE, READONLY, ALIGN=1

                  RS485_SendStr PROC
;;;485    */
;;;486    void RS485_SendStr(char *_pBuf)
000000  b570              PUSH     {r4-r6,lr}
;;;487    {
000002  4604              MOV      r4,r0
;;;488    	RS485_SendBuf((uint8_t *)_pBuf, strlen(_pBuf));
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       strlen
00000a  b285              UXTH     r5,r0
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       RS485_SendBuf
;;;489    }
000014  bd70              POP      {r4-r6,pc}
;;;490    
                          ENDP


                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;1147   #if UART1_FIFO_EN == 1
;;;1148   void USART1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1149   {
;;;1150   	UartIRQ(&g_tUart1);
000002  4802              LDR      r0,|L10.12|
000004  f7fffffe          BL       UartIRQ
;;;1151   }
000008  bd10              POP      {r4,pc}
;;;1152   #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L10.12|
                          DCD      g_tUart1

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;1154   #if UART2_FIFO_EN == 1
;;;1155   void USART2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1156   {
;;;1157   	UartIRQ(&g_tUart2);
000002  4802              LDR      r0,|L11.12|
000004  f7fffffe          BL       UartIRQ
;;;1158   }
000008  bd10              POP      {r4,pc}
;;;1159   #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L11.12|
                          DCD      g_tUart2

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;1161   #if UART3_FIFO_EN == 1
;;;1162   void USART3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1163   {
;;;1164   	UartIRQ(&g_tUart3);
000002  4802              LDR      r0,|L12.12|
000004  f7fffffe          BL       UartIRQ
;;;1165   }
000008  bd10              POP      {r4,pc}
;;;1166   #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L12.12|
                          DCD      g_tUart3

                          AREA ||i.UartGetChar||, CODE, READONLY, ALIGN=1

                  UartGetChar PROC
;;;1015   */
;;;1016   static uint8_t UartGetChar(UART_T *_pUart, uint8_t *_pByte)
000000  b570              PUSH     {r4-r6,lr}
;;;1017   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1018   	uint16_t usCount;
;;;1019   
;;;1020   	/* usRxWrite 变量在中断函数中被改写，主程序读取该变量时，必须进行临界区保护 */
;;;1021   	DISABLE_INT();
000006  f7fffffe          BL       bsp_disable_interrupt
;;;1022   	usCount = _pUart->usRxCount;
00000a  8b66              LDRH     r6,[r4,#0x1a]
;;;1023   	ENABLE_INT();
00000c  f7fffffe          BL       bsp_enable_interrupt
;;;1024   
;;;1025   	/* 如果读和写索引相同，则返回0 */
;;;1026   	//if (_pUart->usRxRead == usRxWrite)
;;;1027   	if (usCount == 0)	/* 已经没有数据 */
000010  b90e              CBNZ     r6,|L13.22|
;;;1028   	{
;;;1029   		return 0;
000012  2000              MOVS     r0,#0
                  |L13.20|
;;;1030   	}
;;;1031   	else
;;;1032   	{
;;;1033   		*_pByte = _pUart->pRxBuf[_pUart->usRxRead];		/* 从串口接收FIFO取1个数据 */
;;;1034   
;;;1035   		/* 改写FIFO读索引 */
;;;1036   		DISABLE_INT();
;;;1037   		if (++_pUart->usRxRead >= _pUart->usRxBufSize)
;;;1038   		{
;;;1039   			_pUart->usRxRead = 0;
;;;1040   		}
;;;1041   		_pUart->usRxCount--;
;;;1042   		ENABLE_INT();
;;;1043   		return 1;
;;;1044   	}
;;;1045   }
000014  bd70              POP      {r4-r6,pc}
                  |L13.22|
000016  8b21              LDRH     r1,[r4,#0x18]         ;1033
000018  68a0              LDR      r0,[r4,#8]            ;1033
00001a  5c40              LDRB     r0,[r0,r1]            ;1033
00001c  7028              STRB     r0,[r5,#0]            ;1033
00001e  f7fffffe          BL       bsp_disable_interrupt
000022  8b20              LDRH     r0,[r4,#0x18]         ;1037
000024  1c40              ADDS     r0,r0,#1              ;1037
000026  b280              UXTH     r0,r0                 ;1037
000028  8320              STRH     r0,[r4,#0x18]         ;1037
00002a  89e1              LDRH     r1,[r4,#0xe]          ;1037
00002c  4288              CMP      r0,r1                 ;1037
00002e  db01              BLT      |L13.52|
000030  2000              MOVS     r0,#0                 ;1039
000032  8320              STRH     r0,[r4,#0x18]         ;1039
                  |L13.52|
000034  8b60              LDRH     r0,[r4,#0x1a]         ;1041
000036  1e40              SUBS     r0,r0,#1              ;1041
000038  8360              STRH     r0,[r4,#0x1a]         ;1041
00003a  f7fffffe          BL       bsp_enable_interrupt
00003e  2001              MOVS     r0,#1                 ;1043
000040  e7e8              B        |L13.20|
;;;1046   
                          ENDP


                          AREA ||i.UartIRQ||, CODE, READONLY, ALIGN=1

                  UartIRQ PROC
;;;1054   */
;;;1055   static void UartIRQ(UART_T *_pUart)
000000  b570              PUSH     {r4-r6,lr}
;;;1056   {
000002  4604              MOV      r4,r0
;;;1057   	/* 处理接收中断  */
;;;1058   	if (USART_GetITStatus(_pUart->uart, USART_IT_RXNE) != RESET)
000004  f2405125          MOV      r1,#0x525
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       USART_GetITStatus
00000e  b1e0              CBZ      r0,|L14.74|
;;;1059   	{
;;;1060   		/* 从串口接收数据寄存器读取数据存放到接收FIFO */
;;;1061   		uint8_t ch;
;;;1062   
;;;1063   		ch = USART_ReceiveData(_pUart->uart);
000010  6820              LDR      r0,[r4,#0]
000012  f7fffffe          BL       USART_ReceiveData
000016  b2c5              UXTB     r5,r0
;;;1064   		_pUart->pRxBuf[_pUart->usRxWrite] = ch;
000018  8ae1              LDRH     r1,[r4,#0x16]
00001a  68a0              LDR      r0,[r4,#8]
00001c  5445              STRB     r5,[r0,r1]
;;;1065   		if (++_pUart->usRxWrite >= _pUart->usRxBufSize)
00001e  8ae0              LDRH     r0,[r4,#0x16]
000020  1c40              ADDS     r0,r0,#1
000022  b280              UXTH     r0,r0
000024  82e0              STRH     r0,[r4,#0x16]
000026  89e1              LDRH     r1,[r4,#0xe]
000028  4288              CMP      r0,r1
00002a  db01              BLT      |L14.48|
;;;1066   		{
;;;1067   			_pUart->usRxWrite = 0;
00002c  2000              MOVS     r0,#0
00002e  82e0              STRH     r0,[r4,#0x16]
                  |L14.48|
;;;1068   		}
;;;1069   		if (_pUart->usRxCount < _pUart->usRxBufSize)
000030  8b60              LDRH     r0,[r4,#0x1a]
000032  89e1              LDRH     r1,[r4,#0xe]
000034  4288              CMP      r0,r1
000036  da02              BGE      |L14.62|
;;;1070   		{
;;;1071   			_pUart->usRxCount++;
000038  8b60              LDRH     r0,[r4,#0x1a]
00003a  1c40              ADDS     r0,r0,#1
00003c  8360              STRH     r0,[r4,#0x1a]
                  |L14.62|
;;;1072   		}
;;;1073   
;;;1074   		/* 回调函数,通知应用程序收到新数据,一般是发送1个消息或者设置一个标记 */
;;;1075   		//if (_pUart->usRxWrite == _pUart->usRxRead)
;;;1076   		//if (_pUart->usRxCount == 1)
;;;1077   		{
;;;1078   			if (_pUart->ReciveNew)
00003e  6a60              LDR      r0,[r4,#0x24]
000040  b110              CBZ      r0,|L14.72|
;;;1079   			{
;;;1080   				_pUart->ReciveNew(ch);
000042  4628              MOV      r0,r5
000044  6a61              LDR      r1,[r4,#0x24]
000046  4788              BLX      r1
                  |L14.72|
;;;1081   			}
;;;1082   		}
;;;1083   	}
000048  bf00              NOP      
                  |L14.74|
;;;1084   
;;;1085   	/* 处理发送缓冲区空中断 */
;;;1086   	if (USART_GetITStatus(_pUart->uart, USART_IT_TXE) != RESET)
00004a  f2407127          MOV      r1,#0x727
00004e  6820              LDR      r0,[r4,#0]
000050  f7fffffe          BL       USART_GetITStatus
000054  b308              CBZ      r0,|L14.154|
;;;1087   	{
;;;1088   		//if (_pUart->usTxRead == _pUart->usTxWrite)
;;;1089   		if (_pUart->usTxCount == 0)
000056  8aa0              LDRH     r0,[r4,#0x14]
000058  b960              CBNZ     r0,|L14.116|
;;;1090   		{
;;;1091   			/* 发送缓冲区的数据已取完时， 禁止发送缓冲区空中断 （注意：此时最后1个数据还未真正发送完毕）*/
;;;1092   			USART_ITConfig(_pUart->uart, USART_IT_TXE, DISABLE);
00005a  2200              MOVS     r2,#0
00005c  f2407127          MOV      r1,#0x727
000060  6820              LDR      r0,[r4,#0]
000062  f7fffffe          BL       USART_ITConfig
;;;1093   
;;;1094   			/* 使能数据发送完毕中断 */
;;;1095   			USART_ITConfig(_pUart->uart, USART_IT_TC, ENABLE);
000066  2201              MOVS     r2,#1
000068  f2406126          MOV      r1,#0x626
00006c  6820              LDR      r0,[r4,#0]
00006e  f7fffffe          BL       USART_ITConfig
000072  e037              B        |L14.228|
                  |L14.116|
;;;1096   		}
;;;1097   		else
;;;1098   		{
;;;1099   			/* 从发送FIFO取1个字节写入串口发送数据寄存器 */
;;;1100   			USART_SendData(_pUart->uart, _pUart->pTxBuf[_pUart->usTxRead]);
000074  8a63              LDRH     r3,[r4,#0x12]
000076  6862              LDR      r2,[r4,#4]
000078  5cd1              LDRB     r1,[r2,r3]
00007a  6820              LDR      r0,[r4,#0]
00007c  f7fffffe          BL       USART_SendData
;;;1101   			if (++_pUart->usTxRead >= _pUart->usTxBufSize)
000080  8a60              LDRH     r0,[r4,#0x12]
000082  1c40              ADDS     r0,r0,#1
000084  b280              UXTH     r0,r0
000086  8260              STRH     r0,[r4,#0x12]
000088  89a1              LDRH     r1,[r4,#0xc]
00008a  4288              CMP      r0,r1
00008c  db01              BLT      |L14.146|
;;;1102   			{
;;;1103   				_pUart->usTxRead = 0;
00008e  2000              MOVS     r0,#0
000090  8260              STRH     r0,[r4,#0x12]
                  |L14.146|
;;;1104   			}
;;;1105   			_pUart->usTxCount--;
000092  8aa0              LDRH     r0,[r4,#0x14]
000094  1e40              SUBS     r0,r0,#1
000096  82a0              STRH     r0,[r4,#0x14]
000098  e024              B        |L14.228|
                  |L14.154|
;;;1106   		}
;;;1107   
;;;1108   	}
;;;1109   	/* 数据bit位全部发送完毕的中断 */
;;;1110   	else if (USART_GetITStatus(_pUart->uart, USART_IT_TC) != RESET)
00009a  f2406126          MOV      r1,#0x626
00009e  6820              LDR      r0,[r4,#0]
0000a0  f7fffffe          BL       USART_GetITStatus
0000a4  b1f0              CBZ      r0,|L14.228|
;;;1111   	{
;;;1112   		//if (_pUart->usTxRead == _pUart->usTxWrite)
;;;1113   		if (_pUart->usTxCount == 0)
0000a6  8aa0              LDRH     r0,[r4,#0x14]
0000a8  b950              CBNZ     r0,|L14.192|
;;;1114   		{
;;;1115   			/* 如果发送FIFO的数据全部发送完毕，禁止数据发送完毕中断 */
;;;1116   			USART_ITConfig(_pUart->uart, USART_IT_TC, DISABLE);
0000aa  2200              MOVS     r2,#0
0000ac  f2406126          MOV      r1,#0x626
0000b0  6820              LDR      r0,[r4,#0]
0000b2  f7fffffe          BL       USART_ITConfig
;;;1117   
;;;1118   			/* 回调函数, 一般用来处理RS485通信，将RS485芯片设置为接收模式，避免抢占总线 */
;;;1119   			if (_pUart->SendOver)
0000b6  6a20              LDR      r0,[r4,#0x20]
0000b8  b1a0              CBZ      r0,|L14.228|
;;;1120   			{
;;;1121   				_pUart->SendOver();
0000ba  6a20              LDR      r0,[r4,#0x20]
0000bc  4780              BLX      r0
0000be  e011              B        |L14.228|
                  |L14.192|
;;;1122   			}
;;;1123   		}
;;;1124   		else
;;;1125   		{
;;;1126   			/* 正常情况下，不会进入此分支 */
;;;1127   
;;;1128   			/* 如果发送FIFO的数据还未完毕，则从发送FIFO取1个数据写入发送数据寄存器 */
;;;1129   			USART_SendData(_pUart->uart, _pUart->pTxBuf[_pUart->usTxRead]);
0000c0  8a63              LDRH     r3,[r4,#0x12]
0000c2  6862              LDR      r2,[r4,#4]
0000c4  5cd1              LDRB     r1,[r2,r3]
0000c6  6820              LDR      r0,[r4,#0]
0000c8  f7fffffe          BL       USART_SendData
;;;1130   			if (++_pUart->usTxRead >= _pUart->usTxBufSize)
0000cc  8a60              LDRH     r0,[r4,#0x12]
0000ce  1c40              ADDS     r0,r0,#1
0000d0  b280              UXTH     r0,r0
0000d2  8260              STRH     r0,[r4,#0x12]
0000d4  89a1              LDRH     r1,[r4,#0xc]
0000d6  4288              CMP      r0,r1
0000d8  db01              BLT      |L14.222|
;;;1131   			{
;;;1132   				_pUart->usTxRead = 0;
0000da  2000              MOVS     r0,#0
0000dc  8260              STRH     r0,[r4,#0x12]
                  |L14.222|
;;;1133   			}
;;;1134   			_pUart->usTxCount--;
0000de  8aa0              LDRH     r0,[r4,#0x14]
0000e0  1e40              SUBS     r0,r0,#1
0000e2  82a0              STRH     r0,[r4,#0x14]
                  |L14.228|
;;;1135   		}
;;;1136   	}
;;;1137   }
0000e4  bd70              POP      {r4-r6,pc}
;;;1138   
                          ENDP


                          AREA ||i.UartSend||, CODE, READONLY, ALIGN=1

                  UartSend PROC
;;;943    */
;;;944    static void UartSend(UART_T *_pUart, uint8_t *_ucaBuf, uint16_t _usLen)
000000  b5f8              PUSH     {r3-r7,lr}
;;;945    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;946    	uint16_t i;
;;;947    
;;;948    	for (i = 0; i < _usLen; i++)
000008  2500              MOVS     r5,#0
00000a  e025              B        |L15.88|
                  |L15.12|
;;;949    	{
;;;950    		/* 如果发送缓冲区已经满了，则等待缓冲区空 */
;;;951    	#if 0
;;;952    		/*
;;;953    			在调试GPRS例程时，下面的代码出现死机，while 死循环
;;;954    			原因： 发送第1个字节时 _pUart->usTxWrite = 1；_pUart->usTxRead = 0;
;;;955    			将导致while(1) 无法退出
;;;956    		*/
;;;957    		while (1)
;;;958    		{
;;;959    			uint16_t usRead;
;;;960    
;;;961    			DISABLE_INT();
;;;962    			usRead = _pUart->usTxRead;
;;;963    			ENABLE_INT();
;;;964    
;;;965    			if (++usRead >= _pUart->usTxBufSize)
;;;966    			{
;;;967    				usRead = 0;
;;;968    			}
;;;969    
;;;970    			if (usRead != _pUart->usTxWrite)
;;;971    			{
;;;972    				break;
;;;973    			}
;;;974    		}
;;;975    	#else
;;;976    		/* 当 _pUart->usTxBufSize == 1 时, 下面的函数会死掉(待完善) */
;;;977    		while (1)
00000c  e00c              B        |L15.40|
                  |L15.14|
;;;978    		{
;;;979    			__IO uint16_t usCount;
;;;980    
;;;981    			DISABLE_INT();
00000e  f7fffffe          BL       bsp_disable_interrupt
;;;982    			usCount = _pUart->usTxCount;
000012  8aa0              LDRH     r0,[r4,#0x14]
000014  9000              STR      r0,[sp,#0]
;;;983    			ENABLE_INT();
000016  f7fffffe          BL       bsp_enable_interrupt
;;;984    
;;;985    			if (usCount < _pUart->usTxBufSize)
00001a  89a0              LDRH     r0,[r4,#0xc]
00001c  f8bd1000          LDRH     r1,[sp,#0]
000020  4288              CMP      r0,r1
000022  dd00              BLE      |L15.38|
;;;986    			{
;;;987    				break;
000024  e001              B        |L15.42|
                  |L15.38|
;;;988    			}
;;;989    		}
000026  bf00              NOP      
                  |L15.40|
000028  e7f1              B        |L15.14|
                  |L15.42|
00002a  bf00              NOP                            ;987
;;;990    	#endif
;;;991    
;;;992    		/* 将新数据填入发送缓冲区 */
;;;993    		_pUart->pTxBuf[_pUart->usTxWrite] = _ucaBuf[i];
00002c  5d70              LDRB     r0,[r6,r5]
00002e  8a22              LDRH     r2,[r4,#0x10]
000030  6861              LDR      r1,[r4,#4]
000032  5488              STRB     r0,[r1,r2]
;;;994    
;;;995    		DISABLE_INT();
000034  f7fffffe          BL       bsp_disable_interrupt
;;;996    		if (++_pUart->usTxWrite >= _pUart->usTxBufSize)
000038  8a20              LDRH     r0,[r4,#0x10]
00003a  1c40              ADDS     r0,r0,#1
00003c  b280              UXTH     r0,r0
00003e  8220              STRH     r0,[r4,#0x10]
000040  89a1              LDRH     r1,[r4,#0xc]
000042  4288              CMP      r0,r1
000044  db01              BLT      |L15.74|
;;;997    		{
;;;998    			_pUart->usTxWrite = 0;
000046  2000              MOVS     r0,#0
000048  8220              STRH     r0,[r4,#0x10]
                  |L15.74|
;;;999    		}
;;;1000   		_pUart->usTxCount++;
00004a  8aa0              LDRH     r0,[r4,#0x14]
00004c  1c40              ADDS     r0,r0,#1
00004e  82a0              STRH     r0,[r4,#0x14]
;;;1001   		ENABLE_INT();
000050  f7fffffe          BL       bsp_enable_interrupt
000054  1c68              ADDS     r0,r5,#1              ;948
000056  b285              UXTH     r5,r0                 ;948
                  |L15.88|
000058  42bd              CMP      r5,r7                 ;948
00005a  dbd7              BLT      |L15.12|
;;;1002   	}
;;;1003   
;;;1004   	USART_ITConfig(_pUart->uart, USART_IT_TXE, ENABLE);
00005c  2201              MOVS     r2,#1
00005e  f2407127          MOV      r1,#0x727
000062  6820              LDR      r0,[r4,#0]
000064  f7fffffe          BL       USART_ITConfig
;;;1005   }
000068  bdf8              POP      {r3-r7,pc}
;;;1006   
                          ENDP


                          AREA ||i.UartVarInit||, CODE, READONLY, ALIGN=2

                  UartVarInit PROC
;;;514    extern void at_command_uart_rx_isr_handler(uint8_t data);
;;;515    static void UartVarInit(void)
000000  4820              LDR      r0,|L16.132|
;;;516    {
;;;517    #if UART1_FIFO_EN == 1
;;;518    	g_tUart1.uart = USART1;						/* STM32 串口设备 */
000002  4921              LDR      r1,|L16.136|
000004  6008              STR      r0,[r1,#0]  ; g_tUart1
;;;519    	g_tUart1.pTxBuf = g_TxBuf1;					/* 发送缓冲区指针 */
000006  4821              LDR      r0,|L16.140|
000008  6048              STR      r0,[r1,#4]  ; g_tUart1
;;;520    	g_tUart1.pRxBuf = g_RxBuf1;					/* 接收缓冲区指针 */
00000a  4821              LDR      r0,|L16.144|
00000c  6088              STR      r0,[r1,#8]  ; g_tUart1
;;;521    	g_tUart1.usTxBufSize = UART1_TX_BUF_SIZE;	/* 发送缓冲区大小 */
00000e  f44f6080          MOV      r0,#0x400
000012  8188              STRH     r0,[r1,#0xc]
;;;522    	g_tUart1.usRxBufSize = UART1_RX_BUF_SIZE;	/* 接收缓冲区大小 */
000014  81c8              STRH     r0,[r1,#0xe]
;;;523    	g_tUart1.usTxWrite = 0;						/* 发送FIFO写索引 */
000016  2000              MOVS     r0,#0
000018  8208              STRH     r0,[r1,#0x10]
;;;524    	g_tUart1.usTxRead = 0;						/* 发送FIFO读索引 */
00001a  8248              STRH     r0,[r1,#0x12]
;;;525    	g_tUart1.usRxWrite = 0;						/* 接收FIFO写索引 */
00001c  82c8              STRH     r0,[r1,#0x16]
;;;526    	g_tUart1.usRxRead = 0;						/* 接收FIFO读索引 */
00001e  8308              STRH     r0,[r1,#0x18]
;;;527    	g_tUart1.usRxCount = 0;						/* 接收到的新数据个数 */
000020  8348              STRH     r0,[r1,#0x1a]
;;;528    	g_tUart1.usTxCount = 0;						/* 待发送的数据个数 */
000022  8288              STRH     r0,[r1,#0x14]
;;;529    	g_tUart1.SendBefor = 0;						/* 发送数据前的回调函数 */
000024  61c8              STR      r0,[r1,#0x1c]  ; g_tUart1
;;;530    	g_tUart1.SendOver = 0;						/* 发送完毕后的回调函数 */
000026  6208              STR      r0,[r1,#0x20]  ; g_tUart1
;;;531    	g_tUart1.ReciveNew = at_command_uart_rx_isr_handler;	/* 接收到新数据后的回调函数 */
000028  481a              LDR      r0,|L16.148|
00002a  6248              STR      r0,[r1,#0x24]  ; g_tUart1
;;;532    #endif
;;;533    
;;;534    #if UART2_FIFO_EN == 1
;;;535    	g_tUart2.uart = USART2;						/* STM32 串口设备 */
00002c  481a              LDR      r0,|L16.152|
00002e  491b              LDR      r1,|L16.156|
000030  6008              STR      r0,[r1,#0]  ; g_tUart2
;;;536    	g_tUart2.pTxBuf = g_TxBuf2;					/* 发送缓冲区指针 */
000032  481b              LDR      r0,|L16.160|
000034  6048              STR      r0,[r1,#4]  ; g_tUart2
;;;537    	g_tUart2.pRxBuf = g_RxBuf2;					/* 接收缓冲区指针 */
000036  481b              LDR      r0,|L16.164|
000038  6088              STR      r0,[r1,#8]  ; g_tUart2
;;;538    	g_tUart2.usTxBufSize = UART2_TX_BUF_SIZE;	/* 发送缓冲区大小 */
00003a  f44f6080          MOV      r0,#0x400
00003e  8188              STRH     r0,[r1,#0xc]
;;;539    	g_tUart2.usRxBufSize = UART2_RX_BUF_SIZE;	/* 接收缓冲区大小 */
000040  81c8              STRH     r0,[r1,#0xe]
;;;540    	g_tUart2.usTxWrite = 0;						/* 发送FIFO写索引 */
000042  2000              MOVS     r0,#0
000044  8208              STRH     r0,[r1,#0x10]
;;;541    	g_tUart2.usTxRead = 0;						/* 发送FIFO读索引 */
000046  8248              STRH     r0,[r1,#0x12]
;;;542    	g_tUart2.usRxWrite = 0;						/* 接收FIFO写索引 */
000048  82c8              STRH     r0,[r1,#0x16]
;;;543    	g_tUart2.usRxRead = 0;						/* 接收FIFO读索引 */
00004a  8308              STRH     r0,[r1,#0x18]
;;;544    	g_tUart2.usRxCount = 0;						/* 接收到的新数据个数 */
00004c  8348              STRH     r0,[r1,#0x1a]
;;;545    	g_tUart2.usTxCount = 0;						/* 待发送的数据个数 */
00004e  8288              STRH     r0,[r1,#0x14]
;;;546    	g_tUart2.SendBefor = 0;						/* 发送数据前的回调函数 */
000050  61c8              STR      r0,[r1,#0x1c]  ; g_tUart2
;;;547    	g_tUart2.SendOver = 0;						/* 发送完毕后的回调函数 */
000052  6208              STR      r0,[r1,#0x20]  ; g_tUart2
;;;548    	g_tUart2.ReciveNew = bt_driver_recieve_data_from_controller;/* 接收到新数据后的回调函数 */
000054  4814              LDR      r0,|L16.168|
000056  6248              STR      r0,[r1,#0x24]  ; g_tUart2
;;;549    #endif
;;;550    
;;;551    #if UART3_FIFO_EN == 1
;;;552    	g_tUart3.uart = USART3;						/* STM32 串口设备 */
000058  4814              LDR      r0,|L16.172|
00005a  4915              LDR      r1,|L16.176|
00005c  6008              STR      r0,[r1,#0]  ; g_tUart3
;;;553    	g_tUart3.pTxBuf = g_TxBuf3;					/* 发送缓冲区指针 */
00005e  4815              LDR      r0,|L16.180|
000060  6048              STR      r0,[r1,#4]  ; g_tUart3
;;;554    	g_tUart3.pRxBuf = g_RxBuf3;					/* 接收缓冲区指针 */
000062  4815              LDR      r0,|L16.184|
000064  6088              STR      r0,[r1,#8]  ; g_tUart3
;;;555    	g_tUart3.usTxBufSize = UART3_TX_BUF_SIZE;	/* 发送缓冲区大小 */
000066  f44f6080          MOV      r0,#0x400
00006a  8188              STRH     r0,[r1,#0xc]
;;;556    	g_tUart3.usRxBufSize = UART3_RX_BUF_SIZE;	/* 接收缓冲区大小 */
00006c  81c8              STRH     r0,[r1,#0xe]
;;;557    	g_tUart3.usTxWrite = 0;						/* 发送FIFO写索引 */
00006e  2000              MOVS     r0,#0
000070  8208              STRH     r0,[r1,#0x10]
;;;558    	g_tUart3.usTxRead = 0;						/* 发送FIFO读索引 */
000072  8248              STRH     r0,[r1,#0x12]
;;;559    	g_tUart3.usRxWrite = 0;						/* 接收FIFO写索引 */
000074  82c8              STRH     r0,[r1,#0x16]
;;;560    	g_tUart3.usRxRead = 0;						/* 接收FIFO读索引 */
000076  8308              STRH     r0,[r1,#0x18]
;;;561    	g_tUart3.usRxCount = 0;						/* 接收到的新数据个数 */
000078  8348              STRH     r0,[r1,#0x1a]
;;;562    	g_tUart3.usTxCount = 0;						/* 待发送的数据个数 */
00007a  8288              STRH     r0,[r1,#0x14]
;;;563    	g_tUart3.SendBefor = 0;//RS485_SendBefor;		/* 发送数据前的回调函数 */
00007c  61c8              STR      r0,[r1,#0x1c]  ; g_tUart3
;;;564    	g_tUart3.SendOver = 0;//RS485_SendOver;			/* 发送完毕后的回调函数 */
00007e  6208              STR      r0,[r1,#0x20]  ; g_tUart3
;;;565    	g_tUart3.ReciveNew = 0;//RS485_ReciveNew;		/* 接收到新数据后的回调函数 */
000080  6248              STR      r0,[r1,#0x24]  ; g_tUart3
;;;566    #endif
;;;567    
;;;568    #if UART4_FIFO_EN == 1
;;;569    	g_tUart4.uart = UART4;						/* STM32 串口设备 */
;;;570    	g_tUart4.pTxBuf = g_TxBuf4;					/* 发送缓冲区指针 */
;;;571    	g_tUart4.pRxBuf = g_RxBuf4;					/* 接收缓冲区指针 */
;;;572    	g_tUart4.usTxBufSize = UART4_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;573    	g_tUart4.usRxBufSize = UART4_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;574    	g_tUart4.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;575    	g_tUart4.usTxRead = 0;						/* 发送FIFO读索引 */
;;;576    	g_tUart4.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;577    	g_tUart4.usRxRead = 0;						/* 接收FIFO读索引 */
;;;578    	g_tUart4.usRxCount = 0;						/* 接收到的新数据个数 */
;;;579    	g_tUart4.usTxCount = 0;						/* 待发送的数据个数 */
;;;580    	g_tUart4.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;581    	g_tUart4.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;582    	g_tUart4.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;583    #endif
;;;584    
;;;585    #if UART5_FIFO_EN == 1
;;;586    	g_tUart5.uart = UART5;						/* STM32 串口设备 */
;;;587    	g_tUart5.pTxBuf = g_TxBuf5;					/* 发送缓冲区指针 */
;;;588    	g_tUart5.pRxBuf = g_RxBuf5;					/* 接收缓冲区指针 */
;;;589    	g_tUart5.usTxBufSize = UART5_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;590    	g_tUart5.usRxBufSize = UART5_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;591    	g_tUart5.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;592    	g_tUart5.usTxRead = 0;						/* 发送FIFO读索引 */
;;;593    	g_tUart5.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;594    	g_tUart5.usRxRead = 0;						/* 接收FIFO读索引 */
;;;595    	g_tUart5.usRxCount = 0;						/* 接收到的新数据个数 */
;;;596    	g_tUart5.usTxCount = 0;						/* 待发送的数据个数 */
;;;597    	g_tUart5.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;598    	g_tUart5.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;599    	g_tUart5.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;600    #endif
;;;601    
;;;602    
;;;603    #if UART6_FIFO_EN == 1
;;;604    	g_tUart6.uart = USART6;						/* STM32 串口设备 */
;;;605    	g_tUart6.pTxBuf = g_TxBuf6;					/* 发送缓冲区指针 */
;;;606    	g_tUart6.pRxBuf = g_RxBuf6;					/* 接收缓冲区指针 */
;;;607    	g_tUart6.usTxBufSize = UART6_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;608    	g_tUart6.usRxBufSize = UART6_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;609    	g_tUart6.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;610    	g_tUart6.usTxRead = 0;						/* 发送FIFO读索引 */
;;;611    	g_tUart6.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;612    	g_tUart6.usRxRead = 0;						/* 接收FIFO读索引 */
;;;613    	g_tUart6.usRxCount = 0;						/* 接收到的新数据个数 */
;;;614    	g_tUart6.usTxCount = 0;						/* 待发送的数据个数 */
;;;615    	g_tUart6.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;616    	g_tUart6.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;617    	g_tUart6.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;618    #endif
;;;619    }
000082  4770              BX       lr
;;;620    
                          ENDP

                  |L16.132|
                          DCD      0x40013800
                  |L16.136|
                          DCD      g_tUart1
                  |L16.140|
                          DCD      g_TxBuf1
                  |L16.144|
                          DCD      g_RxBuf1
                  |L16.148|
                          DCD      at_command_uart_rx_isr_handler
                  |L16.152|
                          DCD      0x40004400
                  |L16.156|
                          DCD      g_tUart2
                  |L16.160|
                          DCD      g_TxBuf2
                  |L16.164|
                          DCD      g_RxBuf2
                  |L16.168|
                          DCD      bt_driver_recieve_data_from_controller
                  |L16.172|
                          DCD      0x40004800
                  |L16.176|
                          DCD      g_tUart3
                  |L16.180|
                          DCD      g_TxBuf3
                  |L16.184|
                          DCD      g_RxBuf3

                          AREA ||i.bsp_InitUart||, CODE, READONLY, ALIGN=1

                  bsp_InitUart PROC
;;;74     */
;;;75     void bsp_InitUart(void)
000000  b510              PUSH     {r4,lr}
;;;76     {
;;;77     	UartVarInit();		/* 必须先初始化全局变量,再配置硬件 */
000002  f7fffffe          BL       UartVarInit
;;;78     
;;;79     	InitHardUart();		/* 配置串口的硬件参数(波特率等) */
000006  f7fffffe          BL       InitHardUart
;;;80     	
;;;81     #if RS485_ENABLE
;;;82     	RS485_InitTXE();	/* 配置RS485芯片的发送使能硬件，配置为推挽输出 */
;;;83     #endif
;;;84     	
;;;85     	ConfigUartNVIC();	/* 配置串口中断 */
00000a  f7fffffe          BL       ConfigUartNVIC
;;;86     }
00000e  bd10              POP      {r4,pc}
;;;87     
                          ENDP


                          AREA ||i.bsp_Set485Baud||, CODE, READONLY, ALIGN=2

                  bsp_Set485Baud PROC
;;;419    */
;;;420    void bsp_Set485Baud(uint32_t _baud)
000000  b51f              PUSH     {r0-r4,lr}
;;;421    {
000002  4604              MOV      r4,r0
;;;422    	USART_InitTypeDef USART_InitStructure;
;;;423    
;;;424    	/* 第2步： 配置串口硬件参数 */
;;;425    	USART_InitStructure.USART_BaudRate = _baud;	/* 波特率 */
000004  9400              STR      r4,[sp,#0]
;;;426    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;427    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;428    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;429    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;430    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;431    	USART_Init(USART3, &USART_InitStructure);
00001e  4669              MOV      r1,sp
000020  4801              LDR      r0,|L18.40|
000022  f7fffffe          BL       USART_Init
;;;432    }
000026  bd1f              POP      {r0-r4,pc}
;;;433    
                          ENDP

                  |L18.40|
                          DCD      0x40004800

                          AREA ||i.bsp_SetUart1Baud||, CODE, READONLY, ALIGN=2

                  bsp_SetUart1Baud PROC
;;;352    */
;;;353    void bsp_SetUart1Baud(uint32_t _baud)
000000  b51f              PUSH     {r0-r4,lr}
;;;354    {
000002  4604              MOV      r4,r0
;;;355    	USART_InitTypeDef USART_InitStructure;
;;;356    
;;;357    	/* 第2步： 配置串口硬件参数 */
;;;358    	USART_InitStructure.USART_BaudRate = _baud;	/* 波特率 */
000004  9400              STR      r4,[sp,#0]
;;;359    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;360    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;361    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;362    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;363    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;364    	USART_Init(USART2, &USART_InitStructure);
00001e  4669              MOV      r1,sp
000020  4801              LDR      r0,|L19.40|
000022  f7fffffe          BL       USART_Init
;;;365    }
000026  bd1f              POP      {r0-r4,pc}
;;;366    
                          ENDP

                  |L19.40|
                          DCD      0x40004400

                          AREA ||i.bsp_SetUart2Baud||, CODE, READONLY, ALIGN=2

                  bsp_SetUart2Baud PROC
;;;374    */
;;;375    void bsp_SetUart2Baud(uint32_t _baud)
000000  b51f              PUSH     {r0-r4,lr}
;;;376    {
000002  4604              MOV      r4,r0
;;;377    	USART_InitTypeDef USART_InitStructure;
;;;378    
;;;379    	/* 第2步： 配置串口硬件参数 */
;;;380    	USART_InitStructure.USART_BaudRate = _baud;	/* 波特率 */
000004  9400              STR      r4,[sp,#0]
;;;381    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;382    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;383    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;384    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;385    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;386    	USART_Init(USART2, &USART_InitStructure);
00001e  4669              MOV      r1,sp
000020  4801              LDR      r0,|L20.40|
000022  f7fffffe          BL       USART_Init
;;;387    }
000026  bd1f              POP      {r0-r4,pc}
;;;388    
                          ENDP

                  |L20.40|
                          DCD      0x40004400

                          AREA ||i.comClearRxFifo||, CODE, READONLY, ALIGN=1

                  comClearRxFifo PROC
;;;329    */
;;;330    void comClearRxFifo(COM_PORT_E _ucPort)
000000  b500              PUSH     {lr}
;;;331    {
000002  4603              MOV      r3,r0
;;;332    	UART_T *pUart;
;;;333    
;;;334    	pUart = ComToUart(_ucPort);
000004  4618              MOV      r0,r3
000006  f7fffffe          BL       ComToUart
00000a  4602              MOV      r2,r0
;;;335    	if (pUart == 0)
00000c  b902              CBNZ     r2,|L21.16|
                  |L21.14|
;;;336    	{
;;;337    		return;
;;;338    	}
;;;339    
;;;340    	pUart->usRxWrite = 0;
;;;341    	pUart->usRxRead = 0;
;;;342    	pUart->usRxCount = 0;
;;;343    }
00000e  bd00              POP      {pc}
                  |L21.16|
000010  2000              MOVS     r0,#0                 ;340
000012  82d0              STRH     r0,[r2,#0x16]         ;340
000014  8310              STRH     r0,[r2,#0x18]         ;341
000016  8350              STRH     r0,[r2,#0x1a]         ;342
000018  bf00              NOP      
00001a  e7f8              B        |L21.14|
;;;344    
                          ENDP


                          AREA ||i.comClearTxFifo||, CODE, READONLY, ALIGN=1

                  comClearTxFifo PROC
;;;306    */
;;;307    void comClearTxFifo(COM_PORT_E _ucPort)
000000  b500              PUSH     {lr}
;;;308    {
000002  4603              MOV      r3,r0
;;;309    	UART_T *pUart;
;;;310    
;;;311    	pUart = ComToUart(_ucPort);
000004  4618              MOV      r0,r3
000006  f7fffffe          BL       ComToUart
00000a  4602              MOV      r2,r0
;;;312    	if (pUart == 0)
00000c  b902              CBNZ     r2,|L22.16|
                  |L22.14|
;;;313    	{
;;;314    		return;
;;;315    	}
;;;316    
;;;317    	pUart->usTxWrite = 0;
;;;318    	pUart->usTxRead = 0;
;;;319    	pUart->usTxCount = 0;
;;;320    }
00000e  bd00              POP      {pc}
                  |L22.16|
000010  2000              MOVS     r0,#0                 ;317
000012  8210              STRH     r0,[r2,#0x10]         ;317
000014  8250              STRH     r0,[r2,#0x12]         ;318
000016  8290              STRH     r0,[r2,#0x14]         ;319
000018  bf00              NOP      
00001a  e7f8              B        |L22.14|
;;;321    
                          ENDP


                          AREA ||i.comGetBuf||, CODE, READONLY, ALIGN=1

                  comGetBuf PROC
;;;218    */
;;;219    uint16_t comGetBuf(COM_PORT_E _ucPort, uint8_t *_pBuf, const uint16_t _usLenToRead)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;220    {
000004  4682              MOV      r10,r0
000006  4688              MOV      r8,r1
000008  4616              MOV      r6,r2
;;;221    	UART_T *pUart;
;;;222    	uint16_t usCount;
;;;223    	uint16_t usRightCount;
;;;224    	uint16_t usLeftCount;
;;;225    	pUart = ComToUart(_ucPort);
00000a  4650              MOV      r0,r10
00000c  f7fffffe          BL       ComToUart
000010  4604              MOV      r4,r0
;;;226    	if (pUart == 0)
000012  b914              CBNZ     r4,|L23.26|
;;;227    	{
;;;228    		return 0;
000014  2000              MOVS     r0,#0
                  |L23.22|
;;;229    	}
;;;230    	/* usRxWrite 变量在中断函数中被改写，主程序读取该变量时，必须进行临界区保护 */
;;;231    	DISABLE_INT();
;;;232    	usCount = pUart->usRxCount;
;;;233    	ENABLE_INT();
;;;234    
;;;235    	/* 如果读和写索引相同，则返回0 */
;;;236    	if (usCount == 0)	/* 已经没有数据 */
;;;237    	{
;;;238    		return 0;
;;;239    	}
;;;240    	else if (usCount < _usLenToRead) 
;;;241    	{
;;;242    		DISABLE_INT();
;;;243    		if (pUart->usRxRead > pUart->usRxWrite) {
;;;244    			usRightCount = pUart->usRxBufSize - pUart->usRxRead;
;;;245    			usLeftCount = usCount - usRightCount;
;;;246    			memcpy(_pBuf, &pUart->pRxBuf[pUart->usRxRead], usRightCount);
;;;247    			memcpy(_pBuf + usRightCount, pUart->pRxBuf, usLeftCount);
;;;248    		}
;;;249    		else 
;;;250    		{
;;;251    			memcpy(_pBuf, &pUart->pRxBuf[pUart->usRxRead], usCount);
;;;252    		}
;;;253    		pUart->usRxRead = pUart->usRxWrite; /*复位FIFO wptr * rptr指针*/
;;;254    		pUart->usRxCount = 0;
;;;255    		ENABLE_INT();
;;;256    		return usCount;
;;;257    	}
;;;258    	else
;;;259    	{
;;;260    		DISABLE_INT();
;;;261    		if (pUart->usRxRead > pUart->usRxWrite) {
;;;262    			usRightCount = pUart->usRxBufSize - pUart->usRxRead;
;;;263    			usLeftCount = _usLenToRead - usRightCount;
;;;264    			memcpy(_pBuf, &pUart->pRxBuf[pUart->usRxRead], usRightCount);
;;;265    			memcpy(_pBuf + usRightCount, pUart->pRxBuf, usLeftCount);
;;;266    			pUart->usRxRead = usLeftCount; /*复位FIFO wptr * rptr指针*/
;;;267    		}
;;;268    		else 
;;;269    		{
;;;270    			memcpy(_pBuf, &pUart->pRxBuf[pUart->usRxRead], _usLenToRead);
;;;271    			pUart->usRxRead += _usLenToRead; /*复位FIFO wptr * rptr指针*/
;;;272    		}
;;;273    		pUart->usRxCount -= _usLenToRead;
;;;274    		ENABLE_INT();
;;;275    		return _usLenToRead;
;;;276    	}
;;;277    }
000016  e8bd87f0          POP      {r4-r10,pc}
                  |L23.26|
00001a  f7fffffe          BL       bsp_disable_interrupt
00001e  8b67              LDRH     r7,[r4,#0x1a]         ;232
000020  f7fffffe          BL       bsp_enable_interrupt
000024  b90f              CBNZ     r7,|L23.42|
000026  2000              MOVS     r0,#0                 ;238
000028  e7f5              B        |L23.22|
                  |L23.42|
00002a  42b7              CMP      r7,r6                 ;240
00002c  da29              BGE      |L23.130|
00002e  f7fffffe          BL       bsp_disable_interrupt
000032  8b20              LDRH     r0,[r4,#0x18]         ;243
000034  8ae1              LDRH     r1,[r4,#0x16]         ;243
000036  4288              CMP      r0,r1                 ;243
000038  dd14              BLE      |L23.100|
00003a  89e0              LDRH     r0,[r4,#0xe]          ;244
00003c  8b21              LDRH     r1,[r4,#0x18]         ;244
00003e  1a40              SUBS     r0,r0,r1              ;244
000040  b285              UXTH     r5,r0                 ;244
000042  1b78              SUBS     r0,r7,r5              ;245
000044  fa1ff980          UXTH     r9,r0                 ;245
000048  8b22              LDRH     r2,[r4,#0x18]         ;246
00004a  68a0              LDR      r0,[r4,#8]            ;246
00004c  1881              ADDS     r1,r0,r2              ;246
00004e  462a              MOV      r2,r5                 ;246
000050  4640              MOV      r0,r8                 ;246
000052  f7fffffe          BL       __aeabi_memcpy
000056  eb080005          ADD      r0,r8,r5              ;247
00005a  464a              MOV      r2,r9                 ;247
00005c  68a1              LDR      r1,[r4,#8]            ;247
00005e  f7fffffe          BL       __aeabi_memcpy
000062  e006              B        |L23.114|
                  |L23.100|
000064  8b22              LDRH     r2,[r4,#0x18]         ;251
000066  68a0              LDR      r0,[r4,#8]            ;251
000068  1881              ADDS     r1,r0,r2              ;251
00006a  463a              MOV      r2,r7                 ;251
00006c  4640              MOV      r0,r8                 ;251
00006e  f7fffffe          BL       __aeabi_memcpy
                  |L23.114|
000072  8ae0              LDRH     r0,[r4,#0x16]         ;253
000074  8320              STRH     r0,[r4,#0x18]         ;253
000076  2000              MOVS     r0,#0                 ;254
000078  8360              STRH     r0,[r4,#0x1a]         ;254
00007a  f7fffffe          BL       bsp_enable_interrupt
00007e  4638              MOV      r0,r7                 ;256
000080  e7c9              B        |L23.22|
                  |L23.130|
000082  f7fffffe          BL       bsp_disable_interrupt
000086  8b20              LDRH     r0,[r4,#0x18]         ;261
000088  8ae1              LDRH     r1,[r4,#0x16]         ;261
00008a  4288              CMP      r0,r1                 ;261
00008c  dd16              BLE      |L23.188|
00008e  89e0              LDRH     r0,[r4,#0xe]          ;262
000090  8b21              LDRH     r1,[r4,#0x18]         ;262
000092  1a40              SUBS     r0,r0,r1              ;262
000094  b285              UXTH     r5,r0                 ;262
000096  1b70              SUBS     r0,r6,r5              ;263
000098  fa1ff980          UXTH     r9,r0                 ;263
00009c  8b22              LDRH     r2,[r4,#0x18]         ;264
00009e  68a0              LDR      r0,[r4,#8]            ;264
0000a0  1881              ADDS     r1,r0,r2              ;264
0000a2  462a              MOV      r2,r5                 ;264
0000a4  4640              MOV      r0,r8                 ;264
0000a6  f7fffffe          BL       __aeabi_memcpy
0000aa  eb080005          ADD      r0,r8,r5              ;265
0000ae  464a              MOV      r2,r9                 ;265
0000b0  68a1              LDR      r1,[r4,#8]            ;265
0000b2  f7fffffe          BL       __aeabi_memcpy
0000b6  f8a49018          STRH     r9,[r4,#0x18]         ;266
0000ba  e009              B        |L23.208|
                  |L23.188|
0000bc  8b22              LDRH     r2,[r4,#0x18]         ;270
0000be  68a0              LDR      r0,[r4,#8]            ;270
0000c0  1881              ADDS     r1,r0,r2              ;270
0000c2  4632              MOV      r2,r6                 ;270
0000c4  4640              MOV      r0,r8                 ;270
0000c6  f7fffffe          BL       __aeabi_memcpy
0000ca  8b20              LDRH     r0,[r4,#0x18]         ;271
0000cc  4430              ADD      r0,r0,r6              ;271
0000ce  8320              STRH     r0,[r4,#0x18]         ;271
                  |L23.208|
0000d0  8b60              LDRH     r0,[r4,#0x1a]         ;273
0000d2  1b80              SUBS     r0,r0,r6              ;273
0000d4  8360              STRH     r0,[r4,#0x1a]         ;273
0000d6  f7fffffe          BL       bsp_enable_interrupt
0000da  4630              MOV      r0,r6                 ;275
0000dc  e79b              B        |L23.22|
;;;278    
                          ENDP


                          AREA ||i.comGetChar||, CODE, READONLY, ALIGN=1

                  comGetChar PROC
;;;195    */
;;;196    uint8_t comGetChar(COM_PORT_E _ucPort, uint8_t *_pByte)
000000  b570              PUSH     {r4-r6,lr}
;;;197    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;198    	UART_T *pUart;
;;;199    
;;;200    	pUart = ComToUart(_ucPort);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       ComToUart
00000c  4604              MOV      r4,r0
;;;201    	if (pUart == 0)
00000e  b90c              CBNZ     r4,|L24.20|
;;;202    	{
;;;203    		return 0;
000010  2000              MOVS     r0,#0
                  |L24.18|
;;;204    	}
;;;205    
;;;206    	return UartGetChar(pUart, _pByte);
;;;207    }
000012  bd70              POP      {r4-r6,pc}
                  |L24.20|
000014  4631              MOV      r1,r6                 ;206
000016  4620              MOV      r0,r4                 ;206
000018  f7fffffe          BL       UartGetChar
00001c  e7f9              B        |L24.18|
;;;208    
                          ENDP


                          AREA ||i.comGetRxFifoAvailableBufferLength||, CODE, READONLY, ALIGN=1

                  comGetRxFifoAvailableBufferLength PROC
;;;286    */
;;;287    uint16_t comGetRxFifoAvailableBufferLength(COM_PORT_E _ucPort)
000000  b500              PUSH     {lr}
;;;288    {
000002  4603              MOV      r3,r0
;;;289    	UART_T *pUart;
;;;290    
;;;291    	pUart = ComToUart(_ucPort);
000004  4618              MOV      r0,r3
000006  f7fffffe          BL       ComToUart
00000a  4602              MOV      r2,r0
;;;292    	if (pUart == 0)
00000c  b90a              CBNZ     r2,|L25.18|
;;;293    	{
;;;294    		return 0;
00000e  2000              MOVS     r0,#0
                  |L25.16|
;;;295    	}
;;;296    	return pUart->usRxCount;
;;;297    }
000010  bd00              POP      {pc}
                  |L25.18|
000012  8b50              LDRH     r0,[r2,#0x1a]         ;296
000014  e7fc              B        |L25.16|
;;;298    
                          ENDP


                          AREA ||i.comSendBuf||, CODE, READONLY, ALIGN=1

                  comSendBuf PROC
;;;154    */
;;;155    void comSendBuf(COM_PORT_E _ucPort, uint8_t *_ucaBuf, uint16_t _usLen)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;156    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;157    	UART_T *pUart;
;;;158    
;;;159    	pUart = ComToUart(_ucPort);
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       ComToUart
000010  4604              MOV      r4,r0
;;;160    	if (pUart == 0)
000012  b90c              CBNZ     r4,|L26.24|
                  |L26.20|
;;;161    	{
;;;162    		return;
;;;163    	}
;;;164    
;;;165    	if (pUart->SendBefor != 0)
;;;166    	{
;;;167    		pUart->SendBefor();		/* 如果是RS485通信，可以在这个函数中将RS485设置为发送模式 */
;;;168    	}
;;;169    
;;;170    	UartSend(pUart, _ucaBuf, _usLen);
;;;171    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L26.24|
000018  69e0              LDR      r0,[r4,#0x1c]         ;165
00001a  b108              CBZ      r0,|L26.32|
00001c  69e0              LDR      r0,[r4,#0x1c]         ;167
00001e  4780              BLX      r0                    ;167
                  |L26.32|
000020  463a              MOV      r2,r7                 ;170
000022  4631              MOV      r1,r6                 ;170
000024  4620              MOV      r0,r4                 ;170
000026  f7fffffe          BL       UartSend
00002a  bf00              NOP      
00002c  e7f2              B        |L26.20|
;;;172    
                          ENDP


                          AREA ||i.comSendChar||, CODE, READONLY, ALIGN=1

                  comSendChar PROC
;;;181    */
;;;182    void comSendChar(COM_PORT_E _ucPort, uint8_t _ucByte)
000000  b513              PUSH     {r0,r1,r4,lr}
;;;183    {
000002  4604              MOV      r4,r0
;;;184    	comSendBuf(_ucPort, &_ucByte, 1);
000004  2201              MOVS     r2,#1
000006  a901              ADD      r1,sp,#4
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       comSendBuf
;;;185    }
00000e  bd1c              POP      {r2-r4,pc}
;;;186    
                          ENDP


                          AREA ||i.fgetc||, CODE, READONLY, ALIGN=1

                  fgetc PROC
;;;1222   */
;;;1223   int fgetc(FILE *f)
000000  b538              PUSH     {r3-r5,lr}
;;;1224   {
000002  4604              MOV      r4,r0
;;;1225   
;;;1226   #if 1	/* 从串口接收FIFO中取1个数据, 只有取到数据才返回 */
;;;1227   	uint8_t ucData;
;;;1228   
;;;1229   	while(comGetChar(COM1, &ucData) == 0);
000004  bf00              NOP      
                  |L28.6|
000006  4669              MOV      r1,sp
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       comGetChar
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L28.6|
;;;1230   
;;;1231   	return ucData;
000012  f89d0000          LDRB     r0,[sp,#0]
;;;1232   #else
;;;1233   	/* 等待串口1输入数据 */
;;;1234   	while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET);
;;;1235   
;;;1236   	return (int)USART_ReceiveData(USART1);
;;;1237   #endif
;;;1238   }
000016  bd38              POP      {r3-r5,pc}
;;;1239   
                          ENDP


                          AREA ||i.fputc||, CODE, READONLY, ALIGN=1

                  fputc PROC
;;;1196   */
;;;1197   int fputc(int ch, FILE *f)
000000  b570              PUSH     {r4-r6,lr}
;;;1198   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1199   #if 1	/* 将需要printf的字符通过串口中断FIFO发送出去，printf函数会立即返回 */
;;;1200   	comSendChar(COM1, ch);
000006  b2e1              UXTB     r1,r4
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       comSendChar
;;;1201   
;;;1202   	return ch;
00000e  4620              MOV      r0,r4
;;;1203   #else	/* 采用阻塞方式发送每个字符,等待数据发送完毕 */
;;;1204   	/* 写一个字节到USART1 */
;;;1205   	USART_SendData(USART1, (uint8_t) ch);
;;;1206   
;;;1207   	/* 等待发送结束 */
;;;1208   	while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
;;;1209   	{}
;;;1210   
;;;1211   	return ch;
;;;1212   #endif
;;;1213   }
000010  bd70              POP      {r4-r6,pc}
;;;1214   
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_tUart1
                          %        40
                  g_TxBuf1
                          %        1024
                  g_RxBuf1
                          %        1024
                  g_tUart2
                          %        40
                  g_TxBuf2
                          %        1024
                  g_RxBuf2
                          %        1024
                  g_tUart3
                          %        40
                  g_TxBuf3
                          %        1024
                  g_RxBuf3
                          %        1024

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_uart_fifo.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_uart_fifo_c_b28b0d00____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_bsp_uart_fifo_c_b28b0d00____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_uart_fifo_c_b28b0d00____REVSH|
#line 128
|__asm___15_bsp_uart_fifo_c_b28b0d00____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
