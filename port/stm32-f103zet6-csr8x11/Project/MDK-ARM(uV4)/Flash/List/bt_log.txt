; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bt_log.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bt_log.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\Middleware\blue_angel\inc -I..\..\Middleware\bt_callback_manager -I..\..\Middleware\blue_angel\btif -I..\..\Middleware\blue_angel\common -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\src\common -I..\..\Middleware\blue_angel\src\inc -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\platform\rtos -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\ut_manager\Cunit\Headers -I..\..\Middleware\ut_manager\Cunit\interface -I..\..\Middleware\blue_angel\platform\test -I..\..\Middleware\blue_angel\driver -I..\..\Middleware\blue_angel\src\core\hci -I..\..\User\bt\inc -I..\..\Middleware\bt_callback_manager -I..\..\Middleware\at_command -I..\..\Middleware\blue_angel\src\core\gap -I..\..\Middleware\blue_angel\src\core\l2cap -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=522 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DNDEBUG --omf_browse=.\flash\obj\bt_log.crf ..\..\Middleware\blue_angel\platform\bt_log.c]
                          THUMB

                          AREA ||i.bt_hci_log||, CODE, READONLY, ALIGN=2

                  bt_hci_log PROC
;;;14     
;;;15     void bt_hci_log(uint8_t in_out, uint8_t *log, uint16_t log_length)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;16     {
000004  4682              MOV      r10,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;17     #if BT_HCI_LOG_ENABLE
;;;18     #if BT_HCI_LOG_MIX_SYSTEM_LOG
;;;19         return;
;;;20     #endif
;;;21         bt_hci_log_type_t type;
;;;22         uint16_t data_tatal_length = 0;
00000a  f04f0b00          MOV      r11,#0
;;;23         uint16_t index = 0, i = 0;
00000e  2500              MOVS     r5,#0
000010  46a8              MOV      r8,r5
;;;24         uint8_t *buf = NULL;
000012  2400              MOVS     r4,#0
;;;25         uint8_t check_sum = 0;
000014  2000              MOVS     r0,#0
000016  9000              STR      r0,[sp,#0]
;;;26     
;;;27         if (in_out == 0) {
000018  f1ba0f00          CMP      r10,#0
00001c  d109              BNE      |L1.50|
;;;28             if (log[0] == BT_UART_CMD) {
00001e  7830              LDRB     r0,[r6,#0]
000020  2801              CMP      r0,#1
000022  d101              BNE      |L1.40|
;;;29                 type = BT_HCI_LOG_CMD;
000024  4681              MOV      r9,r0
000026  e012              B        |L1.78|
                  |L1.40|
;;;30             } else if (log[0] == BT_UART_ACL) {
000028  7830              LDRB     r0,[r6,#0]
00002a  2802              CMP      r0,#2
00002c  d10f              BNE      |L1.78|
;;;31                 type = BT_HCI_LOG_ACL_OUT;
00002e  4681              MOV      r9,r0
000030  e00d              B        |L1.78|
                  |L1.50|
;;;32             }
;;;33         } else if (in_out == 1) {
000032  f1ba0f01          CMP      r10,#1
000036  d10a              BNE      |L1.78|
;;;34             if (log[0] == BT_UART_ACL) {
000038  7830              LDRB     r0,[r6,#0]
00003a  2802              CMP      r0,#2
00003c  d102              BNE      |L1.68|
;;;35                 type = BT_HCI_LOG_ACL_IN;
00003e  f04f0904          MOV      r9,#4
000042  e004              B        |L1.78|
                  |L1.68|
;;;36             } else if (log[0] == BT_UART_EVT) {
000044  7830              LDRB     r0,[r6,#0]
000046  2804              CMP      r0,#4
000048  d101              BNE      |L1.78|
;;;37                 type = BT_HCI_LOG_EVT;
00004a  f04f0908          MOV      r9,#8
                  |L1.78|
;;;38             }
;;;39         }
;;;40         log++;
00004e  1c76              ADDS     r6,r6,#1
;;;41         log_length--;
000050  1e78              SUBS     r0,r7,#1
000052  b287              UXTH     r7,r0
;;;42         data_tatal_length = BT_HCI_LOG_HEADER_LEGNTH + log_length + 1;//1:check sum
000054  1db8              ADDS     r0,r7,#6
000056  fa1ffb80          UXTH     r11,r0
;;;43         buf = (uint8_t *)bt_os_layer_malloc(data_tatal_length);
00005a  4658              MOV      r0,r11
00005c  f7fffffe          BL       bt_os_layer_malloc
000060  4604              MOV      r4,r0
;;;44         BT_ASSERT(buf);
000062  b104              CBZ      r4,|L1.102|
000064  e003              B        |L1.110|
                  |L1.102|
000066  212c              MOVS     r1,#0x2c
000068  a022              ADR      r0,|L1.244|
00006a  f7fffffe          BL       assert_failed
                  |L1.110|
;;;45     
;;;46         buf[index++] = 0xF5;
00006e  22f5              MOVS     r2,#0xf5
000070  4628              MOV      r0,r5
000072  1c69              ADDS     r1,r5,#1
000074  b28d              UXTH     r5,r1
000076  5422              STRB     r2,[r4,r0]
;;;47         buf[index++] = 0x5A;
000078  225a              MOVS     r2,#0x5a
00007a  4628              MOV      r0,r5
00007c  1c69              ADDS     r1,r5,#1
00007e  b28d              UXTH     r5,r1
000080  5422              STRB     r2,[r4,r0]
;;;48         buf[index++] = type;
000082  4628              MOV      r0,r5
000084  1c69              ADDS     r1,r5,#1
000086  b28d              UXTH     r5,r1
000088  f8049000          STRB     r9,[r4,r0]
;;;49         buf[index++] = log_length & 0xFF;
00008c  4628              MOV      r0,r5
00008e  1c69              ADDS     r1,r5,#1
000090  b28d              UXTH     r5,r1
000092  5427              STRB     r7,[r4,r0]
;;;50         buf[index++] = (log_length >> 8) & 0xFF;
000094  0a3a              LSRS     r2,r7,#8
000096  4628              MOV      r0,r5
000098  1c69              ADDS     r1,r5,#1
00009a  b28d              UXTH     r5,r1
00009c  5422              STRB     r2,[r4,r0]
;;;51         for (i = 0; i < log_length; index++, i++) {
00009e  f04f0800          MOV      r8,#0
0000a2  e008              B        |L1.182|
                  |L1.164|
;;;52             buf[index] = log[i];
0000a4  f8160008          LDRB     r0,[r6,r8]
0000a8  5560              STRB     r0,[r4,r5]
0000aa  1c68              ADDS     r0,r5,#1              ;51
0000ac  b285              UXTH     r5,r0                 ;51
0000ae  f1080001          ADD      r0,r8,#1              ;51
0000b2  fa1ff880          UXTH     r8,r0                 ;51
                  |L1.182|
0000b6  45b8              CMP      r8,r7                 ;51
0000b8  dbf4              BLT      |L1.164|
;;;53         }
;;;54         for (i = 0; i < data_tatal_length - 1; i++) {
0000ba  f04f0800          MOV      r8,#0
0000be  e009              B        |L1.212|
                  |L1.192|
;;;55             check_sum += buf[i];
0000c0  f8141008          LDRB     r1,[r4,r8]
0000c4  9800              LDR      r0,[sp,#0]
0000c6  4408              ADD      r0,r0,r1
0000c8  b2c0              UXTB     r0,r0
0000ca  9000              STR      r0,[sp,#0]
0000cc  f1080001          ADD      r0,r8,#1              ;54
0000d0  fa1ff880          UXTH     r8,r0                 ;54
                  |L1.212|
0000d4  f1ab0001          SUB      r0,r11,#1             ;54
0000d8  4540              CMP      r0,r8                 ;54
0000da  dcf1              BGT      |L1.192|
;;;56         }
;;;57         buf[index] = check_sum;
0000dc  9800              LDR      r0,[sp,#0]
0000de  5560              STRB     r0,[r4,r5]
;;;58     
;;;59         comSendBuf(COM3, buf, data_tatal_length);
0000e0  465a              MOV      r2,r11
0000e2  4621              MOV      r1,r4
0000e4  2002              MOVS     r0,#2
0000e6  f7fffffe          BL       comSendBuf
;;;60     
;;;61         bt_os_layer_free(buf);
0000ea  4620              MOV      r0,r4
0000ec  f7fffffe          BL       bt_os_layer_free
;;;62     #endif
;;;63     }
0000f0  e8bd8ff8          POP      {r3-r11,pc}
;;;64     
                          ENDP

                  |L1.244|
0000f4  2e2e5c2e          DCB      "..\\..\\Middleware\\blue_angel\\platform\\bt_log.c",0
0000f8  2e5c4d69
0000fc  64646c65
000100  77617265
000104  5c626c75
000108  655f616e
00010c  67656c5c
000110  706c6174
000114  666f726d
000118  5c62745f
00011c  6c6f672e
000120  6300    
000122  00                DCB      0
000123  00                DCB      0

;*** Start embedded assembler ***

#line 1 "..\\..\\Middleware\\blue_angel\\platform\\bt_log.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_bt_log_c_56da0be1____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_bt_log_c_56da0be1____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_bt_log_c_56da0be1____REVSH|
#line 128
|__asm___8_bt_log_c_56da0be1____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
