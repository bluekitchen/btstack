L 1 "..\..\..\..\src\ble\gatt_client.c"
N/*
N * Copyright (C) 2014 BlueKitchen GmbH
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions
N * are met:
N *
N * 1. Redistributions of source code must retain the above copyright
N *    notice, this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright
N *    notice, this list of conditions and the following disclaimer in the
N *    documentation and/or other materials provided with the distribution.
N * 3. Neither the name of the copyright holders nor the names of
N *    contributors may be used to endorse or promote products derived
N *    from this software without specific prior written permission.
N * 4. Any redistribution, use, or modification is done solely for
N *    personal benefit and not for any commercial purpose or for
N *    monetary gain.
N *
N * THIS SOFTWARE IS PROVIDED BY BLUEKITCHEN GMBH AND CONTRIBUTORS
N * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
N * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL MATTHIAS
N * RINGWALD OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
N * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
N * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
N * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
N * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
N * THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
N * SUCH DAMAGE.
N *
N * Please inquire about commercial licensing options at 
N * contact@bluekitchen-gmbh.com
N *
N */
N
N#define BTSTACK_FILE__ "gatt_client.c"
N
N#include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060019
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 41 "..\..\..\..\src\ble\gatt_client.c" 2
N#include <string.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\string.h" 1
N/* string.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.11 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                        */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.          */
N/* version 0.04 */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N */
N
N/*
N * string.h declares one type and several functions, and defines one macro
N * useful for manipulating character arrays and other objects treated as
N * character arrays. Various methods are used for determining the lengths of
N * the arrays, but in all cases a char * or void * argument points to the
N * initial (lowest addresses) character of the array. If an array is written
N * beyond the end of an object, the behaviour is undefined.
N */
N
N#ifndef __string_h
N#define __string_h
N#define __ARMCLIB_VERSION 5060019
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STRING_DECLS
N  #define __STRING_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
Nextern _ARMABI void *memcpy(void * __restrict /*s1*/,
Xextern __declspec(__nothrow) void *memcpy(void * __restrict  ,
N                    const void * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI void *memmove(void * /*s1*/,
Xextern __declspec(__nothrow) void *memmove(void *  ,
N                    const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. Copying takes place as if the n characters from the
N    * object pointed to by s2 are first copied into a temporary array of n
N    * characters that does not overlap the objects pointed to by s1 and s2,
N    * and then the n characters from the temporary array are copied into the
N    * object pointed to by s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strcpy(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string pointed to by s2 (including the terminating nul
N    * character) into the array pointed to by s1. If copying takes place
N    * between objects that overlap, the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncpy(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies not more than n characters (characters that follow a null
N    * character are not copied) from the array pointed to by s2 into the array
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
N
Nextern _ARMABI char *strcat(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends a copy of the string pointed to by s2 (including the terminating
N    * null character) to the end of the string pointed to by s1. The initial
N    * character of s2 overwrites the null character at the end of s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncat(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends not more than n characters (a null character and characters that
N    * follow it are not appended) from the array pointed to by s2 to the end of
N    * the string pointed to by s1. The initial character of s2 overwrites the
N    * null character at the end of s1. A terminating null character is always
N    * appended to the result.
N    * Returns: the value of s1.
N    */
N
N/*
N * The sign of a nonzero value returned by the comparison functions is
N * determined by the sign of the difference between the values of the first
N * pair of characters (both interpreted as unsigned char) that differ in the
N * objects being compared.
N */
N
Nextern _ARMABI int memcmp(const void * /*s1*/, const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the first n characters of the object pointed to by s1 to the
N    * first n characters of the object pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the object pointed to by s1 is greater than, equal to, or
N    *          less than the object pointed to by s2.
N    */
Nextern _ARMABI int strcmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcasecmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2,
N    * case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncasecmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2, case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcoll(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2, both
N    * interpreted as appropriate to the LC_COLLATE category of the current
N    * locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2 when both are interpreted
N    *          as appropriate to the current locale.
N    */
N
Nextern _ARMABI size_t strxfrm(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
N   /*
N    * transforms the string pointed to by s2 and places the resulting string
N    * into the array pointed to by s1. The transformation function is such that
N    * if the strcmp function is applied to two transformed strings, it returns
N    * a value greater than, equal to or less than zero, corresponding to the
N    * result of the strcoll function applied to the same two original strings.
N    * No more than n characters are placed into the resulting array pointed to
N    * by s1, including the terminating null character. If n is zero, s1 is
N    * permitted to be a null pointer. If copying takes place between objects
N    * that overlap, the behaviour is undefined.
N    * Returns: The length of the transformed string is returned (not including
N    *          the terminating null character). If the value returned is n or
N    *          more, the contents of the array pointed to by s1 are
N    *          indeterminate.
N    */
N
N
N#ifdef __cplusplus
Sextern _ARMABI const void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Sextern "C++" void *memchr(void * __s, int __c, size_t __n) __attribute__((__nonnull__(1)));
Sextern "C++" inline void *memchr(void * __s, int __c, size_t __n)
S    { return const_cast<void *>(memchr(const_cast<const void *>(__s), __c, __n)); }
N#else
Nextern _ARMABI void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an unsigned char) in the
N    * initial n characters (each interpreted as unsigned char) of the object
N    * pointed to by s.
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the object.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strchr(char * __s, int __c)
S    { return const_cast<char *>(strchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an char) in the string
N    * pointed to by s (including the terminating null character).
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the string.
N    */
N
Nextern _ARMABI size_t strcspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters not from the string pointed to by
N    * s2. The terminating null character is not considered part of s2.
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strpbrk(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strpbrk(char * __s1, const char * __s2)
S    { return const_cast<char *>(strpbrk(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of any
N    * character from the string pointed to by s2.
N    * Returns: returns a pointer to the character, or a null pointer if no
N    *          character form s2 occurs in s1.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strrchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strrchr(char * __s, int __c)
S    { return const_cast<char *>(strrchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the last occurence of c (converted to a char) in the string
N    * pointed to by s. The terminating null character is considered part of
N    * the string.
N    * Returns: returns a pointer to the character, or a null pointer if c does
N    *          not occur in the string.
N    */
N
Nextern _ARMABI size_t strspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters from the string pointed to by S2
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strstr(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strstr(char * __s1, const char * __s2)
S    { return const_cast<char *>(strstr(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of the
N    * sequence of characters (excluding the terminating null character) in the
N    * string pointed to by s2.
N    * Returns: a pointer to the located string, or a null pointer if the string
N    *          is not found.
N    */
N
Nextern _ARMABI char *strtok(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI char *_strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#ifndef __STRICT_ANSI__
Nextern _ARMABI char *strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#endif
N   /*
N    * A sequence of calls to the strtok function breaks the string pointed to
N    * by s1 into a sequence of tokens, each of which is delimited by a
N    * character from the string pointed to by s2. The first call in the
N    * sequence has s1 as its first argument, and is followed by calls with a
N    * null pointer as their first argument. The separator string pointed to by
N    * s2 may be different from call to call.
N    * The first call in the sequence searches for the first character that is
N    * not contained in the current separator string s2. If no such character
N    * is found, then there are no tokens in s1 and the strtok function returns
N    * a null pointer. If such a character is found, it is the start of the
N    * first token.
N    * The strtok function then searches from there for a character that is
N    * contained in the current separator string. If no such character is found,
N    * the current token extends to the end of the string pointed to by s1, and
N    * subsequent searches for a token will fail. If such a character is found,
N    * it is overwritten by a null character, which terminates the current
N    * token. The strtok function saves a pointer to the following character,
N    * from which the next search for a token will start.
N    * Each subsequent call, with a null pointer as the value for the first
N    * argument, starts searching from the saved pointer and behaves as
N    * described above.
N    * Returns: pointer to the first character of a token, or a null pointer if
N    *          there is no token.
N    *
N    * strtok_r() is a common extension which works exactly like
N    * strtok(), but instead of storing its state in a hidden
N    * library variable, requires the user to pass in a pointer to a
N    * char * variable which will be used instead. Any sequence of
N    * calls to strtok_r() passing the same char ** pointer should
N    * behave exactly like the corresponding sequence of calls to
N    * strtok(). This means that strtok_r() can safely be used in
N    * multi-threaded programs, and also that you can tokenise two
N    * strings in parallel.
N    */
N
Nextern _ARMABI void *memset(void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N   /*
N    * copies the value of c (converted to an unsigned char) into each of the
N    * first n charactes of the object pointed to by s.
N    * Returns: the value of s.
N    */
Nextern _ARMABI char *strerror(int /*errnum*/);
Xextern __declspec(__nothrow) char *strerror(int  );
N   /*
N    * maps the error number in errnum to an error message string.
N    * Returns: a pointer to the string, the contents of which are
N    *          implementation-defined. The array pointed to shall not be
N    *          modified by the program, but may be overwritten by a
N    *          subsequent call to the strerror function.
N    */
Nextern _ARMABI size_t strlen(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * computes the length of the string pointed to by s.
N    * Returns: the number of characters that precede the terminating null
N    *          character.
N    */
N
Nextern _ARMABI size_t strlcpy(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string src into the string dst, using no more than
N    * len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src. Thus, the operation
N    * succeeded without truncation if and only if ret < len;
N    * otherwise, the value in ret tells you how big to make dst if
N    * you decide to reallocate it. (That value does _not_ include
N    * the NUL.)
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI size_t strlcat(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * concatenates the string src to the string dst, using no more
N    * than len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src plus the original length
N    * of dst. Thus, the operation succeeded without truncation if
N    * and only if ret < len; otherwise, the value in ret tells you
N    * how big to make dst if you decide to reallocate it. (That
N    * value does _not_ include the NUL.)
N    * 
N    * If no NUL is encountered within the first len bytes of dst,
N    * then the length of dst is considered to have been equal to
N    * len for the purposes of the return value (as if there were a
N    * NUL at dst[len]). Thus, the return value in this case is len
N    * + strlen(src).
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI void _membitcpybl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpybb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
N    /*
N     * Copies or moves a piece of memory from one place to another,
N     * with one-bit granularity. So you can start or finish a copy
N     * part way through a byte, and you can copy between regions
N     * with different alignment within a byte.
N     * 
N     * All these functions have the same prototype: two void *
N     * pointers for destination and source, then two integers
N     * giving the bit offset from those pointers, and finally the
N     * number of bits to copy.
N     * 
N     * Just like memcpy and memmove, the "cpy" functions copy as
N     * fast as they can in the assumption that the memory regions
N     * do not overlap, while the "move" functions cope correctly
N     * with overlap.
N     *
N     * Treating memory as a stream of individual bits requires
N     * defining a convention about what order those bits are
N     * considered to be arranged in. The above functions support
N     * multiple conventions:
N     * 
N     *  - the "bl" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in little-endian fashion, so that the LSB comes
N     *    first. (For example, membitcpybl(a,b,0,7,1) would copy
N     *    the MSB of the byte at b to the LSB of the byte at a.)
N     * 
N     *  - the "bb" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in big-endian fashion, so that the MSB comes
N     *    first.
N     * 
N     *  - the "hl" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in little-endian fashion.
N     * 
N     *  - the "hb" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in big-endian fashion.
N     * 
N     *  - the "wl" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in little-endian fashion.
N     * 
N     *  - the "wb" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in big-endian fashion.
N     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STRING_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STRING_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::memcpy;
S      using ::std::memmove;
S      using ::std::strcpy;
S      using ::std::strncpy;
S      using ::std::strcat;
S      using ::std::strncat;
S      using ::std::memcmp;
S      using ::std::strcmp;
S      using ::std::strncmp;
S      using ::std::strcasecmp;
S      using ::std::strncasecmp;
S      using ::std::strcoll;
S      using ::std::strxfrm;
S      using ::std::memchr;
S      using ::std::strchr;
S      using ::std::strcspn;
S      using ::std::strpbrk;
S      using ::std::strrchr;
S      using ::std::strspn;
S      using ::std::strstr;
S      using ::std::strtok;
S#ifndef __STRICT_ANSI__
S      using ::std::strtok_r;
S#endif
S      using ::std::_strtok_r;
S      using ::std::memset;
S      using ::std::strerror;
S      using ::std::strlen;
S      using ::std::strlcpy;
S      using ::std::strlcat;
S      using ::std::_membitcpybl;
S      using ::std::_membitcpybb;
S      using ::std::_membitcpyhl;
S      using ::std::_membitcpyhb;
S      using ::std::_membitcpywl;
S      using ::std::_membitcpywb;
S      using ::std::_membitmovebl;
S      using ::std::_membitmovebb;
S      using ::std::_membitmovehl;
S      using ::std::_membitmovehb;
S      using ::std::_membitmovewl;
S      using ::std::_membitmovewb;
S    #endif /* __STRING_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of string.h */
N
L 42 "..\..\..\..\src\ble\gatt_client.c" 2
N#include <stddef.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stddef.h" 1
N/* stddef.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.1.4 */
N
N/* Copyright (C) ARM Ltd., 1999
N * All rights reserved
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright 1991 ARM Limited. All rights reserved.             */
N/* version 0.05 */
N
N/*
N * The following types and macros are defined in several headers referred to in
N * the descriptions of the functions declared in that header. They are also
N * defined in this header file.
N */
N
N#ifndef __stddef_h
N#define __stddef_h
N#define __ARMCLIB_VERSION 5060019
N
N  #ifndef __STDDEF_DECLS
N  #define __STDDEF_DECLS
N    #undef __CLIBNS
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS ::std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if __sizeof_ptr == 8
X#if 4 == 8
S  typedef signed long ptrdiff_t;
N#else
N  typedef signed int ptrdiff_t;
N#endif
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
S   /* the unsigned integral type of the result of the sizeof operator. */
N#endif
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
N  #if !defined(__STRICT_ANSI__)
X  #if !0L
N  /* unconditional in non-strict C for consistency of debug info */
N    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X    #if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #else
N      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #endif
N  #elif !defined(__wchar_t)
S    #define __wchar_t 1
S    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #else
S      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #endif
S   /*
S    * An integral type whose range of values can represent distinct codes for
S    * all members of the largest extended character set specified among the
S    * supported locales; the null character shall have the code value zero and
S    * each member of the basic character set shall have a code value when used
S    * as the lone character in an integer character constant.
S    */
N  #endif
N#endif
N
N#undef NULL  /* others (e.g. <stdio.h>) also define */
N#define NULL 0
N   /* null pointer constant. */
N
N#ifdef __clang__
S  #define offsetof(t, d) __builtin_offsetof(t, d)
N#else
N  /* EDG uses __INTADDR__ to avoid errors when strict */
N  #define offsetof(t, memb) ((__CLIBNS size_t)__INTADDR__(&(((t *)0)->memb)))
N#endif
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 201112L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 201112L <= 199409L) || (0L && 201103L <= __cplusplus)
N  typedef long double max_align_t;
N#endif
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDDEF_DECLS */
N
N
N  #ifdef __cplusplus
S    #ifndef __STDDEF_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::ptrdiff_t;
S      #if !defined(__STRICT_ANSI__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S        using ::std::max_align_t;
S      #endif
S    #endif 
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of stddef.h */
N
L 43 "..\..\..\..\src\ble\gatt_client.c" 2
N
N#include "btstack_config.h"
L 1 "..\..\User\btstack_config.h" 1
N//
N// btstack_config.h for STM32F103RB Nucleo + TI CC256B port
N//
N
N#ifndef BTSTACK_CONFIG_H
N#define BTSTACK_CONFIG_H
N
N// Port related features
N#define HAVE_BTSTACK_STDIN
N#define HAVE_EMBEDDED_TIME_MS
N#define HAVE_HAL_AUDIO
N
N// BTstack features that can be enabled
N#define ENABLE_BLE
N#define ENABLE_CC256X_BAUDRATE_CHANGE_FLOWCONTROL_BUG_WORKAROUND
N#define ENABLE_CLASSIC
N#define ENABLE_HFP_WIDE_BAND_SPEECH
N#define ENABLE_LE_CENTRAL
N#define ENABLE_LE_DATA_CHANNELS
N#define ENABLE_LE_PERIPHERAL
N#define ENABLE_LOG_ERROR
N#define ENABLE_PRINTF_HEXDUMP
N#define ENABLE_SCO_OVER_HCI
N#define ENABLE_SCO_STEREO_PLAYBACK
N#define ENABLE_SEGGER_RTT
N
N// BTstack configuration. buffers, sizes, ...
N#define HCI_ACL_PAYLOAD_SIZE (1691 + 4)
N#define MAX_NR_AVDTP_CONNECTIONS 1
N#define MAX_NR_AVDTP_STREAM_ENDPOINTS 1
N#define MAX_NR_AVRCP_CONNECTIONS 1
N#define MAX_NR_BNEP_CHANNELS 1
N#define MAX_NR_BNEP_SERVICES 1
N#define MAX_NR_BTSTACK_LINK_KEY_DB_MEMORY_ENTRIES  2
N#define MAX_NR_GATT_CLIENTS 1
N#define MAX_NR_HCI_CONNECTIONS 2
N#define MAX_NR_HFP_CONNECTIONS 1
N#define MAX_NR_L2CAP_CHANNELS  4
N#define MAX_NR_L2CAP_SERVICES  3
N#define MAX_NR_RFCOMM_CHANNELS 1
N#define MAX_NR_RFCOMM_MULTIPLEXERS 1
N#define MAX_NR_RFCOMM_SERVICES 1
N#define MAX_NR_SERVICE_RECORD_ITEMS 4
N#define MAX_NR_SM_LOOKUP_ENTRIES 3
N#define MAX_NR_WHITELIST_ENTRIES 1
N
N// Link Key DB and LE Device DB using TLV on top of Flash Sector interface
N#define NVM_NUM_DEVICE_DB_ENTRIES 16
N#define NVM_NUM_LINK_KEYS 16
N
N#endif
L 45 "..\..\..\..\src\ble\gatt_client.c" 2
N
N#include "ble/att_dispatch.h"
L 1 "..\..\..\..\src\ble/att_dispatch.h" 1
N/*
N * Copyright (C) 2014 BlueKitchen GmbH
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions
N * are met:
N *
N * 1. Redistributions of source code must retain the above copyright
N *    notice, this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright
N *    notice, this list of conditions and the following disclaimer in the
N *    documentation and/or other materials provided with the distribution.
N * 3. Neither the name of the copyright holders nor the names of
N *    contributors may be used to endorse or promote products derived
N *    from this software without specific prior written permission.
N * 4. Any redistribution, use, or modification is done solely for
N *    personal benefit and not for any commercial purpose or for
N *    monetary gain.
N *
N * THIS SOFTWARE IS PROVIDED BY BLUEKITCHEN GMBH AND CONTRIBUTORS
N * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
N * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL MATTHIAS
N * RINGWALD OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
N * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
N * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
N * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
N * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
N * THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
N * SUCH DAMAGE.
N *
N * Please inquire about commercial licensing options at 
N * contact@bluekitchen-gmbh.com
N *
N */
N
N
N/**
N * @title ATT Dispatch
N *
N * Dispatcher for independent implementation of ATT client and server.
N *
N */
N
N#ifndef ATT_DISPATCH_H
N#define ATT_DISPATCH_H
N
N#include "btstack_util.h"
L 1 "..\..\..\..\src\btstack_util.h" 1
N/*
N * Copyright (C) 2014 BlueKitchen GmbH
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions
N * are met:
N *
N * 1. Redistributions of source code must retain the above copyright
N *    notice, this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright
N *    notice, this list of conditions and the following disclaimer in the
N *    documentation and/or other materials provided with the distribution.
N * 3. Neither the name of the copyright holders nor the names of
N *    contributors may be used to endorse or promote products derived
N *    from this software without specific prior written permission.
N * 4. Any redistribution, use, or modification is done solely for
N *    personal benefit and not for any commercial purpose or for
N *    monetary gain.
N *
N * THIS SOFTWARE IS PROVIDED BY BLUEKITCHEN GMBH AND CONTRIBUTORS
N * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
N * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL MATTHIAS
N * RINGWALD OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
N * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
N * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
N * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
N * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
N * THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
N * SUCH DAMAGE.
N *
N * Please inquire about commercial licensing options at 
N * contact@bluekitchen-gmbh.com
N *
N */
N
N/**
N * @title General Utility Functions
N *
N */
N 
N#ifndef BTSTACK_UTIL_H
N#define BTSTACK_UTIL_H
N
N
N#if defined __cplusplus
X#if 0L
Sextern "C" {
N#endif
N
N#include <stdint.h>
N#include <string.h>
N
N#include "bluetooth.h"
L 1 "..\..\..\..\src\bluetooth.h" 1
N/*
N * Copyright (C) 2015 BlueKitchen GmbH
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions
N * are met:
N *
N * 1. Redistributions of source code must retain the above copyright
N *    notice, this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright
N *    notice, this list of conditions and the following disclaimer in the
N *    documentation and/or other materials provided with the distribution.
N * 3. Neither the name of the copyright holders nor the names of
N *    contributors may be used to endorse or promote products derived
N *    from this software without specific prior written permission.
N * 4. Any redistribution, use, or modification is done solely for
N *    personal benefit and not for any commercial purpose or for
N *    monetary gain.
N *
N * THIS SOFTWARE IS PROVIDED BY BLUEKITCHEN GMBH AND CONTRIBUTORS
N * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
N * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL MATTHIAS
N * RINGWALD OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
N * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
N * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
N * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
N * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
N * THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
N * SUCH DAMAGE.
N *
N * Please inquire about commercial licensing options at 
N * contact@bluekitchen-gmbh.com
N *
N */
N
N/*
N * bluetooth.h
N *
N * Numbers defined or derived from the official Bluetooth specification
N */
N
N#ifndef BLUETOOTH_H
N#define BLUETOOTH_H
N
N#include <stdint.h>
N
N/**
N * @brief hci connection handle type
N */
Ntypedef uint16_t hci_con_handle_t;
N
N/**
N * @brief Length of a bluetooth device address.
N */
N#define BD_ADDR_LEN 6
N
N/**
N * @brief Bluetooth address
N */
Ntypedef uint8_t bd_addr_t[BD_ADDR_LEN];
Xtypedef uint8_t bd_addr_t[6];
N
N/**
N * Address types
N * @note: BTstack uses a custom addr type to refer to classic ACL and SCO devices
N */
N typedef enum {
N    BD_ADDR_TYPE_LE_PUBLIC = 0,
N    BD_ADDR_TYPE_LE_RANDOM = 1,
N    BD_ADDR_TYPE_LE_PRIVAT_FALLBACK_PUBLIC = 2,
N    BD_ADDR_TYPE_LE_PRIVAT_FALLBACK_RANDOM = 3,
N    BD_ADDR_TYPE_SCO       = 0xfc,
N    BD_ADDR_TYPE_ACL       = 0xfd,
N    BD_ADDR_TYPE_UNKNOWN   = 0xfe,  // also used as 'invalid'
N} bd_addr_type_t;
N
N/**
N * Link types for BR/EDR Connections
N */
Ntypedef enum {
N    HCI_LINK_TYPE_SCO  = 0,
N    HCI_LINK_TYPE_ACL  = 1,
N    HCI_LINK_TYPE_ESCO = 2,
N} hci_link_type_t;
N
N
N/**
N * @brief link key
N */
N#define LINK_KEY_LEN 16
N#define LINK_KEY_STR_LEN (LINK_KEY_LEN*2)
Ntypedef uint8_t link_key_t[LINK_KEY_LEN]; 
Xtypedef uint8_t link_key_t[16]; 
N
N/**
N * @brief link key type
N */
Ntypedef enum {
N  INVALID_LINK_KEY = 0xffff,
N  COMBINATION_KEY = 0,  // standard pairing
N  LOCAL_UNIT_KEY,     // ?
N  REMOTE_UNIT_KEY,    // ?
N  DEBUG_COMBINATION_KEY,  // SSP with debug
N  UNAUTHENTICATED_COMBINATION_KEY_GENERATED_FROM_P192, // SSP Simple Pairing
N  AUTHENTICATED_COMBINATION_KEY_GENERATED_FROM_P192,   // SSP Passkey, Number confirm, OOB
N  CHANGED_COMBINATION_KEY,               // Link key changed using Change Connection Lnk Key
N  UNAUTHENTICATED_COMBINATION_KEY_GENERATED_FROM_P256, // SSP Simpe Pairing
N  AUTHENTICATED_COMBINATION_KEY_GENERATED_FROM_P256,   // SSP Passkey, Number confirm, OOB
N} link_key_type_t;
N
N/**
N * @brief Extended Inquiry Response
N */
N#define EXTENDED_INQUIRY_RESPONSE_DATA_LEN 240
N
N/**
N * @brief Inquiry modes
N */
Ntypedef enum {
N  INQUIRY_MODE_STANDARD = 0,
N  INQUIRY_MODE_RSSI,
N  INQUIRY_MODE_RSSI_AND_EIR,
N} inquiry_mode_t;
N
N/**
N * @brief Page Scan Types
N */
Ntypedef enum {
N    PAGE_SCAN_MODE_STANDARD = 0,
N    PAGE_SCAN_MODE_INTERLACED,
N} page_scan_type_t;
N
N/**
N * @brief Inquiry Scan Types
N */
Ntypedef enum {
N    INQUIRY_SCAN_MODE_STANDARD = 0,
N    INQUIRY_SCAN_MODE_INTERLACED,
N} inquiry_scan_type_t;
N
N/**
N * Link Supervision Timeout Default, 0x7d00 * 0.625ms = 20s
N */
N#define HCI_LINK_SUPERVISION_TIMEOUT_DEFAULT 0x7D00
N
N/**
N * Service Type used for QoS Setup and Flow Specification
N */
Ntypedef enum {
N    HCI_SERVICE_TYPE_NO_TRAFFIC = 0,
N    HCI_SERVICE_TYPE_BEST_EFFORT,
N    HCI_SERVICE_TYPE_GUARANTEED,
N    HCI_SERVICE_TYPE_INVALID,
N} hci_service_type_t;
N
N/**
N * HCI Transport 
N */
N
N/**
N * packet types - used in BTstack and over the H4 UART interface
N */
N#define HCI_COMMAND_DATA_PACKET 0x01
N#define HCI_ACL_DATA_PACKET     0x02
N#define HCI_SCO_DATA_PACKET     0x03
N#define HCI_EVENT_PACKET        0x04
N
N/** 
N * HCI Layer
N */
N
N//
N// Error Codes rfom Bluetooth Core Specification
N//
N
N/* ENUM_START: BLUETOOTH_ERROR_CODE */
N#define ERROR_CODE_SUCCESS                                 0x00 
N#define ERROR_CODE_UNKNOWN_HCI_COMMAND                     0x01
N#define ERROR_CODE_UNKNOWN_CONNECTION_IDENTIFIER           0x02
N#define ERROR_CODE_HARDWARE_FAILURE                        0x03
N#define ERROR_CODE_PAGE_TIMEOUT                            0x04
N#define ERROR_CODE_AUTHENTICATION_FAILURE                  0x05
N#define ERROR_CODE_PIN_OR_KEY_MISSING                      0x06
N#define ERROR_CODE_MEMORY_CAPACITY_EXCEEDED                0x07
N#define ERROR_CODE_CONNECTION_TIMEOUT                      0x08
N#define ERROR_CODE_CONNECTION_LIMIT_EXCEEDED               0x09
N#define ERROR_CODE_SYNCHRONOUS_CONNECTION_LIMIT_TO_A_DEVICE_EXCEEDED  0x0A
N#define ERROR_CODE_ACL_CONNECTION_ALREADY_EXISTS           0x0B
N#define ERROR_CODE_COMMAND_DISALLOWED                      0x0C
N#define ERROR_CODE_CONNECTION_REJECTED_DUE_TO_LIMITED_RESOURCES 0x0D
N#define ERROR_CODE_CONNECTION_REJECTED_DUE_TO_SECURITY_REASONS  0x0E 
N#define ERROR_CODE_CONNECTION_REJECTED_DUE_TO_UNACCEPTABLE_BD_ADDR 0x0F 
N#define ERROR_CODE_CONNECTION_ACCEPT_TIMEOUT_EXCEEDED      0x10
N#define ERROR_CODE_UNSUPPORTED_FEATURE_OR_PARAMETER_VALUE  0x11 
N#define ERROR_CODE_INVALID_HCI_COMMAND_PARAMETERS          0x12 
N#define ERROR_CODE_REMOTE_USER_TERMINATED_CONNECTION       0x13
N#define ERROR_CODE_REMOTE_DEVICE_TERMINATED_CONNECTION_DUE_TO_LOW_RESOURCES 0x14 
N#define ERROR_CODE_REMOTE_DEVICE_TERMINATED_CONNECTION_DUE_TO_POWER_OFF     0x15
N#define ERROR_CODE_CONNECTION_TERMINATED_BY_LOCAL_HOST     0x16
N#define ERROR_CODE_REPEATED_ATTEMPTS                       0x17
N#define ERROR_CODE_PAIRING_NOT_ALLOWED                     0x18
N#define ERROR_CODE_UNKNOWN_LMP_PDU                         0x19                  
N#define ERROR_CODE_UNSUPPORTED_REMOTE_FEATURE_UNSUPPORTED_LMP_FEATURE 0x1A
N#define ERROR_CODE_SCO_OFFSET_REJECTED                     0x1B
N#define ERROR_CODE_SCO_INTERVAL_REJECTED                   0x1C
N#define ERROR_CODE_SCO_AIR_MODE_REJECTED                   0x1D
N#define ERROR_CODE_INVALID_LMP_PARAMETERS_INVALID_LL_PARAMETERS 0x1E
N#define ERROR_CODE_UNSPECIFIED_ERROR                       0x1F
N#define ERROR_CODE_UNSUPPORTED_LMP_PARAMETER_VALUE_UNSUPPORTED_LL_PARAMETER_VALUE 0x20
N#define ERROR_CODE_ROLE_CHANGE_NOT_ALLOWED                 0x21
N#define ERROR_CODE_LMP_RESPONSE_TIMEOUT_LL_RESPONSE_TIMEOUT 0x22
N#define ERROR_CODE_LMP_ERROR_TRANSACTION_COLLISION         0x23
N#define ERROR_CODE_LMP_PDU_NOT_ALLOWED                     0x24
N#define ERROR_CODE_ENCRYPTION_MODE_NOT_ACCEPTABLE          0x25
N#define ERROR_CODE_LINK_KEY_CANNOT_BE_CHANGED              0x26
N#define ERROR_CODE_REQUESTED_QOS_NOT_SUPPORTED             0x27
N#define ERROR_CODE_INSTANT_PASSED                          0x28
N#define ERROR_CODE_PAIRING_WITH_UNIT_KEY_NOT_SUPPORTED     0x29
N#define ERROR_CODE_DIFFERENT_TRANSACTION_COLLISION         0x2A
N#define ERROR_CODE_RESERVED                                0x2B
N#define ERROR_CODE_QOS_UNACCEPTABLE_PARAMETER              0x2C
N#define ERROR_CODE_QOS_REJECTED                            0x2D
N#define ERROR_CODE_CHANNEL_CLASSIFICATION_NOT_SUPPORTED    0x2E
N#define ERROR_CODE_INSUFFICIENT_SECURITY                   0x2F
N#define ERROR_CODE_PARAMETER_OUT_OF_MANDATORY_RANGE        0x30
N// #define ERROR_CODE_RESERVED
N#define ERROR_CODE_ROLE_SWITCH_PENDING                     0x32
N// #define ERROR_CODE_RESERVED
N#define ERROR_CODE_RESERVED_SLOT_VIOLATION                 0x34
N#define ERROR_CODE_ROLE_SWITCH_FAILED                      0x35
N#define ERROR_CODE_EXTENDED_INQUIRY_RESPONSE_TOO_LARGE     0x36
N#define ERROR_CODE_SECURE_SIMPLE_PAIRING_NOT_SUPPORTED_BY_HOST 0x37
N#define ERROR_CODE_HOST_BUSY_PAIRING                       0x38
N#define ERROR_CODE_CONNECTION_REJECTED_DUE_TO_NO_SUITABLE_CHANNEL_FOUND 0x39
N#define ERROR_CODE_CONTROLLER_BUSY                         0x3A
N#define ERROR_CODE_UNACCEPTABLE_CONNECTION_PARAMETERS      0x3B
N#define ERROR_CODE_DIRECTED_ADVERTISING_TIMEOUT            0x3C
N#define ERROR_CODE_CONNECTION_TERMINATED_DUE_TO_MIC_FAILURE 0x3D
N#define ERROR_CODE_CONNECTION_FAILED_TO_BE_ESTABLISHED     0x3E
N#define ERROR_CODE_MAC_CONNECTION_FAILED                   0x3F
N#define ERROR_CODE_COARSE_CLOCK_ADJUSTMENT_REJECTED_BUT_WILL_TRY_TO_ADJUST_USING_CLOCK_DRAGGING 0x40
N
N// BTstack defined ERRORS, mapped into BLuetooth status code range
N
N#define BTSTACK_CONNECTION_TO_BTDAEMON_FAILED              0x50
N#define BTSTACK_ACTIVATION_FAILED_SYSTEM_BLUETOOTH         0x51
N#define BTSTACK_ACTIVATION_POWERON_FAILED                  0x52
N#define BTSTACK_ACTIVATION_FAILED_UNKNOWN                  0x53
N#define BTSTACK_NOT_ACTIVATED                              0x54
N#define BTSTACK_BUSY                                       0x55
N#define BTSTACK_MEMORY_ALLOC_FAILED                        0x56
N#define BTSTACK_ACL_BUFFERS_FULL                           0x57
N
N// l2cap errors - enumeration by the command that created them
N#define L2CAP_COMMAND_REJECT_REASON_COMMAND_NOT_UNDERSTOOD 0x60
N#define L2CAP_COMMAND_REJECT_REASON_SIGNALING_MTU_EXCEEDED 0x61
N#define L2CAP_COMMAND_REJECT_REASON_INVALID_CID_IN_REQUEST 0x62
N
N#define L2CAP_CONNECTION_RESPONSE_RESULT_SUCCESSFUL        0x63
N#define L2CAP_CONNECTION_RESPONSE_RESULT_PENDING           0x64
N#define L2CAP_CONNECTION_RESPONSE_RESULT_REFUSED_PSM       0x65
N#define L2CAP_CONNECTION_RESPONSE_RESULT_REFUSED_SECURITY  0x66
N#define L2CAP_CONNECTION_RESPONSE_RESULT_REFUSED_RESOURCES 0x67
N#define L2CAP_CONNECTION_RESPONSE_RESULT_ERTM_NOT_SUPPORTED 0x68
N
N// should be L2CAP_CONNECTION_RTX_TIMEOUT
N#define L2CAP_CONNECTION_RESPONSE_RESULT_RTX_TIMEOUT       0x69
N#define L2CAP_CONNECTION_BASEBAND_DISCONNECT               0x6A
N#define L2CAP_SERVICE_ALREADY_REGISTERED                   0x6B
N#define L2CAP_DATA_LEN_EXCEEDS_REMOTE_MTU                  0x6C
N#define L2CAP_SERVICE_DOES_NOT_EXIST                       0x6D
N#define L2CAP_LOCAL_CID_DOES_NOT_EXIST                     0x6E
N    
N#define RFCOMM_MULTIPLEXER_STOPPED                         0x70
N#define RFCOMM_CHANNEL_ALREADY_REGISTERED                  0x71
N#define RFCOMM_NO_OUTGOING_CREDITS                         0x72
N#define RFCOMM_AGGREGATE_FLOW_OFF                          0x73
N#define RFCOMM_DATA_LEN_EXCEEDS_MTU                        0x74
N
N#define HFP_REMOTE_REJECTS_AUDIO_CONNECTION                0x7F
N
N#define SDP_HANDLE_ALREADY_REGISTERED                      0x80
N#define SDP_QUERY_INCOMPLETE                               0x81
N#define SDP_SERVICE_NOT_FOUND                              0x82
N#define SDP_HANDLE_INVALID                                 0x83
N#define SDP_QUERY_BUSY                                     0x84
N
N#define ATT_HANDLE_VALUE_INDICATION_IN_PROGRESS            0x90 
N#define ATT_HANDLE_VALUE_INDICATION_TIMEOUT                0x91
N#define ATT_HANDLE_VALUE_INDICATION_DISCONNECT             0x92
N
N#define GATT_CLIENT_NOT_CONNECTED                          0x93
N#define GATT_CLIENT_BUSY                                   0x94
N#define GATT_CLIENT_IN_WRONG_STATE                         0x95
N#define GATT_CLIENT_DIFFERENT_CONTEXT_FOR_ADDRESS_ALREADY_EXISTS 0x96
N#define GATT_CLIENT_VALUE_TOO_LONG                         0x97
N#define GATT_CLIENT_CHARACTERISTIC_NOTIFICATION_NOT_SUPPORTED 0x98
N#define GATT_CLIENT_CHARACTERISTIC_INDICATION_NOT_SUPPORTED   0x99 
N
N#define BNEP_SERVICE_ALREADY_REGISTERED                    0xA0
N#define BNEP_CHANNEL_NOT_CONNECTED                         0xA1
N#define BNEP_DATA_LEN_EXCEEDS_MTU                          0xA2
N
N// OBEX ERRORS
N#define OBEX_UNKNOWN_ERROR                                 0xB0
N#define OBEX_CONNECT_FAILED                                0xB1
N#define OBEX_DISCONNECTED                                  0xB2
N#define OBEX_NOT_FOUND                                     0xB3
N#define OBEX_NOT_ACCEPTABLE                                0xB4
N
N#define MESH_ERROR_APPKEY_INDEX_INVALID                    0xD0
N/* ENUM_END */
N
N
N/* ENUM_START: AVRCP_BROWSING_ERROR_CODE */
N#define AVRCP_BROWSING_ERROR_CODE_INVALID_COMMAND                     0x00  // Sent if TG received a PDU that it did not understand. Valid for All.
N#define AVRCP_BROWSING_ERROR_CODE_INVALID_PARAMETER                   0x01  // Sent if the TG received a PDU with a parameter ID that it did not understand. Sent if there is only one parameter ID in the PDU. Valid for All.
N#define AVRCP_BROWSING_ERROR_CODE_SPECIFIED_PARAMETER_NOT_FOUND       0x02  // Sent if the parameter ID is understood, but content is wrong or corrupted. Valid for All.
N#define AVRCP_BROWSING_ERROR_CODE_INTERNAL_ERROR                      0x03  // Sent if there are error conditions not covered by a more specific error code. Valid for All.
N#define AVRCP_BROWSING_ERROR_CODE_SUCCESS                             0x04  // This is the status that should be returned if the operation was successful. Valid for All except where the response CType is AV/C REJECTED.
N#define AVRCP_BROWSING_ERROR_CODE_UID_CHANGED                         0x05  // The UIDs on the device have changed. Valid for All.
N#define AVRCP_BROWSING_ERROR_CODE_RESERVED_06                         0x06  // Valid for All.
N#define AVRCP_BROWSING_ERROR_CODE_INVALID_DIRECTION                   0x07  // The Direction parameter is invalid. Valid for Change Path.
N#define AVRCP_BROWSING_ERROR_CODE_NOT_A_DIRECTORY                     0x08  // The UID provided does not refer to a folder item. Valid for Change Path.
N#define AVRCP_BROWSING_ERROR_CODE_DOES_NOT_EXIST                      0x09  // The UID provided does not refer to any currently valid. Valid for Change Path, PlayItem, AddToNowPlaying, GetItemAttributes.
N#define AVRCP_BROWSING_ERROR_CODE_INVALID_SCOPE                       0x0a  // The scope parameter is invalid. Valid for GetFolderItems, PlayItem, AddToNowPlayer, GetItemAttributes,.
N#define AVRCP_BROWSING_ERROR_CODE_RANGE_OUT_OF_BOUNDS                 0x0b  // The start of range provided is not valid. Valid for GetFolderItems.
N#define AVRCP_BROWSING_ERROR_CODE_UID_IS_A_DIRECTORY                  0x0c  // The UID provided refers to a directory, which cannot be handled by this media player. Valid for PlayItem, AddToNowPlaying.
N#define AVRCP_BROWSING_ERROR_CODE_MEDIA_IN_USES                       0x0d  // The media is not able to be used for this operation at this time. Valid for PlayItem, AddToNowPlaying.
N#define AVRCP_BROWSING_ERROR_CODE_NOW_PLAYING_LIST_FULL               0x0e  // No more items can be added to the Now Playing List. Valid for AddToNowPlaying.
N#define AVRCP_BROWSING_ERROR_CODE_SEARCH_NOT_SUPPORTED                0x0f  // The Browsed Media Player does not support search. Valid for Search.
N#define AVRCP_BROWSING_ERROR_CODE_SEARCH_IN_PROGRESS                  0x10  // A search operation is already in progress. Valid for Search.
N#define AVRCP_BROWSING_ERROR_CODE_INVALID_PLAYER_ID                   0x11  // The specified Player Id does not refer to a valid player. Valid for SetAddressedPlayer, SetBrowsedPlayer.
N#define AVRCP_BROWSING_ERROR_CODE_PLAYER_NOT_BROWSABLE                0x12  // The Player Id supplied refers to a Media Player which does not support browsing. Valid for SetBrowsedPlayer.
N#define AVRCP_BROWSING_ERROR_CODE_PLAYER_NOT_ADDRESSED                0x13  // The Player Id supplied refers to a player which is not currently addressed, and the command is not able to be performed if the player is not set as addressed. Valid for Search SetBrowsedPlayer.
N#define AVRCP_BROWSING_ERROR_CODE_NO_VALID_SEARCH_RESULTS             0x14  // The Search result list does not contain valid entries, e.g. after being invalidated due to change of browsed player. Valid for GetFolderItems.
N#define AVRCP_BROWSING_ERROR_CODE_NO_AVAILABLE_PLAYERS                0x15  // Valid for All.
N#define AVRCP_BROWSING_ERROR_CODE_ADDRESSED_PLAYER_CHANGED            0x16  // Valid for Register Notification.
N// 0x17-0xff Reserved
N/* ENUM_END */
N
N// HCI roles
Ntypedef enum {
N    HCI_ROLE_MASTER = 0,
N    HCI_ROLE_SLAVE  = 1,
N    HCI_ROLE_INVALID = 0xff,
N} hci_role_t;
N
N// packet sizes (max payload)
N#define HCI_ACL_DM1_SIZE            17
N#define HCI_ACL_DH1_SIZE            27
N#define HCI_ACL_2DH1_SIZE           54
N#define HCI_ACL_3DH1_SIZE           83
N#define HCI_ACL_DM3_SIZE           121
N#define HCI_ACL_DH3_SIZE           183
N#define HCI_ACL_DM5_SIZE           224
N#define HCI_ACL_DH5_SIZE           339
N#define HCI_ACL_2DH3_SIZE          367
N#define HCI_ACL_3DH3_SIZE          552
N#define HCI_ACL_2DH5_SIZE          679
N#define HCI_ACL_3DH5_SIZE         1021
N       
N#define LE_ADVERTISING_DATA_SIZE    31
N
N// SCO Packet Types
N#define SCO_PACKET_TYPES_NONE  0x0000
N#define SCO_PACKET_TYPES_HV1   0x0001
N#define SCO_PACKET_TYPES_HV3   0x0004
N#define SCO_PACKET_TYPES_EV3   0x0008
N#define SCO_PACKET_TYPES_2EV3  0x0040
N#define SCO_PACKET_TYPES_ALL   0x03FF
N
N// Link Policy Settings
N#define LM_LINK_POLICY_DISABLE_ALL_LM_MODES  0
N#define LM_LINK_POLICY_ENABLE_ROLE_SWITCH    1
N#define LM_LINK_POLICY_ENABLE_HOLD_MODE      2
N#define LM_LINK_POLICY_ENABLE_SNIFF_MODE     4
N
N// ACL Connection Modes
N#define ACL_CONNECTION_MODE_ACTIVE 0
N#define ACL_CONNECTION_MODE_HOLD   1
N#define ACL_CONNECTION_MODE_SNIFF  2
N
N/**
N * Default INQ Mode
N */
N#define GAP_IAC_GENERAL_INQUIRY 0x9E8B33L // General/Unlimited Inquiry Access Code (GIAC)
N#define GAP_IAC_LIMITED_INQUIRY 0x9E8B00L // Limited Dedicated Inquiry Access Code (LIAC)
N
N/**
N * SSP IO Capabilities
N */
N#define SSP_IO_CAPABILITY_DISPLAY_ONLY   0
N#define SSP_IO_CAPABILITY_DISPLAY_YES_NO 1
N#define SSP_IO_CAPABILITY_KEYBOARD_ONLY  2
N#define SSP_IO_CAPABILITY_NO_INPUT_NO_OUTPUT 3
N#define SSP_IO_CAPABILITY_UNKNOWN 0xff
N
N
N/**
N * SSP Authentication Requirements, see IO Capability Request Reply Commmand 
N */
N
N// Numeric comparison with automatic accept allowed.
N#define SSP_IO_AUTHREQ_MITM_PROTECTION_NOT_REQUIRED_NO_BONDING 0x00
N
N// Use IO Capabilities to deter- mine authentication procedure
N#define SSP_IO_AUTHREQ_MITM_PROTECTION_REQUIRED_NO_BONDING 0x01
N
N// Numeric compar- ison with automatic accept allowed.
N#define SSP_IO_AUTHREQ_MITM_PROTECTION_NOT_REQUIRED_DEDICATED_BONDING 0x02
N
N// Use IO Capabilities to determine authentication procedure
N#define SSP_IO_AUTHREQ_MITM_PROTECTION_REQUIRED_DEDICATED_BONDING 0x03
N
N// Numeric Compari- son with automatic accept allowed.
N#define SSP_IO_AUTHREQ_MITM_PROTECTION_NOT_REQUIRED_GENERAL_BONDING 0x04
N
N// Use IO capabilities to determine authentication procedure.
N#define SSP_IO_AUTHREQ_MITM_PROTECTION_REQUIRED_GENERAL_BONDING 0x05
N
N
N// OGFs
N#define OGF_LINK_CONTROL          0x01
N#define OGF_LINK_POLICY           0x02
N#define OGF_CONTROLLER_BASEBAND   0x03
N#define OGF_INFORMATIONAL_PARAMETERS 0x04
N#define OGF_STATUS_PARAMETERS     0x05
N#define OGF_TESTING               0x06
N#define OGF_LE_CONTROLLER 0x08
N#define OGF_VENDOR  0x3f
N
N
N
N
N/** 
N * L2CAP Layer
N */
N
N#define L2CAP_HEADER_SIZE 4
N
N// minimum signaling MTU
N#define L2CAP_MINIMAL_MTU 48
N#define L2CAP_DEFAULT_MTU 672
N    
N// Minimum/default MTU
N#define L2CAP_LE_DEFAULT_MTU  23
N
N// L2CAP Fixed Channel IDs    
N#define L2CAP_CID_SIGNALING                        0x0001
N#define L2CAP_CID_CONNECTIONLESS_CHANNEL           0x0002
N#define L2CAP_CID_ATTRIBUTE_PROTOCOL               0x0004
N#define L2CAP_CID_SIGNALING_LE                     0x0005
N#define L2CAP_CID_SECURITY_MANAGER_PROTOCOL        0x0006
N
N/**
N * SDP Protocol
N */
N
N// Device Vendor ID Sources
N#define DEVICE_ID_VENDOR_ID_SOURCE_BLUETOOTH 0x0001
N#define DEVICE_ID_VENDOR_ID_SOURCE_USB       0x0002
N
N// OBEX
N#define SDP_vCard_2_1       0x01
N#define SDP_vCard_3_0       0x02
N#define SDP_vCal_1_0        0x03
N#define SDP_iCal_2_0        0x04
N#define SDP_vNote           0x05
N#define SDP_vMessage        0x06
N#define SDP_OBEXFileTypeAny 0xFF
N
N/**
N * RFCOMM Protocol
N */
N
N// Line Status
N#define LINE_STATUS_NO_ERROR       0x00
N#define LINE_STATUS_OVERRUN_ERROR  0x03
N#define LINE_STATUS_PARITY_ERORR   0x05
N#define LINE_STATUS_FRAMING_ERROR  0x09
N
N// Modem Status Flags
N#define MODEM_STATUS_FC   0x02
N#define MODEM_STATUS_RTC  0x04
N#define MODEM_STATUS_RTR  0x08
N#define MODEM_STATUS_IC   0x40
N#define MODEM_STATUS_DV   0x80
N
Ntypedef enum rpn_baud {
N    RPN_BAUD_2400 = 0,
N    RPN_BAUD_4800,
N    RPN_BAUD_7200,
N    RPN_BAUD_9600,
N    RPN_BAUD_19200,
N    RPN_BAUD_38400,
N    RPN_BAUD_57600,
N    RPN_BAUD_115200,
N    RPN_BAUD_230400
N} rpn_baud_t;
N
Ntypedef enum rpn_data_bits {
N    RPN_DATA_BITS_5 = 0,
N    RPN_DATA_BITS_6 = 0,
N    RPN_DATA_BITS_7 = 0,
N    RPN_DATA_BITS_8 = 0
N} rpn_data_bits_t;
N
Ntypedef enum rpn_stop_bits {
N    RPN_STOP_BITS_1_0 = 0,
N    RPN_STOP_BITS_1_5 
N} rpn_stop_bits_t;
N
Ntypedef enum rpn_parity {
N    RPN_PARITY_NONE  = 0,
N    RPN_PARITY_ODD   = 1,
N    RPN_PARITY_EVEN  = 3,
N    RPN_PARITY_MARK  = 5,
N    RPN_PARITY_SPACE = 7, 
N} rpn_parity_t;
N
Ntypedef enum rpn_flow_control {
N    RPN_FLOW_CONTROL_XONXOFF_ON_INPUT  = 1 << 0,
N    RPN_FLOW_CONTROL_XONXOFF_ON_OUTPUT = 1 << 1,
N    RPN_FLOW_CONTROL_RTR_ON_INPUT  = 1 << 2,
N    RPN_FLOW_CONTROL_RTR_ON_OUTPUT = 1 << 3,
N    RPN_FLOW_CONTROL_RTC_ON_INPUT  = 1 << 4,
N    RPN_FLOW_CONTROL_RTC_ON_OUTPUT = 1 << 5,
N} rpn_flow_control_t;
N
N#define RPN_PARAM_MASK_0_BAUD             0x01
N#define RPN_PARAM_MASK_0_DATA_BITS        0x02
N#define RPN_PARAM_MASK_0_STOP_BITS        0x04
N#define RPN_PARAM_MASK_0_PARITY           0x08       
N#define RPN_PARAM_MASK_0_PARITY_TYPE      0x10
N#define RPN_PARAM_MASK_0_XON_CHAR         0x20
N#define RPN_PARAM_MASK_0_XOFF_CHAR        0x40
N#define RPN_PARAM_MASK_0_RESERVED         0x80
N
N// @note: values are identical to rpn_flow_control_t
N#define RPN_PARAM_MASK_1_XONOFF_ON_INPUT  0x01
N#define RPN_PARAM_MASK_1_XONOFF_ON_OUTPUT 0x02
N#define RPN_PARAM_MASK_1_RTR_ON_INPUT     0x04
N#define RPN_PARAM_MASK_1_RTR_ON_OUTPUT    0x08       
N#define RPN_PARAM_MASK_1_RTC_ON_INPUT     0x10
N#define RPN_PARAM_MASK_1_RTC_ON_OUTPUT    0x20
N#define RPN_PARAM_MASK_1_RESERVED_0       0x40
N#define RPN_PARAM_MASK_1_RESERVED_1       0x80
N
N/**
N * BNEP Protocol
N */
N
N#ifndef ETHER_ADDR_LEN
N#define ETHER_ADDR_LEN 6
N#endif
N
N#ifndef ETHERTYPE_VLAN
N#define ETHERTYPE_VLAN                                  0x8100 /* IEEE 802.1Q VLAN tag */
N#endif
N    
N#define BNEP_MTU_MIN                                    1691
N
N
N/**
N * PAN Profile
N */
N
Ntypedef enum {
N    BNEP_SECURITY_NONE = 0x0000,
N    BNEP_SECURITY_SERVICE_LEVEL_ENFORCED,
N    BNEP_SECURITY_802_1X
N} security_description_t;
N
Ntypedef enum {
N    PAN_NET_ACCESS_TYPE_PSTN = 0x0000,
N    PAN_NET_ACCESS_TYPE_ISDN,
N    PAN_NET_ACCESS_TYPE_DSL,
N    PAN_NET_ACCESS_TYPE_CABLE_MODEM,
N    PAN_NET_ACCESS_TYPE_10MB_ETHERNET,
N    PAN_NET_ACCESS_TYPE_100MB_ETHERNET,
N    PAN_NET_ACCESS_TYPE_4MB_TOKEN_RING,
N    PAN_NET_ACCESS_TYPE_16MB_TOKEN_RING,
N    PAN_NET_ACCESS_TYPE_100MB_TOKEN_RING,
N    PAN_NET_ACCESS_TYPE_FDDI,
N    PAN_NET_ACCESS_TYPE_GSM,
N    PAN_NET_ACCESS_TYPE_CDMA,
N    PAN_NET_ACCESS_TYPE_GPRS,
N    PAN_NET_ACCESS_TYPE_3G,
N    PAN_NET_ACCESS_TYPE_CELULAR,
N    PAN_NET_ACCESS_TYPE_OTHER = 0xFFFE,
N    PAN_NET_ACCESS_TYPE_NONE
N} net_access_type_t;
N
N/**
N * ATT
N */
N
N// Minimum/default MTU
N#define ATT_DEFAULT_MTU               23
N
N// MARK: ATT Error Codes
N#define ATT_ERROR_SUCCESS                          0x00
N#define ATT_ERROR_INVALID_HANDLE                   0x01
N#define ATT_ERROR_READ_NOT_PERMITTED               0x02
N#define ATT_ERROR_WRITE_NOT_PERMITTED              0x03
N#define ATT_ERROR_INVALID_PDU                      0x04
N#define ATT_ERROR_INSUFFICIENT_AUTHENTICATION      0x05
N#define ATT_ERROR_REQUEST_NOT_SUPPORTED            0x06
N#define ATT_ERROR_INVALID_OFFSET                   0x07
N#define ATT_ERROR_INSUFFICIENT_AUTHORIZATION       0x08
N#define ATT_ERROR_PREPARE_QUEUE_FULL               0x09
N#define ATT_ERROR_ATTRIBUTE_NOT_FOUND              0x0a
N#define ATT_ERROR_ATTRIBUTE_NOT_LONG               0x0b
N#define ATT_ERROR_INSUFFICIENT_ENCRYPTION_KEY_SIZE 0x0c
N#define ATT_ERROR_INVALID_ATTRIBUTE_VALUE_LENGTH   0x0d
N#define ATT_ERROR_UNLIKELY_ERROR                   0x0e
N#define ATT_ERROR_INSUFFICIENT_ENCRYPTION          0x0f
N#define ATT_ERROR_UNSUPPORTED_GROUP_TYPE           0x10
N#define ATT_ERROR_INSUFFICIENT_RESOURCES           0x11
N
N// MARK: ATT Error Codes defined by BTstack
N#define ATT_ERROR_HCI_DISCONNECT_RECEIVED          0x1f
N#define ATT_ERROR_BONDING_INFORMATION_MISSING      0x70
N#define ATT_ERROR_DATA_MISMATCH                    0x7e
N#define ATT_ERROR_TIMEOUT                          0x7F
N#define ATT_ERROR_WRITE_RESPONSE_PENDING           0x100
N
N// MARK: ATT Error Codes from Cycling Power Service spec
N#define CYCLING_POWER_ERROR_CODE_INAPPROPRIATE_CONNECTION_PARAMETERS                          0x80
N#define CYCLING_POWER_ERROR_CODE_PROCEDURE_ALREADY_IN_PROGRESS                                0xFE
N#define CYCLING_POWER_ERROR_CODE_CCC_DESCRIPTOR_IMPROPERLY_CONFIGURED                         0xFD
N
N// MARK: ATT Error Codes from Cycling Speed and Cadence Service spec
N#define CYCLING_SPEED_AND_CADENCE_ERROR_CODE_PROCEDURE_ALREADY_IN_PROGRESS                    0x80
N#define CYCLING_SPEED_AND_CADENCE_ERROR_CODE_CCC_DESCRIPTOR_IMPROPERLY_CONFIGURED             0x81
N
N
N// MARK: Attribute Property Flags
N#define ATT_PROPERTY_BROADCAST           0x01
N#define ATT_PROPERTY_READ                0x02
N#define ATT_PROPERTY_WRITE_WITHOUT_RESPONSE 0x04
N#define ATT_PROPERTY_WRITE               0x08
N#define ATT_PROPERTY_NOTIFY              0x10
N#define ATT_PROPERTY_INDICATE            0x20
N#define ATT_PROPERTY_AUTHENTICATED_SIGNED_WRITE 0x40
N#define ATT_PROPERTY_EXTENDED_PROPERTIES 0x80
N
N// MARK: Attribute Property Flag, BTstack extension
N// value is asked from client
N#define ATT_PROPERTY_DYNAMIC             0x100
N
N// Security levels
N#define ATT_SECURITY_NONE 0
N#define ATT_SECURITY_ENCRYPTED 1
N#define ATT_SECURITY_AUTHENTICATED 2
N#define ATT_SECURITY_AUTHORIZED 3
N#define ATT_SECURITY_AUTHENTICATED_SC 4
N
N// ATT Transaction Timeout of 30 seconds for Command/Response or Indication/Confirmation
N#define ATT_TRANSACTION_TIMEOUT_MS     30000
N
N#define ATT_TRANSACTION_MODE_NONE      0x0
N#define ATT_TRANSACTION_MODE_ACTIVE    0x1
N#define ATT_TRANSACTION_MODE_EXECUTE   0x2
N#define ATT_TRANSACTION_MODE_CANCEL    0x3
N#define ATT_TRANSACTION_MODE_VALIDATE  0x4
N
N// MARK: GATT UUIDs
N#define GATT_PRIMARY_SERVICE_UUID                   0x2800
N#define GATT_SECONDARY_SERVICE_UUID                 0x2801
N#define GATT_INCLUDE_SERVICE_UUID                   0x2802
N#define GATT_CHARACTERISTICS_UUID                   0x2803
N#define GATT_CHARACTERISTIC_EXTENDED_PROPERTIES     0x2900
N#define GATT_CHARACTERISTIC_USER_DESCRIPTION        0x2901
N#define GATT_CLIENT_CHARACTERISTICS_CONFIGURATION   0x2902
N#define GATT_SERVER_CHARACTERISTICS_CONFIGURATION   0x2903
N#define GATT_CHARACTERISTIC_PRESENTATION_FORMAT     0x2904
N#define GATT_CHARACTERISTIC_AGGREGATE_FORMAT        0x2905
N
N#define GATT_CLIENT_CHARACTERISTICS_CONFIGURATION_NONE          0
N#define GATT_CLIENT_CHARACTERISTICS_CONFIGURATION_NOTIFICATION  1
N#define GATT_CLIENT_CHARACTERISTICS_CONFIGURATION_INDICATION    2
N
N#define GATT_CLIENT_ANY_CONNECTION      0xffff
N#define GATT_CLIENT_ANY_VALUE_HANDLE    0x0000
N
N// GAP Service and Characteristics
N#define GAP_SERVICE_UUID               0x1800
N#define GAP_DEVICE_NAME_UUID           0x2a00
N#define GAP_APPEARANCE_UUID            0x2a01
N#define GAP_PERIPHERAL_PRIVACY_FLAG    0x2a02
N#define GAP_RECONNECTION_ADDRESS_UUID  0x2a03
N#define GAP_PERIPHERAL_PREFERRED_CONNECTION_PARAMETERS_UUID 0x2a04
N#define GAP_SERVICE_CHANGED            0x2a05
N
N// Bluetooth GATT types
N
Ntypedef struct {
N    uint16_t year;      // 0 - year  is not known; or [1582,9999]
N    uint8_t  month;     // 0 - month is not known; or [1,12]
N    uint8_t  day;       // 0 - day   is not known; or [1,31]
N    uint8_t  hours;     // [0,23]
N    uint8_t  minutes;   // [0,59]
N    uint8_t  seconds;   // [0,59]
N} gatt_date_time_t;
N
N/**
N * SM - LE Security Manager 
N */
N// Bluetooth Spec definitions
Ntypedef enum {
N    SM_CODE_PAIRING_REQUEST = 0X01,
N    SM_CODE_PAIRING_RESPONSE,
N    SM_CODE_PAIRING_CONFIRM,
N    SM_CODE_PAIRING_RANDOM,
N    SM_CODE_PAIRING_FAILED,
N    SM_CODE_ENCRYPTION_INFORMATION,
N    SM_CODE_MASTER_IDENTIFICATION,
N    SM_CODE_IDENTITY_INFORMATION,
N    SM_CODE_IDENTITY_ADDRESS_INFORMATION,
N    SM_CODE_SIGNING_INFORMATION,
N    SM_CODE_SECURITY_REQUEST,
N    SM_CODE_PAIRING_PUBLIC_KEY,
N    SM_CODE_PAIRING_DHKEY_CHECK,
N    SM_CODE_KEYPRESS_NOTIFICATION,
N} SECURITY_MANAGER_COMMANDS;
N
N// IO Capability Values
Ntypedef enum {
N    IO_CAPABILITY_DISPLAY_ONLY = 0,
N    IO_CAPABILITY_DISPLAY_YES_NO,
N    IO_CAPABILITY_KEYBOARD_ONLY,
N    IO_CAPABILITY_NO_INPUT_NO_OUTPUT,
N    IO_CAPABILITY_KEYBOARD_DISPLAY, // not used by secure simple pairing
N} io_capability_t;
N
N// Authentication requirement flags
N#define SM_AUTHREQ_NO_BONDING        0x00
N#define SM_AUTHREQ_BONDING           0x01
N#define SM_AUTHREQ_MITM_PROTECTION   0x04
N#define SM_AUTHREQ_SECURE_CONNECTION 0x08
N#define SM_AUTHREQ_KEYPRESS          0x10
N#define SM_AUTHREQ_CT2               0x20
N
N// Key distribution flags used by spec
N#define SM_KEYDIST_ENC_KEY  0x01
N#define SM_KEYDIST_ID_KEY   0x02
N#define SM_KEYDIST_SIGN     0x04
N#define SM_KEYDIST_LINK_KEY 0x08
N
N// Key distribution flags used internally
N#define SM_KEYDIST_FLAG_ENCRYPTION_INFORMATION       0x01
N#define SM_KEYDIST_FLAG_MASTER_IDENTIFICATION        0x02
N#define SM_KEYDIST_FLAG_IDENTITY_INFORMATION         0x04
N#define SM_KEYDIST_FLAG_IDENTITY_ADDRESS_INFORMATION 0x08
N#define SM_KEYDIST_FLAG_SIGNING_IDENTIFICATION       0x10
N
N// STK Generation Methods
N#define SM_STK_GENERATION_METHOD_JUST_WORKS          0x01
N#define SM_STK_GENERATION_METHOD_OOB                 0x02
N#define SM_STK_GENERATION_METHOD_PASSKEY             0x04
N#define SM_STK_GENERATION_METHOD_NUMERIC_COMPARISON  0x08
N
N// Pairing Failed Reasons
N#define SM_REASON_RESERVED                     0x00
N#define SM_REASON_PASSKEY_ENTRY_FAILED         0x01
N#define SM_REASON_OOB_NOT_AVAILABLE            0x02
N#define SM_REASON_AUTHENTHICATION_REQUIREMENTS 0x03
N#define SM_REASON_CONFIRM_VALUE_FAILED         0x04
N#define SM_REASON_PAIRING_NOT_SUPPORTED        0x05
N#define SM_REASON_ENCRYPTION_KEY_SIZE          0x06
N#define SM_REASON_COMMAND_NOT_SUPPORTED        0x07
N#define SM_REASON_UNSPECIFIED_REASON           0x08
N#define SM_REASON_REPEATED_ATTEMPTS            0x09
N#define SM_REASON_INVALID_PARAMETERS           0x0a
N#define SM_REASON_DHKEY_CHECK_FAILED           0x0b
N#define SM_REASON_NUMERIC_COMPARISON_FAILED    0x0c
N
N// also, invalid parameters
N// and reserved
N
N// Keypress Notifications
N#define SM_KEYPRESS_PASSKEY_ENTRY_STARTED      0x00
N#define SM_KEYPRESS_PASSKEY_DIGIT_ENTERED      0x01
N#define SM_KEYPRESS_PASSKEY_DIGIT_ERASED       0x02
N#define SM_KEYPRESS_PASSKEY_CLEARED            0x03
N#define SM_KEYPRESS_PASSKEY_ENTRY_COMPLETED    0x04
N
N
N#endif
L 55 "..\..\..\..\src\btstack_util.h" 2
N#include "btstack_defines.h"
L 1 "..\..\..\..\src\btstack_defines.h" 1
N/*
N * Copyright (C) 2015 BlueKitchen GmbH
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions
N * are met:
N *
N * 1. Redistributions of source code must retain the above copyright
N *    notice, this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright
N *    notice, this list of conditions and the following disclaimer in the
N *    documentation and/or other materials provided with the distribution.
N * 3. Neither the name of the copyright holders nor the names of
N *    contributors may be used to endorse or promote products derived
N *    from this software without specific prior written permission.
N * 4. Any redistribution, use, or modification is done solely for
N *    personal benefit and not for any commercial purpose or for
N *    monetary gain.
N *
N * THIS SOFTWARE IS PROVIDED BY BLUEKITCHEN GMBH AND CONTRIBUTORS
N * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
N * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL MATTHIAS
N * RINGWALD OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
N * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
N * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
N * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
N * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
N * THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
N * SUCH DAMAGE.
N *
N * Please inquire about commercial licensing options at 
N * contact@bluekitchen-gmbh.com
N *
N */
N
N/**
N *
N * BTstack definitions, events, and error codes 
N *
N */
N
N#ifndef BTSTACK_DEFINES_H
N#define BTSTACK_DEFINES_H
N#include <stdint.h>
N
N#include "btstack_linked_list.h" 
L 1 "..\..\..\..\src\btstack_linked_list.h" 1
N/*
N * Copyright (C) 2014 BlueKitchen GmbH
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions
N * are met:
N *
N * 1. Redistributions of source code must retain the above copyright
N *    notice, this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright
N *    notice, this list of conditions and the following disclaimer in the
N *    documentation and/or other materials provided with the distribution.
N * 3. Neither the name of the copyright holders nor the names of
N *    contributors may be used to endorse or promote products derived
N *    from this software without specific prior written permission.
N * 4. Any redistribution, use, or modification is done solely for
N *    personal benefit and not for any commercial purpose or for
N *    monetary gain.
N *
N * THIS SOFTWARE IS PROVIDED BY BLUEKITCHEN GMBH AND CONTRIBUTORS
N * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
N * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL MATTHIAS
N * RINGWALD OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
N * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
N * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
N * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
N * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
N * THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
N * SUCH DAMAGE.
N *
N * Please inquire about commercial licensing options at 
N * contact@bluekitchen-gmbh.com
N *
N */
N
N/**
N * @title Linked List
N *
N */
N
N#ifndef BTSTACK_LINKED_LIST_H
N#define BTSTACK_LINKED_LIST_H
N
N#include "btstack_bool.h"
L 1 "..\..\..\..\src\btstack_bool.h" 1
N/*
N * Copyright (C) 2019 BlueKitchen GmbH
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions
N * are met:
N *
N * 1. Redistributions of source code must retain the above copyright
N *    notice, this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright
N *    notice, this list of conditions and the following disclaimer in the
N *    documentation and/or other materials provided with the distribution.
N * 3. Neither the name of the copyright holders nor the names of
N *    contributors may be used to endorse or promote products derived
N *    from this software without specific prior written permission.
N * 4. Any redistribution, use, or modification is done solely for
N *    personal benefit and not for any commercial purpose or for
N *    monetary gain.
N *
N * THIS SOFTWARE IS PROVIDED BY BLUEKITCHEN GMBH AND CONTRIBUTORS
N * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
N * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL MATTHIAS
N * RINGWALD OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
N * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
N * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
N * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
N * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
N * THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
N * SUCH DAMAGE.
N *
N * Please inquire about commercial licensing options at 
N * contact@bluekitchen-gmbh.com
N *
N */
N
N/*
N * btstack_bool.h
N *
N * Provide bool type */
N
N#ifndef BTSTACK_BOOL_H
N#define BTSTACK_BOOL_H
N
N#if !defined(__cplusplus)
X#if !0L
N
N//
N// Check for C99
N// see: https://sourceforge.net/p/predef/wiki/Standards/
N//
N#if defined(__STDC__)
X#if 1L
N#   if defined(__STDC_VERSION__)
X#   if 1L
N#     if (__STDC_VERSION__ >= 199901L)
X#     if (199409L >= 199901L)
S#       define PREDEF_STANDARD_C_1999
N#     endif
N#  endif
N#endif /* __STDC__ */
N
N// define boolean type - required for MISRA-C 2012 Essential Type System
N#ifdef PREDEF_STANDARD_C_1999
S
S// use <stdbool.h> if C99 or higher
S#   include <stdbool.h>
S
N#else /* PREDEF_STANDARD_C_1999 */
N
N// backport for pre-c99 compilers
N#define bool unsigned char
N#define false 0
N#define true 1
N
N#endif /* PREDEF_STANDARD_C_1999 */
N
N#endif /* __cplusplus */
N
N#endif /* BTSTACK_BOOL_H */
L 47 "..\..\..\..\src\btstack_linked_list.h" 2
N
N#if defined __cplusplus
X#if 0L
Sextern "C" {
N#endif
N
N/* API_START */
N	
Ntypedef struct btstack_linked_item {
N    struct btstack_linked_item *next; // <-- next element in list, or NULL
N} btstack_linked_item_t;
N
Ntypedef btstack_linked_item_t * btstack_linked_list_t;
N
Ntypedef struct {
N	int advance_on_next;
N    btstack_linked_item_t * prev;	// points to the item before the current one
N    btstack_linked_item_t * curr;	// points to the current item (to detect item removal)
N} btstack_linked_list_iterator_t;
N
N
N/**
N * @brief Test if list is empty.
N * @param list
N * @returns true if list is empty
N */
Nbool btstack_linked_list_empty(btstack_linked_list_t * list);
Xunsigned char btstack_linked_list_empty(btstack_linked_list_t * list);
N
N/**
N * @brief Add item to list as first element.
N * @param list
N * @param item
N * @returns true if item was added, false if item already in list
N */
Nbool btstack_linked_list_add(btstack_linked_list_t * list, btstack_linked_item_t *item);
Xunsigned char btstack_linked_list_add(btstack_linked_list_t * list, btstack_linked_item_t *item);
N
N/**
N * @brief Add item to list as last element.
N * @param list
N * @param item
N * @returns true if item was added, false if item already in list
N */
Nbool btstack_linked_list_add_tail(btstack_linked_list_t * list, btstack_linked_item_t *item);
Xunsigned char btstack_linked_list_add_tail(btstack_linked_list_t * list, btstack_linked_item_t *item);
N
N/**
N * @brief Pop (get + remove) first element.
N * @param list
N * @returns first element or NULL if list is empty
N */
Nbtstack_linked_item_t * btstack_linked_list_pop(btstack_linked_list_t * list);
N
N/**
N * @brief Remove item from list
N * @param list
N * @param item
N * @returns true if item was removed, false if it is no't in list
N */
Nbool btstack_linked_list_remove(btstack_linked_list_t * list, btstack_linked_item_t *item);
Xunsigned char btstack_linked_list_remove(btstack_linked_list_t * list, btstack_linked_item_t *item);
N
N/**
N * @brief Get first element.
N * @param list
N * @returns first element or NULL if list is empty
N */
Nbtstack_linked_item_t * btstack_linked_list_get_first_item(btstack_linked_list_t * list);
N
N/**
N * @brief Get last element.
N * @param list
N * @returns first element or NULL if list is empty
N */
Nbtstack_linked_item_t * btstack_linked_list_get_last_item(btstack_linked_list_t * list);   
N
N/**
N * @brief Counts number of items in list
N * @returns number of items in list
N */
Nint btstack_linked_list_count(btstack_linked_list_t * list);
N
N
N
N/**
N * @brief Initialize Linked List Iterator
N * @note robust against removal of current element by btstack_linked_list_remove
N * @param it iterator context
N * @param list
N */
Nvoid btstack_linked_list_iterator_init(btstack_linked_list_iterator_t * it, btstack_linked_list_t * list);
N
N/**
N * @brief Has next element
N * @param it iterator context
N * @returns true if next element is available
N */
Nbool btstack_linked_list_iterator_has_next(btstack_linked_list_iterator_t * it);
Xunsigned char btstack_linked_list_iterator_has_next(btstack_linked_list_iterator_t * it);
N
N/**
N * @brief Get next list eleemnt
N * @param it iterator context
N * @returns list element
N */
Nbtstack_linked_item_t * btstack_linked_list_iterator_next(btstack_linked_list_iterator_t * it);
N
N/**
N * @brief Remove current list element from list
N * @param it iterator context
N */
Nvoid btstack_linked_list_iterator_remove(btstack_linked_list_iterator_t * it);
N
N/* API_END */
N
Nvoid test_linked_list(void);
N
N
N#if defined __cplusplus
X#if 0L
S}
N#endif
N
N#endif // BTSTACK_LINKED_LIST_H
L 49 "..\..\..\..\src\btstack_defines.h" 2
N
N// UNUSED macro
N#ifndef UNUSED
N#define UNUSED(x) (void)(sizeof(x))
N#endif
N
N// TYPES
N
N// packet handler
Ntypedef void (*btstack_packet_handler_t) (uint8_t packet_type, uint16_t channel, uint8_t *packet, uint16_t size);
N
N// packet callback supporting multiple registrations
Ntypedef struct {
N    btstack_linked_item_t    item;
N    btstack_packet_handler_t callback;
N} btstack_packet_callback_registration_t;
N
N// context callback supporting multiple registrations
Ntypedef struct {
N  btstack_linked_item_t * item;
N  void (*callback)(void * context);
N  void * context;
N} btstack_context_callback_registration_t;
N
N/**
N * @brief 128 bit key used with AES128 in Security Manager
N */
Ntypedef uint8_t sm_key_t[16];
N
N// DEFINES
N
N// hci con handles (12 bit): 0x0000..0x0fff
N#define HCI_CON_HANDLE_INVALID 0xffff
N
N
N#define DAEMON_EVENT_PACKET     0x05
N    
N// L2CAP data
N#define L2CAP_DATA_PACKET       0x06
N
N// RFCOMM data
N#define RFCOMM_DATA_PACKET      0x07
N
N// Attribute protocol data
N#define ATT_DATA_PACKET         0x08
N
N// Security Manager protocol data
N#define SM_DATA_PACKET          0x09
N
N// SDP query result - only used by daemon
N// format: type (8), record_id (16), attribute_id (16), attribute_length (16), attribute_value (max 1k)
N#define SDP_CLIENT_PACKET       0x0a
N
N// BNEP data
N#define BNEP_DATA_PACKET        0x0b
N
N// Unicast Connectionless Data
N#define UCD_DATA_PACKET         0x0c
N
N// GOEP data
N#define GOEP_DATA_PACKET        0x0d
N
N// PBAP data
N#define PBAP_DATA_PACKET        0x0e
N
N// AVRCP browsing data
N#define AVRCP_BROWSING_DATA_PACKET     0x0f
N
N// MAP data
N#define MAP_DATA_PACKET        0x10
N
N// Mesh Provisioning PDU
N#define PROVISIONING_DATA_PACKET 0x11
N
N// Mesh Proxy PDU
N#define MESH_PROXY_DATA_PACKET   0x11
N
N// Mesh Network PDU
N#define MESH_NETWORK_PACKET      0x12
N
N// Mesh Network PDU
N#define MESH_BEACON_PACKET       0x13
N
N// debug log messages
N#define LOG_MESSAGE_PACKET      0xfc
N
N
N// DAEMON COMMANDS
N
N#define OGF_BTSTACK 0x3d
N
N// cmds for BTstack 
N// get state: @returns HCI_STATE
N#define BTSTACK_GET_STATE                                  0x01
N
N// set power mode: param HCI_POWER_MODE
N#define BTSTACK_SET_POWER_MODE                             0x02
N
N// set capture mode: param on
N#define BTSTACK_SET_ACL_CAPTURE_MODE                       0x03
N
N// get BTstack version
N#define BTSTACK_GET_VERSION                                0x04
N
N// get system Bluetooth state
N#define BTSTACK_GET_SYSTEM_BLUETOOTH_ENABLED               0x05
N
N// set system Bluetooth state
N#define BTSTACK_SET_SYSTEM_BLUETOOTH_ENABLED               0x06
N
N// enable inquiry scan for this client
N#define BTSTACK_SET_DISCOVERABLE                           0x07
N
N// set global Bluetooth state
N#define BTSTACK_SET_BLUETOOTH_ENABLED                      0x08
N
N// create l2cap channel: param bd_addr(48), psm (16)
N#define L2CAP_CREATE_CHANNEL                               0x20
N
N// disconnect l2cap disconnect, param channel(16), reason(8)
N#define L2CAP_DISCONNECT                                   0x21
N
N// register l2cap service: param psm(16), mtu (16)
N#define L2CAP_REGISTER_SERVICE                             0x22
N
N// unregister l2cap disconnect, param psm(16)
N#define L2CAP_UNREGISTER_SERVICE                           0x23
N
N// accept connection param bd_addr(48), dest cid (16)
N#define L2CAP_ACCEPT_CONNECTION                            0x24
N
N// decline l2cap disconnect,param bd_addr(48), dest cid (16), reason(8)
N#define L2CAP_DECLINE_CONNECTION                           0x25
N
N// create l2cap channel: param bd_addr(48), psm (16), mtu (16)
N#define L2CAP_CREATE_CHANNEL_MTU                           0x26
N
N// register SDP Service Record: service record (size)
N#define SDP_REGISTER_SERVICE_RECORD                        0x30
N
N// unregister SDP Service Record
N#define SDP_UNREGISTER_SERVICE_RECORD                      0x31
N
N// Get remote RFCOMM services
N#define SDP_CLIENT_QUERY_RFCOMM_SERVICES                   0x32
N
N// Get remote SDP services
N#define SDP_CLIENT_QUERY_SERVICES                          0x33
N
N// RFCOMM "HCI" Commands
N#define RFCOMM_CREATE_CHANNEL       0x40
N#define RFCOMM_DISCONNECT     0x41
N#define RFCOMM_REGISTER_SERVICE     0x42
N#define RFCOMM_UNREGISTER_SERVICE   0x43
N#define RFCOMM_ACCEPT_CONNECTION    0x44
N#define RFCOMM_DECLINE_CONNECTION   0x45
N#define RFCOMM_PERSISTENT_CHANNEL   0x46
N#define RFCOMM_CREATE_CHANNEL_WITH_CREDITS   0x47
N#define RFCOMM_REGISTER_SERVICE_WITH_CREDITS 0x48
N#define RFCOMM_GRANT_CREDITS                 0x49
N    
N// GAP Classic 0x50
N#define GAP_DISCONNECT              0x50
N
N// GAP LE      0x60  
N#define GAP_LE_SCAN_START           0x60
N#define GAP_LE_SCAN_STOP            0x61
N#define GAP_LE_CONNECT              0x62
N#define GAP_LE_CONNECT_CANCEL       0x63
N#define GAP_LE_SET_SCAN_PARAMETERS  0x64
N
N// GATT (Client) 0x70
N#define GATT_DISCOVER_ALL_PRIMARY_SERVICES                       0x70
N#define GATT_DISCOVER_PRIMARY_SERVICES_BY_UUID16                 0x71
N#define GATT_DISCOVER_PRIMARY_SERVICES_BY_UUID128                0x72
N#define GATT_FIND_INCLUDED_SERVICES_FOR_SERVICE                  0x73
N#define GATT_DISCOVER_CHARACTERISTICS_FOR_SERVICE                0x74
N#define GATT_DISCOVER_CHARACTERISTICS_FOR_SERVICE_BY_UUID128     0x75
N#define GATT_DISCOVER_CHARACTERISTIC_DESCRIPTORS                 0x76
N#define GATT_READ_VALUE_OF_CHARACTERISTIC                        0x77
N#define GATT_READ_LONG_VALUE_OF_CHARACTERISTIC                   0x78
N#define GATT_WRITE_VALUE_OF_CHARACTERISTIC_WITHOUT_RESPONSE      0x79
N#define GATT_WRITE_VALUE_OF_CHARACTERISTIC                       0x7A
N#define GATT_WRITE_LONG_VALUE_OF_CHARACTERISTIC                  0x7B
N#define GATT_RELIABLE_WRITE_LONG_VALUE_OF_CHARACTERISTIC         0x7C
N#define GATT_READ_CHARACTERISTIC_DESCRIPTOR                      0X7D
N#define GATT_READ_LONG_CHARACTERISTIC_DESCRIPTOR                 0X7E
N#define GATT_WRITE_CHARACTERISTIC_DESCRIPTOR                     0X7F
N#define GATT_WRITE_LONG_CHARACTERISTIC_DESCRIPTOR                0X80
N#define GATT_WRITE_CLIENT_CHARACTERISTIC_CONFIGURATION           0X81
N#define GATT_GET_MTU                                             0x82
N
N// SM 0x90
N#define SM_SET_AUTHENTICATION_REQUIREMENTS 0x90
N#define SM_SET_IO_CAPABILITIES             0x92
N#define SM_BONDING_DECLINE                 0x93
N#define SM_JUST_WORKS_CONFIRM              0x94
N#define SM_NUMERIC_COMPARISON_CONFIRM      0x95
N#define SM_PASSKEY_INPUT                   0x96
N
N// ATT
N
N// ..
N// Internal properties reuse some GATT Characteristic Properties fields
N#define ATT_DB_VERSION                                     0x01
N
N// EVENTS
N
N// Events from host controller to host
N
N/**
N * @format 1
N * @param status
N */
N#define HCI_EVENT_INQUIRY_COMPLETE                         0x01
N
N/** 
N * @format 1B11132
N * @param num_responses
N * @param bd_addr
N * @param page_scan_repetition_mode
N * @param reserved1
N * @param reserved2
N * @param class_of_device
N * @param clock_offset
N */
N#define HCI_EVENT_INQUIRY_RESULT                           0x02
N
N/**
N * @format 12B11
N * @param status
N * @param connection_handle
N * @param bd_addr
N * @param link_type
N * @param encryption_enabled
N */
N#define HCI_EVENT_CONNECTION_COMPLETE                      0x03
N/**
N * @format B31
N * @param bd_addr
N * @param class_of_device
N * @param link_type
N */
N#define HCI_EVENT_CONNECTION_REQUEST                       0x04
N/**
N * @format 121
N * @param status
N * @param connection_handle
N * @param reason 
N */
N#define HCI_EVENT_DISCONNECTION_COMPLETE                   0x05
N/**
N * @format 12
N * @param status
N * @param connection_handle
N */
N#define HCI_EVENT_AUTHENTICATION_COMPLETE                 0x06
N
N// HCI_EVENT_AUTHENTICATION_COMPLETE_EVENT is deprecated, use HCI_EVENT_AUTHENTICATION_COMPLETE instead
N#define HCI_EVENT_AUTHENTICATION_COMPLETE_EVENT HCI_EVENT_AUTHENTICATION_COMPLETE
N
N/**
N * @format 1BN
N * @param status
N * @param bd_addr
N * @param remote_name
N */
N#define HCI_EVENT_REMOTE_NAME_REQUEST_COMPLETE             0x07
N/**
N * @format 121
N * @param status
N * @param connection_handle
N * @param encryption_enabled 
N */
N#define HCI_EVENT_ENCRYPTION_CHANGE                        0x08
N/**
N * @format 12
N * @param status
N * @param connection_handle
N */
N#define HCI_EVENT_CHANGE_CONNECTION_LINK_KEY_COMPLETE      0x09
N/**
N * @format 121
N * @param status
N * @param connection_handle
N * @param key_flag 
N */
N#define HCI_EVENT_MASTER_LINK_KEY_COMPLETE                 0x0A
N
N#define HCI_EVENT_READ_REMOTE_SUPPORTED_FEATURES_COMPLETE  0x0B
N
N/**
N * @format 12122
N * @param status
N * @param connection_handle
N * @param version
N * @param manufacturer_name
N * @param subversion
N */
N#define HCI_EVENT_READ_REMOTE_VERSION_INFORMATION_COMPLETE 0x0C
N
N#define HCI_EVENT_QOS_SETUP_COMPLETE                       0x0D
N
N/**
N * @format 12R
N * @param num_hci_command_packets
N * @param command_opcode
N * @param return_parameters
N */
N#define HCI_EVENT_COMMAND_COMPLETE                         0x0E
N/**
N * @format 112
N * @param status
N * @param num_hci_command_packets
N * @param command_opcode
N */
N#define HCI_EVENT_COMMAND_STATUS                           0x0F
N
N/**
N * @format 1
N * @param hardware_code
N */
N#define HCI_EVENT_HARDWARE_ERROR                           0x10
N
N#define HCI_EVENT_FLUSH_OCCURRED                           0x11
N
N/**
N * @format 1B1
N * @param status
N * @param bd_addr
N * @param role
N */
N#define HCI_EVENT_ROLE_CHANGE                              0x12
N
N// TODO: number_of_handles 1, connection_handle[H*i], hc_num_of_completed_packets[2*i]
N#define HCI_EVENT_NUMBER_OF_COMPLETED_PACKETS              0x13
N
N/**
N * @format 1H12
N * @param status
N * @param handle
N * @param mode
N * @param interval
N */
N#define HCI_EVENT_MODE_CHANGE                              0x14
N
N// TODO: num_keys, bd_addr[B*i], link_key[16 octets * i]
N#define HCI_EVENT_RETURN_LINK_KEYS                         0x15
N
N/**
N * @format B
N * @param bd_addr
N */
N#define HCI_EVENT_PIN_CODE_REQUEST                         0x16
N
N/**
N * @format B
N * @param bd_addr
N */
N#define HCI_EVENT_LINK_KEY_REQUEST                         0x17
N
N// TODO: bd_addr B, link_key 16octets, key_type 1
N#define HCI_EVENT_LINK_KEY_NOTIFICATION                    0x18
N
N/**
N * @format 1
N * @param link_type
N */
N#define HCI_EVENT_DATA_BUFFER_OVERFLOW                     0x1A
N
N/**
N * @format H1
N * @param handle
N * @param lmp_max_slots
N */
N#define HCI_EVENT_MAX_SLOTS_CHANGED                        0x1B
N
N/**
N * @format 1H2
N * @param status
N * @param handle
N * @param clock_offset
N */
N#define HCI_EVENT_READ_CLOCK_OFFSET_COMPLETE               0x1C
N
N/**
N * @format 1H2
N * @param status
N * @param handle
N * @param packet_types
N * @pnote packet_type is in plural to avoid clash with Java binding Packet.getPacketType()
N */
N#define HCI_EVENT_CONNECTION_PACKET_TYPE_CHANGED           0x1D
N
N/** 
N * @format 1B11321
N * @param num_responses
N * @param bd_addr
N * @param page_scan_repetition_mode
N * @param reserved
N * @param class_of_device
N * @param clock_offset
N * @param rssi
N */
N#define HCI_EVENT_INQUIRY_RESULT_WITH_RSSI                 0x22
N
N#define HCI_EVENT_READ_REMOTE_EXTENDED_FEATURES_COMPLETE   0x23
N
N/**
N * @format 1HB111221
N * @param status
N * @param handle
N * @param bd_addr
N * @param link_type
N * @param transmission_interval
N * @param retransmission_interval
N * @param rx_packet_length
N * @param tx_packet_length
N * @param air_mode
N */
N#define HCI_EVENT_SYNCHRONOUS_CONNECTION_COMPLETE          0x2C
N
N// TODO: serialize extended_inquiry_response and provide parser
N/** 
N * @format 1B11321
N * @param num_responses
N * @param bd_addr
N * @param page_scan_repetition_mode
N * @param reserved
N * @param class_of_device
N * @param clock_offset
N * @param rssi
N */
N#define HCI_EVENT_EXTENDED_INQUIRY_RESPONSE                0x2F
N
N /** 
N  * @format 1H
N  * @param status
N  * @param handle
N  */
N#define HCI_EVENT_ENCRYPTION_KEY_REFRESH_COMPLETE          0x30
N
N /**
N  * @format B
N  * @param bd_addr
N  */
N#define HCI_EVENT_IO_CAPABILITY_REQUEST                    0x31
N
N/**
N * @format B111
N * @param bd_addr
N * @param io_capability
N * @param oob_data_present
N * @param authentication_requirements
N */
N#define HCI_EVENT_IO_CAPABILITY_RESPONSE                   0x32
N
N/**
N * @format B4
N * @param bd_addr
N * @param numeric_value
N */
N#define HCI_EVENT_USER_CONFIRMATION_REQUEST                0x33
N
N/**
N * @format B
N * @param bd_addr
N */
N#define HCI_EVENT_USER_PASSKEY_REQUEST                     0x34
N
N/**
N * @format B
N * @param bd_addr
N */
N#define HCI_EVENT_REMOTE_OOB_DATA_REQUEST                  0x35
N
N/**
N * @format 1B
N * @param status
N * @param bd_addr
N */
N#define HCI_EVENT_SIMPLE_PAIRING_COMPLETE                  0x36
N
N/**
N * @format B4
N * @param bd_addr
N * @param numeric_value
N */
N#define HCI_EVENT_USER_PASSKEY_NOTIFICATION                0x3B
N
N/**
N * @format B1
N * @param bd_addr
N * @param notification_type
N */
N#define HCI_EVENT_KEYPRESS_NOTIFICATION                    0x3C
N
N#define HCI_EVENT_LE_META                                  0x3E
N
N// last used HCI_EVENT in 2.1 is 0x3d
N// last used HCI_EVENT in 4.1 is 0x57
N// last used HCI_EVENT in 5.2 is 0x58
N
N#define HCI_EVENT_VENDOR_SPECIFIC                          0xFF
N
N/** 
N * @format 11H11B2221
N * @param subevent_code
N * @param status
N * @param connection_handle
N * @param role
N * @param peer_address_type
N * @param peer_address
N * @param conn_interval
N * @param conn_latency
N * @param supervision_timeout
N * @param master_clock_accuracy
N */
N#define HCI_SUBEVENT_LE_CONNECTION_COMPLETE                0x01
N
N// array of advertisements, not handled by event accessor generator
N#define HCI_SUBEVENT_LE_ADVERTISING_REPORT                 0x02
N
N/**
N * @format 11H222
N * @param subevent_code
N * @param status
N * @param connection_handle
N * @param conn_interval
N * @param conn_latency
N * @param supervision_timeout
N */
N #define HCI_SUBEVENT_LE_CONNECTION_UPDATE_COMPLETE         0x03
N
N/**
N * @format 1HD2
N * @param subevent_code
N * @param connection_handle
N * @param random_number
N * @param encryption_diversifier
N */
N#define HCI_SUBEVENT_LE_READ_REMOTE_USED_FEATURES_COMPLETE 0x04
N
N/**
N * @format 1HD2
N * @param subevent_code
N * @param connection_handle
N * @param random_number
N * @param encryption_diversifier
N */
N#define HCI_SUBEVENT_LE_LONG_TERM_KEY_REQUEST              0x05
N
N/**
N * @format 1H2222
N * @param subevent_code
N * @param connection_handle
N * @param interval_min
N * @param interval_max
N * @param latency
N * @param timeout
N */
N#define HCI_SUBEVENT_LE_REMOTE_CONNECTION_PARAMETER_REQUEST 0x06
N
N/**
N * @format 1H2222
N * @param subevent_code
N * @param connection_handle
N * @param max_tx_octets
N * @param max_tx_time
N * @param max_rx_octets
N * @param max_rx_time
N */
N#define HCI_SUBEVENT_LE_DATA_LENGTH_CHANGE 0x07
N
N/**
N * @format 11QQ
N * @param subevent_code
N * @param status
N * @param dhkey_x x coordinate of P256 public key
N * @param dhkey_y y coordinate of P256 public key
N */
N#define HCI_SUBEVENT_LE_READ_LOCAL_P256_PUBLIC_KEY_COMPLETE 0x08
N /**
N * @format 11Q
N * @param subevent_code
N * @param status
N * @param dhkey Diffie-Hellman key
N */
N#define HCI_SUBEVENT_LE_GENERATE_DHKEY_COMPLETE            0x09
N
N/**
N * @format 11H11BBB2221
N * @param subevent_code
N * @param status
N * @param connection_handle
N * @param role
N * @param peer_address_type
N * @param perr_addresss
N * @param local_resolvable_private_addres
N * @param peer_resolvable_private_addres
N * @param conn_interval
N * @param conn_latency
N * @param supervision_timeout
N * @param master_clock_accuracy
N */
N#define HCI_SUBEVENT_LE_ENHANCED_CONNECTION_COMPLETE       0x0A
N
N// array of advertisements, not handled by event accessor generator
N#define HCI_SUBEVENT_LE_DIRECT_ADVERTISING_REPORT          0x0B
N
N
N/**
N * @format 1
N * @param state
N */
N#define BTSTACK_EVENT_STATE                                0x60
N
N/**
N * @format 1
N * @param number_connections
N */
N#define BTSTACK_EVENT_NR_CONNECTIONS_CHANGED               0x61
N
N/**
N * @format 
N */
N#define BTSTACK_EVENT_POWERON_FAILED                       0x62
N
N/**
N * @format 1
N * @param discoverable
N */
N#define BTSTACK_EVENT_DISCOVERABLE_ENABLED                 0x66
N
N// Daemon Events
N
N/**
N * @format 112
N * @param major
N * @param minor
N @ @param revision
N */
N#define DAEMON_EVENT_VERSION                               0x63
N
N// data: system bluetooth on/off (bool)
N/**
N * @format 1
N * param system_bluetooth_enabled
N */
N#define DAEMON_EVENT_SYSTEM_BLUETOOTH_ENABLED              0x64
N
N// data: event (8), len(8), status (8) == 0, address (48), name (1984 bits = 248 bytes)
N
N/* 
N * @format 1BT
N * @param status == 0 to match read_remote_name_request
N * @param address
N * @param name
N */
N#define DAEMON_EVENT_REMOTE_NAME_CACHED                    0x65
N
N// internal - data: event(8)
N#define DAEMON_EVENT_CONNECTION_OPENED                     0x67
N
N// internal - data: event(8)
N#define DAEMON_EVENT_CONNECTION_CLOSED                     0x68
N
N// data: event(8), len(8), local_cid(16), credits(8)
N#define DAEMON_EVENT_L2CAP_CREDITS                         0x74
N
N/**
N * @format 12
N * @param status
N * @param psm
N */
N#define DAEMON_EVENT_L2CAP_SERVICE_REGISTERED              0x75
N
N/**
N * @format 21
N * @param rfcomm_cid
N * @param credits
N */
N#define DAEMON_EVENT_RFCOMM_CREDITS                        0x84
N
N/**
N * @format 11
N * @param status
N * @param channel_id
N */
N#define DAEMON_EVENT_RFCOMM_SERVICE_REGISTERED             0x85
N
N/**
N * @format 11
N * @param status
N * @param server_channel_id
N */
N#define DAEMON_EVENT_RFCOMM_PERSISTENT_CHANNEL             0x86
N
N/**
N  * @format 14
N  * @param status
N  * @param service_record_handle
N  */
N#define DAEMON_EVENT_SDP_SERVICE_REGISTERED                0x90
N
N
N
N// additional HCI events
N
N/**
N * @brief Indicates HCI transport enters/exits Sleep mode
N * @format 1
N * @param active
N */
N#define HCI_EVENT_TRANSPORT_SLEEP_MODE                     0x69
N
N/**
N * @brief Transport ready 
N */
N#define HCI_EVENT_TRANSPORT_READY                          0x6D
N
N/**
N * @brief Outgoing packet 
N */
N#define HCI_EVENT_TRANSPORT_PACKET_SENT                    0x6E
N
N/**
N * @format B
N * @param handle
N */
N#define HCI_EVENT_SCO_CAN_SEND_NOW                         0x6F
N
N
N// L2CAP EVENTS
N    
N/**
N * @format 1BH222222111
N * @param status
N * @param address
N * @param handle
N * @param psm
N * @param local_cid
N * @param remote_cid
N * @param local_mtu
N * @param remote_mtu
N * @param flush_timeout
N * @param incoming
N * @param mode
N * @param fcs
N */
N#define L2CAP_EVENT_CHANNEL_OPENED                         0x70
N
N/*
N * @format 2
N * @param local_cid
N */
N#define L2CAP_EVENT_CHANNEL_CLOSED                         0x71
N
N/**
N * @format BH222
N * @param address
N * @param handle
N * @param psm
N * @param local_cid
N * @param remote_cid
N */
N#define L2CAP_EVENT_INCOMING_CONNECTION                    0x72
N
N// ??
N// data: event(8), len(8), handle(16)
N#define L2CAP_EVENT_TIMEOUT_CHECK                          0x73
N
N/**
N * @format H2222
N * @param handle
N * @param interval_min
N * @param interval_max
N * @param latencey
N * @param timeout_multiplier
N */
N#define L2CAP_EVENT_CONNECTION_PARAMETER_UPDATE_REQUEST    0x76
N
N// data: event(8), len(8), handle(16), result (16) (0 == ok, 1 == fail)
N /** 
N  * @format H2
N  * @param handle
N  * @param result
N  */
N#define L2CAP_EVENT_CONNECTION_PARAMETER_UPDATE_RESPONSE   0x77
N
N/**
N * @format 2
N * @param local_cid
N */
N#define L2CAP_EVENT_CAN_SEND_NOW                           0x78
N
N// LE Data Channels
N
N/**
N * @format 1BH2222
N * @param address_type
N * @param address
N * @param handle
N * @param psm
N * @param local_cid
N * @param remote_cid
N * @param remote_mtu
N */
N#define L2CAP_EVENT_LE_INCOMING_CONNECTION                 0x79
N
N/**
N * @format 11BH122222
N * @param status
N * @param address_type
N * @param address
N * @param handle
N * @param incoming
N * @param psm
N * @param local_cid
N * @param remote_cid
N * @param local_mtu
N * @param remote_mtu
N */
N#define L2CAP_EVENT_LE_CHANNEL_OPENED                      0x7a
N
N/*
N * @format 2
N * @param local_cid
N */
N#define L2CAP_EVENT_LE_CHANNEL_CLOSED                      0x7b
N
N/*
N * @format 2
N * @param local_cid
N */
N#define L2CAP_EVENT_LE_CAN_SEND_NOW                        0x7c
N
N/*
N * @format 2
N * @param local_cid
N */
N#define L2CAP_EVENT_LE_PACKET_SENT                         0x7d
N
N/*
N * @format 2
N * @param local_cid
N */
N#define L2CAP_EVENT_ERTM_BUFFER_RELEASED                   0x7e
N
N/*
N * @format
N */
N#define L2CAP_EVENT_TRIGGER_RUN                            0x7f
N
N
N// RFCOMM EVENTS
N
N/**
N * @format 1B21221
N * @param status
N * @param bd_addr
N * @param con_handle
N * @param server_channel
N * @param rfcomm_cid
N * @param max_frame_size
N * @param incoming
N */
N#define RFCOMM_EVENT_CHANNEL_OPENED                        0x80
N
N/**
N * @format 2
N * @param rfcomm_cid
N */
N#define RFCOMM_EVENT_CHANNEL_CLOSED                        0x81
N
N/**
N * @format B12
N * @param bd_addr
N * @param server_channel
N * @param rfcomm_cid
N */
N#define RFCOMM_EVENT_INCOMING_CONNECTION                   0x82
N
N/**
N * @format 21
N * @param rfcomm_cid
N * @param line_status
N */
N#define RFCOMM_EVENT_REMOTE_LINE_STATUS                    0x83
N        
N/**
N * @format 21
N * @param rfcomm_cid
N * @param modem_status
N */
N#define RFCOMM_EVENT_REMOTE_MODEM_STATUS                   0x87
N
N /**
N  * TODO: format for variable data 2?
N  * param rfcomm_cid
N  * param rpn_data
N  */
N#define RFCOMM_EVENT_PORT_CONFIGURATION                    0x88
N
N/**
N * @format 2
N * @param rfcomm_cid
N */
N#define RFCOMM_EVENT_CAN_SEND_NOW                          0x89
N
N
N/**
N * @format 1
N * @param status
N */
N#define SDP_EVENT_QUERY_COMPLETE                                 0x91 
N
N/**
N * @format 1T
N * @param rfcomm_channel
N * @param name
N */
N#define SDP_EVENT_QUERY_RFCOMM_SERVICE                           0x92
N
N/**
N * @format 22221
N * @param record_id
N * @param attribute_id
N * @param attribute_length
N * @param data_offset
N * @param data
N */
N#define SDP_EVENT_QUERY_ATTRIBUTE_BYTE                           0x93
N
N/**
N * @format 22LV
N * @param record_id
N * @param attribute_id
N * @param attribute_length
N * @param attribute_value
N */
N#define SDP_EVENT_QUERY_ATTRIBUTE_VALUE                          0x94
N
N/**
N * @format 224
N * @param total_count
N * @param record_index
N * @param record_handle
N * @note Not provided by daemon, only used for internal testing
N */
N#define SDP_EVENT_QUERY_SERVICE_RECORD_HANDLE                    0x95
N
N/**
N * @format H1
N * @param handle
N * @param att_status  see ATT errors in bluetooth.h  
N */
N#define GATT_EVENT_QUERY_COMPLETE                                0xA0
N
N/**
N * @format HX
N * @param handle
N * @param service
N */
N#define GATT_EVENT_SERVICE_QUERY_RESULT                          0xA1
N
N/**
N * @format HY
N * @param handle
N * @param characteristic
N */
N#define GATT_EVENT_CHARACTERISTIC_QUERY_RESULT                   0xA2
N
N/**
N * @format H2X
N * @param handle
N * @param include_handle
N * @param service
N */
N#define GATT_EVENT_INCLUDED_SERVICE_QUERY_RESULT                 0xA3
N
N/**
N * @format HZ
N * @param handle
N * @param characteristic_descriptor
N */
N#define GATT_EVENT_ALL_CHARACTERISTIC_DESCRIPTORS_QUERY_RESULT   0xA4
N
N/**
N * @format H2LV
N * @param handle
N * @param value_handle
N * @param value_length
N * @param value
N */
N#define GATT_EVENT_CHARACTERISTIC_VALUE_QUERY_RESULT             0xA5
N
N/**
N * @format H22LV
N * @param handle
N * @param value_handle
N * @param value_offset
N * @param value_length
N * @param value
N */
N#define GATT_EVENT_LONG_CHARACTERISTIC_VALUE_QUERY_RESULT        0xA6
N
N/**
N * @format H2LV
N * @param handle
N * @param value_handle
N * @param value_length
N * @param value
N */
N#define GATT_EVENT_NOTIFICATION                                  0xA7
N
N/**
N * @format H2LV
N * @param handle
N * @param value_handle
N * @param value_length
N * @param value
N */
N#define GATT_EVENT_INDICATION                                    0xA8
N
N/**
N * @format H2LV
N * @param handle
N * @param descriptor_handle
N * @param descriptor_length
N * @param descriptor
N */
N#define GATT_EVENT_CHARACTERISTIC_DESCRIPTOR_QUERY_RESULT        0xA9
N
N/**
N * @format H2LV
N * @param handle
N * @param descriptor_offset
N * @param descriptor_length
N * @param descriptor
N */
N#define GATT_EVENT_LONG_CHARACTERISTIC_DESCRIPTOR_QUERY_RESULT   0xAA
N
N/** 
N * @format H2
N * @param handle
N * @param MTU
N */    
N#define GATT_EVENT_MTU                                           0xAB
N
N/**
N * @format H
N * @param handle
N */
N#define GATT_EVENT_CAN_WRITE_WITHOUT_RESPONSE                    0xAC
N
N
N/** 
N * @format 1BH
N * @param address_type
N * @param address
N * @param handle
N */    
N#define ATT_EVENT_CONNECTED                                      0xB3
N
N/** 
N * @format H
N * @param handle
N */    
N#define ATT_EVENT_DISCONNECTED                                   0xB4
N
N/** 
N * @format H2
N * @param handle
N * @param MTU
N */    
N#define ATT_EVENT_MTU_EXCHANGE_COMPLETE                          0xB5
N
N /**
N  * @format 1H2
N  * @param status
N  * @param conn_handle
N  * @param attribute_handle
N  */
N#define ATT_EVENT_HANDLE_VALUE_INDICATION_COMPLETE               0xB6
N
N/**
N * @format
N */
N#define ATT_EVENT_CAN_SEND_NOW                                   0xB7
N
N// TODO: daemon only event
N
N/**
N * @format 12
N * @param status
N * @param service_uuid
N */
N #define BNEP_EVENT_SERVICE_REGISTERED                           0xC0
N
N/**
N * @format 12222BH
N * @param status
N * @param bnep_cid
N * @param source_uuid
N * @param destination_uuid
N * @param mtu
N * @param remote_address
N * @param con_handle
N */
N #define BNEP_EVENT_CHANNEL_OPENED                               0xC1
N
N/**
N * @format 222B
N * @param bnep_cid
N * @param source_uuid
N * @param destination_uuid
N * @param remote_address
N */
N #define BNEP_EVENT_CHANNEL_CLOSED                               0xC2
N
N/**
N * @format 222B1
N * @param bnep_cid
N * @param source_uuid
N * @param destination_uuid
N * @param remote_address
N * @param channel_state
N */
N#define BNEP_EVENT_CHANNEL_TIMEOUT                               0xC3    
N    
N/**
N * @format 222B
N * @param bnep_cid
N * @param source_uuid
N * @param destination_uuid
N * @param remote_address
N */
N #define BNEP_EVENT_CAN_SEND_NOW                                 0xC4
N
N /**
N  * @format H1B
N  * @param handle
N  * @param addr_type
N  * @param address
N  */
N#define SM_EVENT_JUST_WORKS_REQUEST                              0xC8
N
N /**
N  * @format H1B4
N  * @param handle
N  * @param addr_type
N  * @param address
N  * @param passkey
N  */
N#define SM_EVENT_PASSKEY_DISPLAY_NUMBER                          0xC9
N
N /**
N  * @format H1B
N  * @param handle
N  * @param addr_type
N  * @param address
N  */
N#define SM_EVENT_PASSKEY_DISPLAY_CANCEL                          0xCA
N
N /**
N  * @format H1B
N  * @param handle
N  * @param addr_type
N  * @param address
N  */
N#define SM_EVENT_PASSKEY_INPUT_NUMBER                            0xCB
N
N /**
N  * @format H1B4
N  * @param handle
N  * @param addr_type
N  * @param address
N  * @param passkey
N  */
N#define SM_EVENT_NUMERIC_COMPARISON_REQUEST                      0xCC
N
N /**
N  * @format H1B
N  * @param handle
N  * @param addr_type
N  * @param address
N  */
N#define SM_EVENT_IDENTITY_RESOLVING_STARTED                      0xCD
N
N /**
N  * @format H1B
N  * @param handle
N  * @param addr_type
N  * @param address
N  */
N#define SM_EVENT_IDENTITY_RESOLVING_FAILED                       0xCE
N
N /**
N  * @brief Identify resolving succeeded
N  *
N  * @format H1B1B2
N  * @param handle
N  * @param addr_type
N  * @param address
N  * @param identity_addr_type
N  * @param identity_address
N  * @param index
N  *
N  */
N#define SM_EVENT_IDENTITY_RESOLVING_SUCCEEDED                    0xCF
N
N /**
N  * @format H1B
N  * @param handle
N  * @param addr_type
N  * @param address
N  */
N#define SM_EVENT_AUTHORIZATION_REQUEST                           0xD0
N
N /**
N  * @format H1B1
N  * @param handle
N  * @param addr_type
N  * @param address
N  * @param authorization_result
N  */
N#define SM_EVENT_AUTHORIZATION_RESULT                            0xD1
N
N /**
N  * @format H1
N  * @param handle
N  * @param action see SM_KEYPRESS_*
N  */
N#define SM_EVENT_KEYPRESS_NOTIFICATION                           0xD2
N
N /**
N  * @brief Emitted during pairing to inform app about address used as identity
N  *
N  * @format H1B1B2
N  * @param handle
N  * @param addr_type
N  * @param address
N  * @param identity_addr_type
N  * @param identity_address
N  * @param index
N  */
N#define SM_EVENT_IDENTITY_CREATED                                0xD3
N
N/**
N * @brief Emitted to inform app that pairing has started.
N * @format H1B
N * @param handle
N * @param addr_type
N * @param address
N */
N#define SM_EVENT_PAIRING_STARTED                                 0xD4
N
N/**
N  * @brief Emitted to inform app that pairing is complete. Possible status values:
N  *        ERROR_CODE_SUCCESS                            -> pairing success
N  *        ERROR_CODE_CONNECTION_TIMEOUT                 -> timeout
N  *        ERROR_CODE_REMOTE_USER_TERMINATED_CONNECTION  -> disconnect
N  *        ERROR_CODE_AUTHENTICATION_FAILURE             -> SM protocol error, see reason field with SM_REASON_* from bluetooth.h
N  *
N  * @format H1B11
N  * @param handle
N  * @param addr_type
N  * @param address
N  * @param status
N  * @param reason if status == ERROR_CODE_AUTHENTICATION_FAILURE
N  */
N#define SM_EVENT_PAIRING_COMPLETE                                0xD5
N
N
N/**
N * @brief Proactive Authentication for bonded devices started.
N * @format H1B
N * @param handle
N * @param addr_type
N * @param address
N */
N#define SM_EVENT_REENCRYPTION_STARTED                            0xD6
N
N/**
N * @brief Proactive Authentication for bonded devices complete. Possible status values:
N *         ERROR_CODE_SUCCESS                           -> connection secure
N *         ERROR_CODE_CONNECTION_TIMEOUT                -> timeout
N *         ERROR_CODE_PIN_OR_KEY_MISSING                -> remote did not provide (as Peripheral) or use LTK (as Central)
N * @format H1B1
N * @param handle
N * @param addr_type
N * @param address
N * @param status
N */
N#define SM_EVENT_REENCRYPTION_COMPLETE                           0xD7
N
N// GAP
N
N/**
N * @format H1
N * @param handle
N * @param security_level
N */
N#define GAP_EVENT_SECURITY_LEVEL                                 0xD8
N
N/**
N * @format 1B
N * @param status
N * @param address
N */
N#define GAP_EVENT_DEDICATED_BONDING_COMPLETED                    0xD9
N
N/**
N * @format 11B1JV
N * @param advertising_event_type
N * @param address_type
N * @param address
N * @param rssi
N * @param data_length
N * @param data
N */
N#define GAP_EVENT_ADVERTISING_REPORT                             0xDA
N
N /**
N * @format B13211122221JV
N * @param bd_addr
N * @param page_scan_repetition_mode
N * @param class_of_device
N * @param clock_offset
N * @param rssi_available
N * @param rssi
N * @param device_id_available
N * @param device_id_vendor_id_source
N * @param device_id_vendor_id
N * @param device_id_product_id
N * @param device_id_version
N * @param name_available
N * @param name_len
N * @param name
N */
N#define GAP_EVENT_INQUIRY_RESULT                                 0xDB
N
N/**
N * @format 1
N * @param status
N */
N#define GAP_EVENT_INQUIRY_COMPLETE                               0xDC
N
N/**
N * @format H1
N * @param con_handle
N * @param rssi (signed integer -127..127)
N * @note Classic: rssi is in dB relative to Golden Receive Power Range
N * @note LE: rssi is absolute dBm
N */
N#define GAP_EVENT_RSSI_MEASUREMENT                               0xDD
N
N/**
N * @format 1KKKK
N * @param oob_data_present 0 = none, 1 = p_192, 2 = p_256, 3 = both
N * @param c_192 Simple Pairing Hash C derived from P-192 public key
N * @param r_192 Simple Pairing Randomizer derived from P-192 public key
N * @param c_256 Simple Pairing Hash C derived from P-256 public key
N * @param r_256 Simple Pairing Randomizer derived from P-256 public key
N */
N#define GAP_EVENT_LOCAL_OOB_DATA                                 0xDE
N
N
N/**
N * @format HB11
N * @param con_handle
N * @param bd_addr
N * @param ssp
N * @param initiator
N */
N#define GAP_EVENT_PAIRING_STARTED                                0xDF
N
N/**
N * @format HB1
N * @param con_handle
N * @param bd_addr
N * @param status
N */
N#define GAP_EVENT_PAIRING_COMPLETE                               0xE0
N
N// Meta Events, see below for sub events
N#define HCI_EVENT_HSP_META                                       0xE8
N#define HCI_EVENT_HFP_META                                       0xE9
N#define HCI_EVENT_ANCS_META                                      0xEA
N#define HCI_EVENT_AVDTP_META                                     0xEB
N#define HCI_EVENT_AVRCP_META                                     0xEC
N#define HCI_EVENT_GOEP_META                                      0xED
N#define HCI_EVENT_PBAP_META                                      0xEE
N#define HCI_EVENT_HID_META                                       0xEF
N#define HCI_EVENT_A2DP_META                                      0xF0
N#define HCI_EVENT_HIDS_META                                      0xF1
N#define HCI_EVENT_GATTSERVICE_META                               0xF2
N#define HCI_EVENT_BIP_META                                       0xF3
N#define HCI_EVENT_MAP_META                                       0xF4
N#define HCI_EVENT_MESH_META                                      0xF5
N
N// Potential other meta groups
N// #define HCI_EVENT_BNEP_META                                0xxx
N// #define HCI_EVENT_GAP_META                                 0xxx
N// #define HCI_EVENT_GATT_META                                0xxx
N// #define HCI_EVENT_PAN_META                                 0xxx
N// #define HCI_EVENT_SDP_META                                 0xxx
N// #define HCI_EVENT_SM_META                                  0xxx
N
N
N/** HSP Subevent */
N
N/**
N * @format 11
N * @param subevent_code
N * @param status 0 == OK
N */
N#define HSP_SUBEVENT_RFCOMM_CONNECTION_COMPLETE             0x01
N
N/**
N * @format 11
N * @param subevent_code
N * @param status 0 == OK
N */
N#define HSP_SUBEVENT_RFCOMM_DISCONNECTION_COMPLETE           0x02
N
N
N/**
N * @format 11H
N * @param subevent_code
N * @param status 0 == OK
N * @param handle
N */
N#define HSP_SUBEVENT_AUDIO_CONNECTION_COMPLETE             0x03
N
N/**
N * @format 11
N * @param subevent_code
N * @param status 0 == OK
N */
N#define HSP_SUBEVENT_AUDIO_DISCONNECTION_COMPLETE          0x04
N
N/**
N * @format 1
N * @param subevent_code
N */
N#define HSP_SUBEVENT_RING                                  0x05
N
N/**
N * @format 11
N * @param subevent_code
N * @param gain Valid range: [0,15]
N */
N#define HSP_SUBEVENT_MICROPHONE_GAIN_CHANGED               0x06
N
N/**
N * @format 11
N * @param subevent_code
N * @param gain Valid range: [0,15]
N */
N#define HSP_SUBEVENT_SPEAKER_GAIN_CHANGED                  0x07
N
N/**
N * @format 1JV
N * @param subevent_code
N * @param value_length
N * @param value
N */
N#define HSP_SUBEVENT_HS_COMMAND                            0x08
N
N/**
N * @format 1JV
N * @param subevent_code
N * @param value_length
N * @param value
N */
N#define HSP_SUBEVENT_AG_INDICATION                         0x09
N
N/**
N * @format 1
N * @param subevent_code
N */
N#define HSP_SUBEVENT_BUTTON_PRESSED                        0x0a
N
N/** HFP Subevent */
N
N/**
N * @format 11HB
N * @param subevent_code
N * @param status 0 == OK
N * @param acl_handle
N * @param bd_addr
N */
N#define HFP_SUBEVENT_SERVICE_LEVEL_CONNECTION_ESTABLISHED  0x01
N
N/**
N * @format 1H
N * @param subevent_code
N * @param acl_handle
N */
N#define HFP_SUBEVENT_SERVICE_LEVEL_CONNECTION_RELEASED     0x02
N
N/**
N * @format 1H1HB1
N * @param subevent_code
N * @param acl_handle
N * @param status 0 == OK
N * @param sco_handle
N * @param bd_addr
N * @param negotiated_codec
N */
N#define HFP_SUBEVENT_AUDIO_CONNECTION_ESTABLISHED          0x03
N
N/**
N * @format 1HH
N * @param subevent_code
N * @param acl_handle
N * @param sco_handle
N */
N#define HFP_SUBEVENT_AUDIO_CONNECTION_RELEASED             0x04
N
N/**
N * @format 1H1
N * @param subevent_code
N * @param acl_handle
N * @param status 0 == OK
N */
N#define HFP_SUBEVENT_COMPLETE                              0x05
N
N/**
N * @format 1H1111111T
N * @param subevent_code
N * @param acl_handle
N * @param indicator_index
N * @param indicator_status
N * @param indicator_min_range
N * @param indicator_max_range
N * @param indicator_mandatory
N * @param indicator_enabled
N * @param indicator_status_changed
N * @param indicator_name
N */
N#define HFP_SUBEVENT_AG_INDICATOR_STATUS_CHANGED           0x06
N
N/**
N * @format 1H11T
N * @param subevent_code
N * @param acl_handle
N * @param network_operator_mode
N * @param network_operator_format
N * @param network_operator_name
N */
N#define HFP_SUBEVENT_NETWORK_OPERATOR_CHANGED              0x07
N
N/**
N * @format 1H1
N * @param subevent_code
N * @param acl_handle
N * @param error
N */
N#define HFP_SUBEVENT_EXTENDED_AUDIO_GATEWAY_ERROR             0x08
N
N/**
N * @format 1H
N * @param subevent_code
N * @param acl_handle
N */
N#define HFP_SUBEVENT_START_RINGINIG                           0x0A
N
N/**
N * @format 1H
N * @param subevent_code
N * @param acl_handle
N */
N#define HFP_SUBEVENT_STOP_RINGINIG                            0x0B
N
N/**
N * @format 1H
N * @param subevent_code
N * @param acl_handle
N */
N#define HFP_SUBEVENT_CALL_TERMINATED                          0x0C
N
N/**
N * @format 1HT
N * @param subevent_code
N * @param acl_handle
N * @param number
N */
N#define HFP_SUBEVENT_PLACE_CALL_WITH_NUMBER                   0x0D
N
N/**
N * @format 1H
N * @param subevent_code
N * @param acl_handle
N */
N#define HFP_SUBEVENT_ATTACH_NUMBER_TO_VOICE_TAG               0x0E
N
N/**
N * @format 1HT
N * @param subevent_code
N * @param acl_handle
N * @param number
N */
N#define HFP_SUBEVENT_NUMBER_FOR_VOICE_TAG                     0x0F
N
N/**
N * @format 1HT
N * @param subevent_code
N * @param acl_handle
N * @param dtmf code
N */
N#define HFP_SUBEVENT_TRANSMIT_DTMF_CODES                      0x10
N
N/**
N * @format 1H
N * @param subevent_code
N * @param acl_handle
N */
N#define HFP_SUBEVENT_CALL_ANSWERED                            0x11
N
N/**
N * @format 1H
N * @param subevent_code
N * @param acl_handle
N */
N#define HFP_SUBEVENT_CONFERENCE_CALL                          0x12
N
N/**
N * @format 1H
N * @param subevent_code
N * @param acl_handle
N */
N#define HFP_SUBEVENT_RING                                     0x13
N
N/**
N * @format 1H1
N * @param subevent_code
N * @param acl_handle
N * @param gain
N */
N#define HFP_SUBEVENT_SPEAKER_VOLUME                           0x14
N
N/**
N * @format 1H1
N * @param subevent_code
N * @param acl_handle
N * @param gain
N */
N#define HFP_SUBEVENT_MICROPHONE_VOLUME                        0x15
N
N/**
N * @format 1H1T
N * @param subevent_code
N * @param acl_handle
N * @param type
N * @param number
N */
N#define HFP_SUBEVENT_CALL_WAITING_NOTIFICATION                0x16
N
N/**
N * @format 1H1T
N * @param subevent_code
N * @param acl_handle
N * @param type
N * @param number
N */
N#define HFP_SUBEVENT_CALLING_LINE_IDENTIFICATION_NOTIFICATION 0x17
N
N/**
N * @format 1H111111T
N * @param subevent_code
N * @param acl_handle
N * @param clcc_idx
N * @param clcc_dir
N * @param clcc_status
N * @param clcc_mode
N * @param clcc_mpty
N * @param bnip_type
N * @param bnip_number
N */
N#define HFP_SUBEVENT_ENHANCED_CALL_STATUS                     0x18
N
N/**
N * @format 1H11T
N * @param subevent_code
N * @param acl_handle
N * @param status
N * @param bnip_type
N * @param bnip_number
N */
N#define HFP_SUBEVENT_SUBSCRIBER_NUMBER_INFORMATION            0x19
N
N/**
N * @format 1HT
N * @param subevent_code
N * @param acl_handle
N * @param value
N */
N#define HFP_SUBEVENT_RESPONSE_AND_HOLD_STATUS                 0x1A
N
N/**
N * @format 1HT
N * @param subevent_code
N * @param acl_handle
N * @param command
N */
N#define HFP_SUBEVENT_AT_MESSAGE_SENT                          0x1B
N
N/**
N * @format 1HT
N * @param subevent_code
N * @param acl_handle
N * @param command
N */
N#define HFP_SUBEVENT_AT_MESSAGE_RECEIVED                      0x1C
N
N/**
N * @format 1H1
N * @param subevent_code
N * @param acl_handle
N * @param status
N */
N#define HFP_SUBEVENT_IN_BAND_RING_TONE                        0x1D
N
N/**
N * @format 1H1
N * @param subevent_code
N * @param acl_handle
N * @param activated
N */
N#define HFP_SUBEVENT_VOICE_RECOGNITION_STATUS                 0x1E
N
N/**
N * @format 1H11
N * @param subevent_code
N * @param acl_handle
N * @param status
N * @param state
N */
N#define HFP_SUBEVENT_ENHANCED_VOICE_RECOGNITION_STATUS         0x1F
N
N/**
N * @format 1H211LV
N * @param subevent_code
N * @param acl_handle
N * @param text_id
N * @param text_operation
N * @param text_type
N * @param text_length
N * @param text
N */
N#define HFP_SUBEVENT_ENHANCED_VOICE_RECOGNITION_TEXT           0x20
N
N
N
N// ANCS Client
N
N/**
N * @format 1H
N * @param subevent_code
N * @param handle
N */ 
N#define ANCS_SUBEVENT_CLIENT_CONNECTED                              0xF0
N
N/**
N * @format 1H2T
N * @param subevent_code
N * @param handle
N * @param attribute_id
N * @param text
N */ 
N#define ANCS_SUBEVENT_CLIENT_NOTIFICATION                           0xF1
N
N/**
N * @format 1H
N * @param subevent_code
N * @param handle
N */ 
N#define ANCS_SUBEVENT_CLIENT_DISCONNECTED                           0xF2
N
N
N/** AVDTP Subevent */
N
N/**
N * @format 12111
N * @param subevent_code
N * @param avdtp_cid
N * @param local_seid
N * @param is_initiator
N * @param signal_identifier
N */
N#define AVDTP_SUBEVENT_SIGNALING_ACCEPT                     0x01
N
N/**
N * @format 12111
N * @param subevent_code
N * @param avdtp_cid
N * @param local_seid 
N * @param is_initiator
N * @param signal_identifier 
N */
N#define AVDTP_SUBEVENT_SIGNALING_REJECT                     0x02
N
N/**
N * @format 12111
N * @param subevent_code
N * @param avdtp_cid
N * @param local_seid
N * @param is_initiator
N * @param signal_identifier
N */
N#define AVDTP_SUBEVENT_SIGNALING_GENERAL_REJECT             0x03
N
N/**
N * @format 12B21
N * @param subevent_code
N * @param avdtp_cid
N * @param bd_addr
N * @param con_handle
N * @param status 0 == OK
N */
N#define AVDTP_SUBEVENT_SIGNALING_CONNECTION_ESTABLISHED     0x04
N
N/**
N * @format 12
N * @param subevent_code
N * @param avdtp_cid
N */
N#define AVDTP_SUBEVENT_SIGNALING_CONNECTION_RELEASED        0x05
N
N/**
N * @format 121111
N * @param subevent_code
N * @param avdtp_cid
N * @param remote_seid        0x01 – 0x3E
N * @param in_use      0-not in use, 1-in use
N * @param media_type  0-audio, 1-video, 2-multimedia
N * @param sep_type    0-source, 1-sink
N */
N#define AVDTP_SUBEVENT_SIGNALING_SEP_FOUND                  0x06
N
N/**
N * @format 12111111111
N * @param subevent_code
N * @param avdtp_cid
N * @param remote_seid
N * @param media_type
N * @param sampling_frequency_bitmap
N * @param channel_mode_bitmap
N * @param block_length_bitmap
N * @param subbands_bitmap
N * @param allocation_method_bitmap
N * @param min_bitpool_value
N * @param max_bitpool_value
N */
N#define AVDTP_SUBEVENT_SIGNALING_MEDIA_CODEC_SBC_CAPABILITY          0x07
N
N/**
N * @format 12111111112
N * @param subevent_code
N * @param avdtp_cid
N * @param remote_seid
N * @param media_type
N * @param layer_bitmap
N * @param crc
N * @param channel_mode_bitmap
N * @param media_payload_format
N * @param sampling_frequency_bitmap
N * @param vbr
N * @param bit_rate_index_bitmap
N */
N#define AVDTP_SUBEVENT_SIGNALING_MEDIA_CODEC_MPEG_AUDIO_CAPABILITY   0x08
N
N/**
N * @format 121112131
N * @param subevent_code
N * @param avdtp_cid
N * @param remote_seid
N * @param media_type
N * @param object_type_bitmap
N * @param sampling_frequency_bitmap
N * @param channels_bitmap
N * @param bit_rate
N * @param vbr
N */
N#define AVDTP_SUBEVENT_SIGNALING_MEDIA_CODEC_MPEG_AAC_CAPABILITY     0x09
N
N/**
N * @format 1211111132
N * @param subevent_code
N * @param avdtp_cid
N * @param remote_seid
N * @param media_type
N * @param version
N * @param channel_mode_bitmap
N * @param sampling_frequency_bitmap
N * @param vbr
N * @param bit_rate_index_bitmap
N * @param maximum_sul
N */
N#define AVDTP_SUBEVENT_SIGNALING_MEDIA_CODEC_ATRAC_CAPABILITY        0x0A
N
N/**
N * @format 12112LV
N * @param subevent_code
N * @param avdtp_cid
N * @param remote_seid
N * @param media_type
N * @param media_codec_type
N * @param media_codec_information_len
N * @param media_codec_information
N */
N#define AVDTP_SUBEVENT_SIGNALING_MEDIA_CODEC_OTHER_CAPABILITY        0x0B
N
N
N/**
N * @format 121
N * @param subevent_code
N * @param avdtp_cid
N * @param remote_seid
N */
N#define AVDTP_SUBEVENT_SIGNALING_MEDIA_TRANSPORT_CAPABILITY         0x0C
N
N
N/**
N * @format 121
N * @param subevent_code
N * @param avdtp_cid
N * @param remote_seid
N */
N#define AVDTP_SUBEVENT_SIGNALING_REPORTING_CAPABILITY        0x0D
N
N
N/**
N * @format 121111
N * @param subevent_code
N * @param avdtp_cid
N * @param remote_seid
N * @param recovery_type
N * @param maximum_recovery_window_size
N * @param maximum_number_media_packets
N */
N#define AVDTP_SUBEVENT_SIGNALING_RECOVERY_CAPABILITY        0x0E
N
N
N/**
N * @format 1212LV
N * @param subevent_code
N * @param avdtp_cid
N * @param remote_seid
N * @param cp_type
N * @param cp_type_value_len
N * @param cp_type_value
N */
N#define AVDTP_SUBEVENT_SIGNALING_CONTENT_PROTECTION_CAPABILITY        0x0F
N
N
N/**
N * @format 12111111111
N * @param subevent_code
N * @param avdtp_cid
N * @param remote_seid
N * @param fragmentation
N * @param transport_identifiers_num
N * @param transport_session_identifier_1
N * @param transport_session_identifier_2
N * @param transport_session_identifier_3
N * @param tcid_1
N * @param tcid_2
N * @param tcid_3
N */
N#define AVDTP_SUBEVENT_SIGNALING_MULTIPLEXING_CAPABILITY        0x10
N
N
N/**
N * @format 121
N * @param subevent_code
N * @param avdtp_cid
N * @param remote_seid
N */
N#define AVDTP_SUBEVENT_SIGNALING_DELAY_REPORTING_CAPABILITY        0x11
N
N
N/**
N * @format 121111
N * @param subevent_code
N * @param avdtp_cid
N * @param remote_seid
N * @param back_ch
N * @param media
N * @param recovery
N */
N#define AVDTP_SUBEVENT_SIGNALING_HEADER_COMPRESSION_CAPABILITY        0x12
N
N/**
N * @format 121
N * @param subevent_code
N * @param avdtp_cid
N * @param remote_seid
N */
N#define AVDTP_SUBEVENT_SIGNALING_CAPABILITIES_DONE                    0x13
N
N
N/**
N * @format 12111121111111
N * @param subevent_code
N * @param avdtp_cid
N * @param local_seid
N * @param remote_seid
N * @param reconfigure
N * @param media_type
N * @param sampling_frequency
N * @param channel_mode
N * @param num_channels
N * @param block_length
N * @param subbands
N * @param allocation_method
N * @param min_bitpool_value
N * @param max_bitpool_value
N */
N#define AVDTP_SUBEVENT_SIGNALING_MEDIA_CODEC_SBC_CONFIGURATION        0x14
N
N/**
N * @format 12111111111211
N * @param subevent_code
N * @param avdtp_cid
N * @param local_seid
N * @param remote_seid
N * @param reconfigure
N * @param media_type
N * @param layer
N * @param crc
N * @param channel_mode
N * @param num_channels
N * @param media_payload_format
N * @param sampling_frequency
N * @param vbr
N * @param bit_rate_index
N */
N#define AVDTP_SUBEVENT_SIGNALING_MEDIA_CODEC_MPEG_AUDIO_CONFIGURATION   0x15
N
N/**
N * @format 12111113131
N * @param subevent_code
N * @param avdtp_cid
N * @param local_seid
N * @param remote_seid
N * @param reconfigure
N * @param media_type
N * @param object_type
N * @param sampling_frequency
N * @param num_channels
N * @param bit_rate
N * @param vbr
N */
N#define AVDTP_SUBEVENT_SIGNALING_MEDIA_CODEC_MPEG_AAC_CONFIGURATION     0x16
N
N/**
N * @format 1211111112112
N * @param subevent_code
N * @param avdtp_cid
N * @param local_seid
N * @param remote_seid
N * @param reconfigure
N * @param media_type
N * @param version
N * @param channel_mode
N * @param num_channels
N * @param sampling_frequency
N * @param vbr
N * @param bit_rate_index
N * @param maximum_sul
N */
N#define AVDTP_SUBEVENT_SIGNALING_MEDIA_CODEC_ATRAC_CONFIGURATION        0x17
N
N/**
N * @format 1211112LV
N * @param subevent_code
N * @param avdtp_cid
N * @param local_seid
N * @param remote_seid
N * @param reconfigure
N * @param media_type
N * @param media_codec_type
N * @param media_codec_information_len
N * @param media_codec_information
N */
N#define AVDTP_SUBEVENT_SIGNALING_MEDIA_CODEC_OTHER_CONFIGURATION        0x18
N
N/**
N * @format 12B111
N * @param subevent_code
N * @param avdtp_cid
N * @param bd_addr
N * @param local_seid
N * @param remote_seid
N * @param status 0 == OK
N */
N#define AVDTP_SUBEVENT_STREAMING_CONNECTION_ESTABLISHED     0x19
N
N/**
N * @format 121
N * @param subevent_code
N * @param avdtp_cid
N * @param local_seid
N */
N#define AVDTP_SUBEVENT_STREAMING_CONNECTION_RELEASED        0x1A
N
N/**
N * @format 1212
N * @param subevent_code
N * @param avdtp_cid
N * @param local_seid
N * @param sequence_number
N */
N#define AVDTP_SUBEVENT_STREAMING_CAN_SEND_MEDIA_PACKET_NOW   0x1B
N
N
N/**
N * @format 12
N * @param subevent_code
N * @param avdtp_cid
N */
N#define AVDTP_SUBEVENT_SIGNALING_SEP_DICOVERY_DONE           0x1C
N
N/**
N * @format 1212
N * @param subevent_code
N * @param avdtp_cid
N * @param local_seid
N * @param delay_100us
N */
N#define AVDTP_SUBEVENT_SIGNALING_DELAY_REPORT               0x1D
N
N
N/** A2DP Subevent */
N/* Stream goes through following states:
N * - OPEN         - indicated with A2DP_SUBEVENT_STREAM_ESTABLISHED event 
N * - START        - indicated with A2DP_SUBEVENT_STREAM_STARTED event
N * - SUSPEND      - indicated with A2DP_SUBEVENT_STREAM_SUSPENDED event
N * - ABORT/STOP   - indicated with A2DP_SUBEVENT_STREAM_RELEASED event
N
N OPEN state will be followed by ABORT/STOP. Stream is ready but media transfer is not started. 
N START can come only after the stream is OPENED, and indicates that media transfer is started. 
N SUSPEND is optional, it pauses the stream.
N */
N
N/**
N * @format 121            Sent only by A2DP source.
N * @param subevent_code
N * @param a2dp_cid
N * @param local_seid
N */
N#define A2DP_SUBEVENT_STREAMING_CAN_SEND_MEDIA_PACKET_NOW         0x01
N
N/**
N * @format 12111121111111
N * @param subevent_code
N * @param a2dp_cid
N * @param local_seid
N * @param remote_seid
N * @param reconfigure
N * @param media_type
N * @param sampling_frequency
N * @param channel_mode
N * @param num_channels
N * @param block_length
N * @param subbands
N * @param allocation_method
N * @param min_bitpool_value
N * @param max_bitpool_value
N */
N#define A2DP_SUBEVENT_SIGNALING_MEDIA_CODEC_SBC_CONFIGURATION      0x02
N
N/**
N * @format 12111111111211
N * @param subevent_code
N * @param a2dp_cid
N * @param local_seid
N * @param remote_seid
N * @param reconfigure
N * @param media_type
N * @param layer
N * @param crc
N * @param channel_mode
N * @param num_channels
N * @param media_payload_format
N * @param sampling_frequency
N * @param vbr
N * @param bit_rate_index
N */
N#define A2DP_SUBEVENT_SIGNALING_MEDIA_CODEC_MPEG_AUDIO_CONFIGURATION   0x03
N
N/**
N * @format 12111113131
N * @param subevent_code
N * @param a2dp_cid
N * @param local_seid
N * @param remote_seid
N * @param reconfigure
N * @param media_type
N * @param object_type
N * @param sampling_frequency
N * @param num_channels
N * @param bit_rate
N * @param vbr
N */
N#define A2DP_SUBEVENT_SIGNALING_MEDIA_CODEC_MPEG_AAC_CONFIGURATION     0x04
N
N/**
N * @format 1211111112112
N * @param subevent_code
N * @param a2dp_cid
N * @param local_seid
N * @param remote_seid
N * @param reconfigure
N * @param media_type
N * @param version
N * @param channel_mode
N * @param num_channels
N * @param sampling_frequency
N * @param vbr
N * @param bit_rate_index
N * @param maximum_sul
N */
N#define A2DP_SUBEVENT_SIGNALING_MEDIA_CODEC_ATRAC_CONFIGURATION        0x05
N
N/**
N * @format 1211112LV
N * @param subevent_code
N * @param a2dp_cid
N * @param local_seid
N * @param remote_seid
N * @param reconfigure
N * @param media_type
N * @param media_codec_type
N * @param media_codec_information_len
N * @param media_codec_information
N */
N#define A2DP_SUBEVENT_SIGNALING_MEDIA_CODEC_OTHER_CONFIGURATION    0x06
N
N/**
N * @format 12B111          Stream is opened but not started.
N * @param subevent_code 
N * @param a2dp_cid
N * @param bd_addr
N * @param local_seid
N * @param remote_seid
N * @param status
N */
N#define A2DP_SUBEVENT_STREAM_ESTABLISHED                           0x07
N
N/**
N * @format 121            Indicates that media transfer is started.
N * @param subevent_code
N * @param a2dp_cid
N * @param local_seid
N */
N#define A2DP_SUBEVENT_STREAM_STARTED                               0x08
N
N/**
N * @format 121           Stream is paused.
N * @param subevent_code
N * @param a2dp_cid
N * @param local_seid
N */
N#define A2DP_SUBEVENT_STREAM_SUSPENDED                              0x09
N
N/**
N * @format 121           Stream is stopped or aborted.
N * @param subevent_code
N * @param a2dp_cid
N * @param local_seid
N */
N#define A2DP_SUBEVENT_STREAM_STOPPED                                0x0A
N
N/**
N * @format 121            Stream is released.
N * @param subevent_code
N * @param a2dp_cid
N * @param local_seid
N */
N#define A2DP_SUBEVENT_STREAM_RELEASED                               0x0B
N
N/**
N * @format 1211
N * @param subevent_code
N * @param a2dp_cid
N * @param local_seid
N * @param signal_identifier
N */
N#define A2DP_SUBEVENT_COMMAND_ACCEPTED                              0x0C
N
N/**
N * @format 1211
N * @param subevent_code
N * @param a2dp_cid
N * @param local_seid
N * @param signal_identifier 
N */
N#define A2DP_SUBEVENT_COMMAND_REJECTED                              0x0D
N
N/**
N * @format 12B21
N * @param subevent_code
N * @param a2dp_cid
N * @param bd_addr
N * @param con_handle
N * @param status 0 == OK
N */
N#define A2DP_SUBEVENT_SIGNALING_CONNECTION_ESTABLISHED              0x0E
N
N/**
N * @format 12            Signaling channel is released.
N * @param subevent_code
N * @param a2dp_cid
N */
N#define A2DP_SUBEVENT_SIGNALING_CONNECTION_RELEASED                  0x0F
N
N/**
N * @format 1211          Stream was reconfigured
N * @param subevent_code
N * @param a2dp_cid
N * @param local_seid
N * @param status
N */
N#define A2DP_SUBEVENT_STREAM_RECONFIGURED                            0x10
N
N/**
N * @format 12111111111
N * @param subevent_code
N * @param a2dp_cid
N * @param remote_seid
N * @param media_type
N * @param sampling_frequency_bitmap
N * @param channel_mode_bitmap
N * @param block_length_bitmap
N * @param subbands_bitmap
N * @param allocation_method_bitmap
N * @param min_bitpool_value
N * @param max_bitpool_value
N */
N#define A2DP_SUBEVENT_SIGNALING_MEDIA_CODEC_SBC_CAPABILITY          0x11
N
N/**
N * @format 12111111112
N * @param subevent_code
N * @param a2dp_cid
N * @param remote_seid
N * @param media_type
N * @param layer_bitmap
N * @param crc
N * @param channel_mode_bitmap
N * @param media_payload_format
N * @param sampling_frequency_bitmap
N * @param vbr
N * @param bit_rate_index_bitmap
N */
N#define A2DP_SUBEVENT_SIGNALING_MEDIA_CODEC_MPEG_AUDIO_CAPABILITY   0x12
N
N/**
N * @format 121112131
N * @param subevent_code
N * @param a2dp_cid
N * @param remote_seid
N * @param media_type
N * @param object_type_bitmap
N * @param sampling_frequency_bitmap
N * @param channels_bitmap
N * @param bit_rate
N * @param vbr
N */
N#define A2DP_SUBEVENT_SIGNALING_MEDIA_CODEC_MPEG_AAC_CAPABILITY     0x13
N
N/**
N * @format 1211111132
N * @param subevent_code
N * @param a2dp_cid
N * @param remote_seid
N * @param media_type
N * @param version
N * @param channel_mode_bitmap
N * @param sampling_frequency_bitmap
N * @param vbr
N * @param bit_rate_index_bitmap
N * @param maximum_sul
N */
N#define A2DP_SUBEVENT_SIGNALING_MEDIA_CODEC_ATRAC_CAPABILITY        0x14
N
N/**
N * @format 12112LV
N * @param subevent_code
N * @param a2dp_cid
N * @param remote_seid
N * @param media_type
N * @param media_codec_type
N * @param media_codec_information_len
N * @param media_codec_information
N */
N#define A2DP_SUBEVENT_SIGNALING_MEDIA_CODEC_OTHER_CAPABILITY        0x15
N
N/**
N * @format 121
N * @param subevent_code
N * @param a2dp_cid
N * @param remote_seid
N */
N#define A2DP_SUBEVENT_SIGNALING_DELAY_REPORTING_CAPABILITY           0x16
N
N
N/**
N * @format 1212
N * @param subevent_code
N * @param a2dp_cid
N * @param local_seid
N * @param delay_100us
N */
N#define A2DP_SUBEVENT_SIGNALING_DELAY_REPORT                         0x17
N
N/**
N * @format 121
N * @param subevent_code
N * @param a2dp_cid
N * @param remote_seid
N */
N#define A2DP_SUBEVENT_SIGNALING_CAPABILITIES_DONE                    0x18
N
N/**
N * @format 12
N * @param subevent_code
N * @param a2dp_cid
N */
N#define A2DP_SUBEVENT_SIGNALING_CAPABILITIES_COMPLETE                0x19
N
N
N/** AVRCP Subevent */
N
N/**
N * @format 1211
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N * @param play_status
N */
N#define AVRCP_SUBEVENT_NOTIFICATION_PLAYBACK_STATUS_CHANGED                         0x01
N
N/**
N * @format 121
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N */
N#define AVRCP_SUBEVENT_NOTIFICATION_TRACK_CHANGED                                   0x02
N
N/**
N * @format 121
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N */
N#define AVRCP_SUBEVENT_NOTIFICATION_EVENT_TRACK_REACHED_END                         0x03
N
N/**
N * @format 121
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N */
N#define AVRCP_SUBEVENT_NOTIFICATION_EVENT_TRACK_REACHED_START                       0x04              
N
N/**
N * @format 1214
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N * @param playback_position  If no track currently selected, then return 0xFFFFFFFF in the INTERIM response.
N */
N#define AVRCP_SUBEVENT_NOTIFICATION_EVENT_PLAYBACK_POS_CHANGED                      0x05
N
N/**
N * @format 1211
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N * @param battery_status  see avrcp_battery_status_t
N */
N#define AVRCP_SUBEVENT_NOTIFICATION_EVENT_BATT_STATUS_CHANGED                       0x06
N
N/**
N * @format 1211
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N * @param system_status  see avrcp_system_status_t
N */
N#define AVRCP_SUBEVENT_NOTIFICATION_EVENT_SYSTEM_STATUS_CHANGED                     0x07
N
N
N// Recquires 1 byte for num_attributes, followed by num_attributes tuples [attribute_id(1), value_id(1)], see avrcp_player_application_setting_attribute_id_t
N#define AVRCP_SUBEVENT_NOTIFICATION_EVENT_PLAYER_APPLICATION_SETTING_CHANGED        0x08
N
N/**
N * @format 121
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N */
N#define AVRCP_SUBEVENT_NOTIFICATION_NOW_PLAYING_CONTENT_CHANGED                     0x09
N
N/**
N * @format 121
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N */
N#define AVRCP_SUBEVENT_NOTIFICATION_AVAILABLE_PLAYERS_CHANGED                       0x0A
N
N// AVRCP_SUBEVENT_NOTIFICATION_EVENT_ADDRESSED_PLAYER_CHANGED = 0x0b,           -- The Addressed Player has been changed, see 6.9.2.
N
N/**
N * @format 1212
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N * @param uid_counter of the currently browsed player
N */
N#define AVRCP_SUBEVENT_NOTIFICATION_EVENT_UIDS_CHANGED                              0x0C
N
N/**
N * @format 1211
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N * @param absolute_volume
N */
N#define AVRCP_SUBEVENT_NOTIFICATION_VOLUME_CHANGED                                  0x0D
N         
N
N/**
N * @format 1211
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N * @param absolute_volume
N */
N#define AVRCP_SUBEVENT_SET_ABSOLUTE_VOLUME_RESPONSE                      0x10
N
N/**
N * @format 1211
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N * @param notification_id
N */
N#define AVRCP_SUBEVENT_ENABLE_NOTIFICATION_COMPLETE                       0x11
N
N/**
N * @format 112B2
N * @param subevent_code
N * @param status 0 == OK
N * @param avrcp_cid
N * @param bd_addr
N * @param con_handle
N */
N#define AVRCP_SUBEVENT_CONNECTION_ESTABLISHED                           0x12
N
N/**
N * @format 12
N * @param subevent_code
N * @param avrcp_cid
N */
N#define AVRCP_SUBEVENT_CONNECTION_RELEASED                              0x13
N
N/**
N * @format 12111
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N * @param repeat_mode
N * @param shuffle_mode
N */
N#define AVRCP_SUBEVENT_SHUFFLE_AND_REPEAT_MODE                          0x14
N
N/**
N * @format 121441
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N * @param song_length
N * @param song_position
N * @param play_status
N */
N #define AVRCP_SUBEVENT_PLAY_STATUS                                     0x15
N
N/**
N * @format 1211
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N * @param operation_id
N */
N#define AVRCP_SUBEVENT_OPERATION_START                                    0x16
N
N/**
N * @format 1211
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N * @param operation_id
N */
N#define AVRCP_SUBEVENT_OPERATION_COMPLETE                                 0x17
N
N/**
N * @format 121
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N */
N#define AVRCP_SUBEVENT_PLAYER_APPLICATION_VALUE_RESPONSE                   0x18
N
N/**
N * @format 12
N * @param subevent_code
N * @param avrcp_cid
N */
N#define AVRCP_SUBEVENT_COMPANY_IDS_QUERY                                    0x19
N
N/**
N * @format 12
N * @param subevent_code
N * @param avrcp_cid
N */
N#define AVRCP_SUBEVENT_EVENT_IDS_QUERY                                      0x1A
N
N/**
N * @format 12
N * @param subevent_code
N * @param avrcp_cid
N */
N#define AVRCP_SUBEVENT_PLAY_STATUS_QUERY                                    0x1B
N
N/**
N * @format 121111
N * @param subevent_code
N * @param avrcp_cid
N * @param operation_id
N * @param button_pressed
N * @param operands_length
N * @param operand
N */
N#define AVRCP_SUBEVENT_OPERATION                                            0x1C 
N
N/**
N * @format 1211
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N * @param track
N */
N#define AVRCP_SUBEVENT_NOW_PLAYING_TRACK_INFO                               0x1D
N
N/**
N * @format 1211
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N * @param total_tracks
N */
N#define AVRCP_SUBEVENT_NOW_PLAYING_TOTAL_TRACKS_INFO                        0x1E
N
N/**
N * @format 1214
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N * @param song_length in ms
N */
N#define AVRCP_SUBEVENT_NOW_PLAYING_SONG_LENGTH_MS_INFO                      0x1F
N
N/**
N * @format 121JV
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N * @param value_len
N * @param value
N */
N#define AVRCP_SUBEVENT_NOW_PLAYING_TITLE_INFO                                 0x20
N
N /*
N * @format 121JV
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N * @param value_len
N * @param value
N */
N#define AVRCP_SUBEVENT_NOW_PLAYING_ARTIST_INFO                                0x21
N
N /*
N * @format 121JV
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N * @param value_len
N * @param value
N */
N#define AVRCP_SUBEVENT_NOW_PLAYING_ALBUM_INFO                                 0x22
N
N /*
N * @format 121JV
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N * @param value_len
N * @param value
N */
N#define AVRCP_SUBEVENT_NOW_PLAYING_GENRE_INFO                                 0x23
N
N/*
N * @format 1211
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N * @param status
N */
N#define AVRCP_SUBEVENT_NOW_PLAYING_INFO_DONE                                  0x24
N
N/**
N * @format 1214
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N * @param playback_position_ms
N */
N#define AVRCP_SUBEVENT_NOTIFICATION_PLAYBACK_POS_CHANGED                      0x25
N
N/*
N * @format 12111
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N * @param status
N * @param event_id
N */
N#define AVRCP_SUBEVENT_GET_CAPABILITY_EVENT_ID                                0x26
N/*
N * @format 1211
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N * @param status
N */
N#define AVRCP_SUBEVENT_GET_CAPABILITY_EVENT_ID_DONE                           0x27
N
N/*
N * @format 12113
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N * @param status
N * @param company_id
N */
N#define AVRCP_SUBEVENT_GET_CAPABILITY_COMPANY_ID                              0x28
N/*
N * @format 1211
N * @param subevent_code
N * @param avrcp_cid
N * @param command_type
N * @param status
N */
N#define AVRCP_SUBEVENT_GET_CAPABILITY_COMPANY_ID_DONE                         0x29
N
N
N
N/**
N * @format 1B2
N * @param subevent_code
N * @param bd_addr
N * @param browsing_cid
N */
N#define AVRCP_SUBEVENT_INCOMING_BROWSING_CONNECTION                          0x30
N
N/**
N * @format 11B2
N * @param subevent_code
N * @param status 0 == OK
N * @param bd_addr
N * @param browsing_cid
N */
N#define AVRCP_SUBEVENT_BROWSING_CONNECTION_ESTABLISHED                        0x31
N
N/**
N * @format 12
N * @param subevent_code
N * @param browsing_cid
N */
N#define AVRCP_SUBEVENT_BROWSING_CONNECTION_RELEASED                           0x32
N
N/**
N * @format 12211
N * @param subevent_code
N * @param browsing_cid
N * @param uid_counter
N * @param browsing_status
N * @param bluetooth_status
N */
N#define AVRCP_SUBEVENT_BROWSING_DONE                                          0x33
N
N/**
N * @format 1214
N * @param subevent_code
N * @param browsing_cid
N * @param scope
N * @param attr_bitmap
N */
N#define AVRCP_SUBEVENT_BROWSING_GET_FOLDER_ITEMS                              0x34
N
N/**
N * @format 121
N * @param subevent_code
N * @param browsing_cid
N * @param scope
N */
N#define AVRCP_SUBEVENT_BROWSING_GET_TOTAL_NUM_ITEMS                           0x35
N
N/**
N * @format 122
N * @param subevent_code
N * @param browsing_cid
N * @param player_id
N */
N#define AVRCP_SUBEVENT_BROWSING_SET_BROWSED_PLAYER                            0x36
N
N
N
N/**
N * @format 121BH1
N * @param subevent_code
N * @param goep_cid
N * @param status
N * @param bd_addr
N * @param con_handle
N * @param incoming
N */
N#define GOEP_SUBEVENT_CONNECTION_OPENED                                    0x01
N
N/**
N * @format 12
N * @param subevent_code
N * @param goep_cid
N*/
N#define GOEP_SUBEVENT_CONNECTION_CLOSED                                    0x02
N
N/**
N * @format 12
N * @param subevent_code
N * @param goep_cid
N*/
N#define GOEP_SUBEVENT_CAN_SEND_NOW                                         0x03
N
N/**
N * @format 121BH1
N * @param subevent_code
N * @param pbap_cid
N * @param status
N * @param bd_addr
N * @param con_handle
N * @param incoming
N */
N#define PBAP_SUBEVENT_CONNECTION_OPENED                                    0x01
N
N/**
N * @format 12
N * @param subevent_code
N * @param goep_cid
N*/
N#define PBAP_SUBEVENT_CONNECTION_CLOSED                                    0x02
N
N/**
N * @format 121
N * @param subevent_code
N * @param goep_cid
N * @param status
N */
N#define PBAP_SUBEVENT_OPERATION_COMPLETED                                  0x03
N
N/**
N * @format 1212
N * @param subevent_code
N * @param goep_cid
N * @param status
N * @param phoneboook_size
N */
N#define PBAP_SUBEVENT_PHONEBOOK_SIZE                                       0x04
N
N/**
N * @format 1211
N * @param subevent_code
N * @param goep_cid
N * @param user_id_required
N * @param full_access 
N */
N#define PBAP_SUBEVENT_AUTHENTICATION_REQUEST                               0x05
N
N/**
N * @format 12JVJV
N * @param subevent_code
N * @param goep_cid
N * @param name_len
N * @param name 
N * @param handle_len
N * @param handle 
N */
N#define PBAP_SUBEVENT_CARD_RESULT                                          0x06
N
N
N// HID Meta Event Group
N
N/**
N * @format 12BH
N * @param subevent_code
N * @param hid_cid
N * @param address
N * @param handle
N */
N#define HID_SUBEVENT_INCOMING_CONNECTION                                   0x01
N
N/**
N * @format 121BH1
N * @param subevent_code
N * @param hid_cid
N * @param status
N * @param bd_addr
N * @param con_handle
N * @param incoming
N */
N#define HID_SUBEVENT_CONNECTION_OPENED                                     0x02
N
N/**
N * @format 12
N * @param subevent_code
N * @param hid_cid
N*/
N#define HID_SUBEVENT_CONNECTION_CLOSED                                     0x03
N
N/**
N * @format 12
N * @param subevent_code
N * @param hid_cid
N*/
N#define HID_SUBEVENT_CAN_SEND_NOW                                          0x04
N
N/**
N * @format 12
N * @param subevent_code
N * @param hid_cid
N*/
N#define HID_SUBEVENT_SUSPEND                                               0x05
N
N/**
N * @format 12
N * @param subevent_code
N * @param hid_cid
N*/
N#define HID_SUBEVENT_EXIT_SUSPEND                                          0x06
N
N/**
N * @format 12
N * @param subevent_code
N * @param hid_cid
N*/
N#define HID_SUBEVENT_VIRTUAL_CABLE_UNPLUG                                  0x07
N
N/** 
N * @format 121LV
N * @param subevent_code
N * @param hid_cid
N * @param handshake_status
N * @param report_len
N * @param report
N*/
N#define HID_SUBEVENT_GET_REPORT_RESPONSE                                   0x08
N
N/** 
N * @format 121
N * @param subevent_code
N * @param hid_cid
N * @param handshake_status
N*/
N#define HID_SUBEVENT_SET_REPORT_RESPONSE                                   0x09
N
N/** 
N * @format 1211
N * @param subevent_code
N * @param hid_cid
N * @param handshake_status
N * @param protocol_mode
N*/
N#define HID_SUBEVENT_GET_PROTOCOL_RESPONSE                                 0x0A
N
N/** 
N * @format 1211
N * @param subevent_code
N * @param hid_cid
N * @param handshake_status
N * @param protocol_mode
N*/
N#define HID_SUBEVENT_SET_PROTOCOL_RESPONSE                                 0x0B
N
N/** 
N * @format 12LV
N * @param subevent_code
N * @param hid_cid
N * @param report_len
N * @param report
N*/
N#define HID_SUBEVENT_REPORT                                                0x0C
N
N/**
N * @format 121
N * @param subevent_code
N * @param hid_cid
N * @param status
N */
N#define HID_SUBEVENT_DESCRIPTOR_AVAILABLE                                  0x0D
N
N/**
N * @format 1222
N * @param subevent_code
N * @param hid_cid
N * @param host_max_latency
N * @param host_min_timeout
N */
N#define HID_SUBEVENT_SNIFF_SUBRATING_PARAMS                                0x0E
N
N// HIDS Meta Event Group
N
N/**
N * @format 12
N * @param subevent_code
N * @param con_handle
N*/
N#define HIDS_SUBEVENT_CAN_SEND_NOW                                          0x01
N
N/**
N * @format 121
N * @param subevent_code
N * @param con_handle
N * @param protocol_mode
N*/
N#define HIDS_SUBEVENT_PROTOCOL_MODE                                         0x02
N
N/**
N * @format 121
N * @param subevent_code
N * @param con_handle
N * @param enable
N*/
N#define HIDS_SUBEVENT_BOOT_MOUSE_INPUT_REPORT_ENABLE                        0x03
N
N/**
N * @format 121
N * @param subevent_code
N * @param con_handle
N * @param enable
N*/
N#define HIDS_SUBEVENT_BOOT_KEYBOARD_INPUT_REPORT_ENABLE                     0x04
N
N/**
N * @format 121
N * @param subevent_code
N * @param con_handle
N * @param enable
N*/
N#define HIDS_SUBEVENT_INPUT_REPORT_ENABLE                                   0x05
N
N/**
N * @format 121
N * @param subevent_code
N * @param con_handle
N * @param enable
N*/
N#define HIDS_SUBEVENT_OUTPUT_REPORT_ENABLE                                  0x06
N
N/**
N * @format 121
N * @param subevent_code
N * @param con_handle
N * @param enable
N*/
N#define HIDS_SUBEVENT_FEATURE_REPORT_ENABLE                                 0x07
N
N/**
N * @format 12
N * @param subevent_code
N * @param con_handle
N*/
N#define HIDS_SUBEVENT_SUSPEND                                               0x08
N
N/**
N * @format 12
N * @param subevent_code
N * @param con_handle
N*/
N#define HIDS_SUBEVENT_EXIT_SUSPEND                                          0x09
N
N/**
N * @format 1211
N * @param subevent_code
N * @param con_handle
N * @param measurement_type 0 - force magnitude, 1 - torque magnitude, see cycling_power_sensor_measurement_context_t
N * @param is_enhanced
N*/
N#define GATTSERVICE_SUBEVENT_CYCLING_POWER_START_CALIBRATION               0x01
N
N/**
N * @format 12
N * @param subevent_code
N * @param con_handle
N*/
N#define GATTSERVICE_SUBEVENT_CYCLING_POWER_BROADCAST_START                 0x02
N
N/**
N * @format 12
N * @param subevent_code
N * @param con_handle
N*/
N#define GATTSERVICE_SUBEVENT_CYCLING_POWER_BROADCAST_STOP                  0x03
N
N/**
N * @format 12111
N * @param subevent_code
N * @param hids_cid
N * @param status
N * @param num_instances
N * @param poll_bitmap
N*/
N#define GATTSERVICE_SUBEVENT_BATTERY_SERVICE_CONNECTED                     0x04
N
N/**
N * @format 12111
N * @param subevent_code
N * @param hids_cid
N * @param sevice_index
N * @param att_status  see ATT errors in bluetooth.h  
N * @param level
N*/
N#define GATTSERVICE_SUBEVENT_BATTERY_SERVICE_LEVEL                         0x05
N
N/**
N * @format 1H1
N * @param subevent_code
N * @param con_handle
N * @param att_status
N */
N#define GATTSERVICE_SUBEVENT_DEVICE_INFORMATION_DONE                       0x06
N
N/**
N * @format 1H1T
N * @param subevent_code
N * @param con_handle
N * @param att_status
N * @param value
N */
N#define GATTSERVICE_SUBEVENT_DEVICE_INFORMATION_MANUFACTURER_NAME          0x07
N
N/**
N * @format 1H1T
N * @param subevent_code
N * @param con_handle
N * @param att_status
N * @param value
N */
N#define GATTSERVICE_SUBEVENT_DEVICE_INFORMATION_MODEL_NUMBER               0x08
N
N/**
N * @format 1H1T
N * @param subevent_code
N * @param con_handle
N * @param att_status
N * @param value
N */
N#define GATTSERVICE_SUBEVENT_DEVICE_INFORMATION_SERIAL_NUMBER              0x09
N
N/**
N * @format 1H1T
N * @param subevent_code
N * @param con_handle
N * @param att_status
N * @param value
N */
N#define GATTSERVICE_SUBEVENT_DEVICE_INFORMATION_HARDWARE_REVISION          0x0A
N
N/**
N * @format 1H1T
N * @param subevent_code
N * @param con_handle
N * @param att_status
N * @param value
N */
N#define GATTSERVICE_SUBEVENT_DEVICE_INFORMATION_FIRMWARE_REVISION          0x0B
N
N/**
N * @format 1H1T
N * @param subevent_code
N * @param con_handle
N * @param att_status
N * @param value
N */
N#define GATTSERVICE_SUBEVENT_DEVICE_INFORMATION_SOFTWARE_REVISION          0x0C
N
N/**
N * @format 1H1413
N * @param subevent_code
N * @param con_handle
N * @param att_status
N * @param manufacturer_id_low
N * @param manufacturer_id_high
N * @param organizationally_unique_id
N */
N#define GATTSERVICE_SUBEVENT_DEVICE_INFORMATION_SYSTEM_ID                  0x0D
N
N/**
N * @format 1H122
N * @param subevent_code
N * @param con_handle
N * @param att_status
N * @param value_a
N * @param value_b
N */
N#define GATTSERVICE_SUBEVENT_DEVICE_INFORMATION_IEEE_REGULATORY_CERTIFICATION     0x0E
N
N/**
N * @format 1H11222
N * @param subevent_code
N * @param con_handle
N * @param att_status
N * @param vendor_source_id
N * @param vendor_id
N * @param product_id
N * @param product_version
N */
N#define GATTSERVICE_SUBEVENT_DEVICE_INFORMATION_PNP_ID                    0x0F
N
N/**
N * @format 1H1
N * @param subevent_code
N * @param con_handle
N * @param att_status
N */
N#define GATTSERVICE_SUBEVENT_SCAN_PARAMETERS_SERVICE_CONNECTED            0x10
N
N/**
N * @format 1H
N * @param subevent_code
N * @param con_handle
N */
N#define GATTSERVICE_SUBEVENT_SPP_SERVICE_CONNECTED                        0x11
N
N/**
N * @format 1H
N * @param subevent_code
N * @param con_handle
N */
N#define GATTSERVICE_SUBEVENT_SPP_SERVICE_DISCONNECTED                     0x12
N
N/**
N * @format 12111
N * @param subevent_code
N * @param hids_cid
N * @param status
N * @param protocol_mode
N * @param num_instances
N*/
N#define GATTSERVICE_SUBEVENT_HID_SERVICE_CONNECTED                        0x13
N
N/** 
N * @format 1211LV
N * @param subevent_code
N * @param hids_cid
N * @param service_index
N * @param report_id
N * @param report_len
N * @param report
N*/
N#define GATTSERVICE_SUBEVENT_HID_REPORT                                   0x14
N
N/**
N * @format 1212111
N * @param subevent_code
N * @param hids_cid
N * @param service_index
N * @param base_usb_hid_version      Version number of base USB HID Specification implemented by HID Device
N * @param country_code              Country HID Device hardware is localized for (not localized: 0x00)
N * @param remote_wake               Indicates whether HID Device is capable of sending a wake-signal to a HID Host
N * @param normally_connectable      Indicates whether HID Device will be advertising when bonded but not connected.
N*/
N#define GATTSERVICE_SUBEVENT_HID_INFORMATION                              0x15
N
N/**
N * @format 1211
N * @param subevent_code
N * @param hids_cid
N * @param service_index
N * @param protocol_mode    see hid_protocol_mode_t in btstack_hid.h
N*/
N#define GATTSERVICE_SUBEVENT_HID_PROTOCOL_MODE                            0x16
N
N/**
N * @format 121
N * @param subevent_code
N * @param hids_cid
N * @param configuration    
N*/
N#define GATTSERVICE_SUBEVENT_HID_SERVICE_REPORTS_NOTIFICATION             0x17
N
N/**
N * @format 1H22
N * @param subevent_code
N * @param con_handle
N * @param max_scan_interval
N * @param min_scan_window
N */
N#define GATTSERVICE_SUBEVENT_SCAN_PARAMETERS_SERVICE_SCAN_INTERVAL_UPDATE 0x18
N
N
N// MAP Meta Event Group
N
N/**
N * @format 121BH1
N * @param subevent_code
N * @param map_cid
N * @param status
N * @param bd_addr
N * @param con_handle
N * @param incoming
N */
N#define MAP_SUBEVENT_CONNECTION_OPENED                                    0x01
N
N/**
N * @format 12
N * @param subevent_code
N * @param map_cid
N*/
N#define MAP_SUBEVENT_CONNECTION_CLOSED                                    0x02
N
N/**
N * @format 121
N * @param subevent_code
N * @param map_cid
N * @param status
N */
N#define MAP_SUBEVENT_OPERATION_COMPLETED                                  0x03
N
N
N/**
N * @format 12LV
N * @param subevent_code
N * @param map_cid
N * @param name_len
N * @param name
N */
N#define MAP_SUBEVENT_FOLDER_LISTING_ITEM                                  0x04
N
N/**
N * @format 12D
N * @param subevent_code
N * @param map_cid
N * @param handle
N
N */
N#define MAP_SUBEVENT_MESSAGE_LISTING_ITEM                                 0x05
N
N/**
N * @format 12
N * @param subevent_code
N * @param map_cid
N */
N#define MAP_SUBEVENT_PARSING_DONE                                         0x06
N
N
N// MESH Meta Event Group
N
N/**
N * @format 1
N * @param subevent_code
N */
N#define MESH_SUBEVENT_CAN_SEND_NOW                                          0x01
N
N/**
N * @format 11
N * @param subevent_code
N * @param status
N */
N#define MESH_SUBEVENT_PB_TRANSPORT_PDU_SENT                                          0x02
N
N/**
N * @format 1121
N * @param subevent_code
N * @param status
N * @param pb_transport_cid
N * @param pb_type
N */
N#define MESH_SUBEVENT_PB_TRANSPORT_LINK_OPEN                                         0x03
N
N/**
N * @format 112
N * @param subevent_code
N * @param pb_transport_cid
N * @param reason
N */
N#define MESH_SUBEVENT_PB_TRANSPORT_LINK_CLOSED                                       0x04
N
N/**
N * @format 121
N * @param subevent_code
N * @param pb_transport_cid
N * @param attention_time in seconds
N */
N#define MESH_SUBEVENT_PB_PROV_ATTENTION_TIMER                                        0x10
N
N/**
N * Device Role
N * @format 12
N * @param subevent_code
N * @param pb_transport_cid
N */
N#define MESH_SUBEVENT_PB_PROV_START_EMIT_PUBLIC_KEY_OOB                              0x11
N
N/**
N * Device Role
N * @format 12
N * @param subevent_code
N * @param pb_transport_cid
N */
N#define MESH_SUBEVENT_PB_PROV_STOP_EMIT_PUBLIC_KEY_OOB                               0x12
N
N/**
N * Device Role
N * @format 12
N * @param subevent_code
N * @param pb_transport_cid
N */
N#define MESH_SUBEVENT_PB_PROV_INPUT_OOB_REQUEST                                      0x13
N
N/**
N * Device Role
N * @format 124
N * @param subevent_code
N * @param pb_transport_cid
N * @param output_oob number
N */
N#define MESH_SUBEVENT_PB_PROV_START_EMIT_OUTPUT_OOB                                  0x15
N
N/**
N * Device Role
N * @format 12
N * @param subevent_code
N * @param pb_transport_cid
N */
N#define MESH_SUBEVENT_PB_PROV_STOP_EMIT_OUTPUT_OOB                                   0x16
N
N/**
N * Provisioner Role
N * @format 12
N * @param subevent_code
N * @param pb_transport_cid
N */
N#define MESH_SUBEVENT_PB_PROV_START_RECEIVE_PUBLIC_KEY_OOB                           0x17
N
N/**
N * Provisioner Role
N * @format 12
N * @param subevent_code
N * @param pb_transport_cid
N */
N#define MESH_SUBEVENT_PB_PROV_STOP_RECEIVE_PUBLIC_KEY_OOB                            0x18
N
N/**
N * Provisioner Role
N * @format 12
N * @param subevent_code
N * @param pb_transport_cid
N */
N#define MESH_SUBEVENT_PB_PROV_OUTPUT_OOB_REQUEST                                     0x19
N
N/**
N * Provisioner Role
N * @format 124
N * @param subevent_code
N * @param pb_transport_cid
N * @param output_oob number
N */
N#define MESH_SUBEVENT_PB_PROV_START_EMIT_INPUT_OOB                                   0x1a
N
N/**
N * Provisioner Role
N * @format 12
N * @param subevent_code
N * @param pb_transport_cid
N */
N#define MESH_SUBEVENT_PB_PROV_STOP_EMIT_INPUT_OOB                                    0x1b
N
N/**
N * Provisioner Role
N * @format 1212111212
N * @param subevent_code
N * @param pb_transport_cid
N * @param num_elements
N * @param algorithms
N * @param public_key
N * @param static_oob_type
N * @param output_oob_size
N * @param output_oob_action
N * @param input_oob_size
N * @param input_oob_action
N */
N#define MESH_SUBEVENT_PB_PROV_CAPABILITIES                                           0x1c
N
N/**
N * @format 12
N * @param subevent_code
N * @param pb_transport_cid
N */
N#define MESH_SUBEVENT_PB_PROV_COMPLETE                                               0x1d
N
N/**
N * @format 11
N * @param subevent_code
N * @param attention_time in seconds
N */
N#define MESH_SUBEVENT_ATTENTION_TIMER                                                0x1e
N
N/**
N * @format 1H
N * @param subevent_code
N * @param con_handle
N */
N#define MESH_SUBEVENT_PROXY_CONNECTED                                                0x20
N
N/**
N * @format 1H
N * @param subevent_code
N * @param con_handle
N */
N#define MESH_SUBEVENT_PROXY_PDU_SENT                                                 0x21
N
N/**
N * @format 1H
N * @param subevent_code
N * @param con_handle
N */
N#define MESH_SUBEVENT_PROXY_DISCONNECTED                                             0x22
N
N/**
N * @format 1H
N * @param subevent_code
N * @param con_handle
N */
N#define MESH_SUBEVENT_MESSAGE_SENT                                                   0x23
N
N/**
N * @format 114411
N * @param subevent_code
N * @param element_index
N * @param model_identifier
N * @param state_identifier
N * @param reason
N * @param value
N */
N#define MESH_SUBEVENT_STATE_UPDATE_BOOL                                              0x24
N
N/**
N * @format 114412
N * @param subevent_code
N * @param element_index
N * @param model_identifier
N * @param state_identifier
N * @param reason
N * @param value
N */
N#define MESH_SUBEVENT_STATE_UPDATE_INT16                                              0x25
N
N// Mesh Client Events
N/**
N * @format 11442
N * @param subevent_code
N * @param element_index
N * @param model_identifier
N * @param opcode
N * @param dest
N */
N#define MESH_SUBEVENT_MESSAGE_NOT_ACKNOWLEDGED                                        0x30
N
N/**
N * @format 121114
N * @param subevent_code
N * @param dest
N * @param status
N * @param present_value
N * @param target_value       optional, if value > 0, than remaining_time_ms must be read
N * @param remaining_time_ms  
N */
N#define MESH_SUBEVENT_GENERIC_ON_OFF                                                  0x31
N
N/**
N * @format 121224
N * @param subevent_code
N * @param dest
N * @param status
N * @param present_value
N * @param target_value       optional, if value > 0, than remaining_time_ms must be read
N * @param remaining_time_ms  
N */
N#define MESH_SUBEVENT_GENERIC_LEVEL                                                   0x32
N
N/**
N * @format 1222211
N * @param subevent_code
N * @param dest
N * @param netkey_index
N * @param appkey_index
N * @param company_id
N * @param test_id
N * @param acknowledged
N */
N#define MESH_SUBEVENT_HEALTH_PERFORM_TEST                                            0x33
N
N/**
N * @format 11
N * @param subevent_code
N * @param element_index
N */
N#define MESH_SUBEVENT_HEALTH_ATTENTION_TIMER_CHANGED                                 0x34
N
N/**
N * @format 1211
N * @param subevent_code
N * @param dest
N * @param status
N * @param transition_time_gdtt  
N */
N#define MESH_SUBEVENT_GENERIC_DEFAULT_TRANSITION_TIME                                0x35
N
N/**
N * @format 1211
N * @param subevent_code
N * @param dest
N * @param foundation_status
N * @param secure_network_beacon_state  
N */
N#define MESH_SUBEVENT_CONFIGURATION_BEACON                                           0x36
N
N// Composition Data has variable of element descriptions, with two lists of model lists
N// Use .. getters to access data
N#define MESH_SUBEVENT_CONFIGURATION_COMPOSITION_DATA                                 0x37
N
N/**
N * @format 1211
N * @param subevent_code
N * @param dest
N * @param foundation_status
N * @param default_ttl  
N */
N#define MESH_SUBEVENT_CONFIGURATION_DEFAULT_TTL                                      0x38
N
N/**
N * @format 1211
N * @param subevent_code
N * @param dest
N * @param foundation_status
N * @param gatt_proxy_state  
N */
N#define MESH_SUBEVENT_CONFIGURATION_GATT_PROXY                                       0x39
N
N/**
N * @format 121111
N * @param subevent_code
N * @param dest
N * @param foundation_status
N * @param relay
N * @param retransmit_count                          the number of times that packet is transmitted for each packet that is relayed.
N * @param retransmit_interval_ms                    retransmission interval in ms
N */
N#define MESH_SUBEVENT_CONFIGURATION_RELAY                                            0x40
N
N
N/**
N * @format 12122111114
N * @param subevent_code
N * @param dest                                      element_address
N * @param foundation_status
N * @param publish_address
N * @param appkey_index
N * @param credential_flag
N * @param publish_ttl
N * @param publish_period
N * @param publish_retransmit_count
N * @param publish_retransmit_interval_steps
N * @param model_identifier
N */
N#define MESH_SUBEVENT_CONFIGURATION_MODEL_PUBLICATION                                0x41
N
N/**
N * @format 12124
N * @param subevent_code
N * @param dest
N * @param foundation_status
N * @param address  
N * @param model_identifier
N */
N#define MESH_SUBEVENT_CONFIGURATION_MODEL_SUBSCRIPTION                               0x42
N
N/**
N * @format 1214112
N * @param subevent_code
N * @param dest
N * @param foundation_status
N * @param model_identifier
N * @param num_subscription_addresses
N * @param subscription_address_pos
N * @param subscription_address_item
N */
N#define MESH_SUBEVENT_CONFIGURATION_MODEL_SUBSCRIPTION_LIST_ITEM                     0x43   
N
N
N/**
N * @format 121
N * @param subevent_code
N * @param dest
N * @param foundation_status
N */
N#define MESH_SUBEVENT_CONFIGURATION_NETKEY_INDEX                                      0x44
N
N/**
N * @format 121112
N * @param subevent_code
N * @param dest
N * @param foundation_status
N * @param num_netkey_indexes
N * @param netkey_index_pos
N * @param netkey_index_item
N */
N#define MESH_SUBEVENT_CONFIGURATION_NETKEY_INDEX_LIST_ITEM                             0x45
N
N/**
N * @format 12122
N * @param subevent_code
N * @param dest
N * @param foundation_status
N * @param netkey_index_item
N * @param appkey_index_item
N */
N#define MESH_SUBEVENT_CONFIGURATION_APPKEY_INDEX                                       0x46
N
N/**
N * @format 12121122
N * @param subevent_code
N * @param dest
N * @param foundation_status
N * @param netkey_index
N * @param num_appkey_indexes
N * @param appkey_index_pos
N * @param netkey_index_item
N * @param appkey_index_item
N */
N #define MESH_SUBEVENT_CONFIGURATION_APPKEY_INDEX_LIST_ITEM                            0x47
N
N/**
N * @format 12121
N * @param subevent_code
N * @param dest
N * @param foundation_status
N * @param netkey_index_item
N * @param identity_status
N */
N#define MESH_SUBEVENT_CONFIGURATION_NODE_IDENTITY                                      0x48
N
N/**
N * @format 12124
N * @param subevent_code
N * @param dest
N * @param foundation_status
N * @param appkey_index
N * @param model_identifier
N */
N#define MESH_SUBEVENT_CONFIGURATION_MODEL_APP                                           0x49
N
N/**
N * @format 1214112
N * @param subevent_code
N * @param dest
N * @param foundation_status
N * @param model_id
N * @param num_appkey_indexes
N * @param appkey_index_pos
N * @param appkey_index_item
N */
N#define MESH_SUBEVENT_CONFIGURATION_MODEL_APP_LIST_ITEM                                 0x50
N
N/**
N * @format 121
N * @param subevent_code
N * @param dest
N * @param foundation_status
N */
N#define MESH_SUBEVENT_CONFIGURATION_NODE_RESET                                          0x51
N
N/**
N * @format 1211
N * @param subevent_code
N * @param dest
N * @param foundation_status
N * @param friend_state
N */
N#define MESH_SUBEVENT_CONFIGURATION_FRIEND                                              0x52
N
N/**
N * @format 12121
N * @param subevent_code
N * @param dest
N * @param foundation_status
N * @param netkey_index
N * @param phase
N */
N#define MESH_SUBEVENT_CONFIGURATION_KEY_REFRESH_PHASE                                   0x53
N
N/**
N * @format 121222122
N * @param subevent_code
N * @param dest
N * @param foundation_status
N * @param heartbeat_destination
N * @param count_S
N * @param period_S
N * @param ttl
N * @param features
N * @param netkey_index
N */
N#define MESH_SUBEVENT_CONFIGURATION_HEARTBEAT_PUBLICATION                               0x54
N
N/**
N * @format 121222211
N * @param subevent_code
N * @param dest
N * @param foundation_status
N * @param heartbeat_destination
N * @param heartbeat_source
N * @param count_S
N * @param period_S
N * @param min_hops
N * @param max_hops
N */
N#define MESH_SUBEVENT_CONFIGURATION_HEARTBEAT_SUBSCRIPTION                              0x55
N
N/**
N * @format 12123
N * @param subevent_code
N * @param dest
N * @param foundation_status
N * @param lpn_address
N * @param poll_timeout
N */
N#define MESH_SUBEVENT_CONFIGURATION_LOW_POWER_NODE_POLL_TIMEOUT                         0x56
N
N/**
N * @format 12112
N * @param subevent_code
N * @param dest
N * @param foundation_status
N * @param transmit_count
N * @param transmit_interval_steps_ms
N */
N#define MESH_SUBEVENT_CONFIGURATION_NETWORK_TRANSMIT                                    0x57
N
N
N#endif
L 56 "..\..\..\..\src\btstack_util.h" 2
N#include "btstack_linked_list.h"
N	
N// hack: compilation with the android ndk causes an error as there's a reverse_64 macro
N#ifdef reverse_64
S#undef reverse_64
N#endif
N
N// will be moved to daemon/btstack_device_name_db.h
N
N
N/**
N * @brief The device name type
N */
N#define DEVICE_NAME_LEN 248
Ntypedef uint8_t device_name_t[DEVICE_NAME_LEN+1]; 
Xtypedef uint8_t device_name_t[248+1]; 
N
N/* API_START */
N
N/**
N * @brief Minimum function for uint32_t
N * @param a
N * @param b
N * @return value
N */
Nuint32_t btstack_min(uint32_t a, uint32_t b);
N
N/**
N * @brief Maximum function for uint32_t
N * @param a
N * @param b
N * @return value
N */
Nuint32_t btstack_max(uint32_t a, uint32_t b);
N
N/**
N * @brief Calculate delta between two points in time
N * @returns time_a - time_b - result > 0 if time_a is newer than time_b
N */
Nint32_t btstack_time_delta(uint32_t time_a, uint32_t time_b);
N
N/** 
N * @brief Read 16/24/32 bit little endian value from buffer
N * @param buffer
N * @param position in buffer
N * @return value
N */
Nuint16_t little_endian_read_16(const uint8_t * buffer, int position);
Nuint32_t little_endian_read_24(const uint8_t * buffer, int position);
Nuint32_t little_endian_read_32(const uint8_t * buffer, int position);
N
N/** 
N * @brief Write 16/32 bit little endian value into buffer
N * @param buffer
N * @param position in buffer
N * @param value
N */
Nvoid little_endian_store_16(uint8_t * buffer, uint16_t position, uint16_t value);
Nvoid little_endian_store_24(uint8_t * buffer, uint16_t position, uint32_t value);
Nvoid little_endian_store_32(uint8_t * buffer, uint16_t position, uint32_t value);
N
N/** 
N * @brief Read 16/24/32 bit big endian value from buffer
N * @param buffer
N * @param position in buffer
N * @return value
N */
Nuint32_t big_endian_read_16(const uint8_t * buffer, int position);
Nuint32_t big_endian_read_24(const uint8_t * buffer, int position);
Nuint32_t big_endian_read_32(const uint8_t * buffer, int position);
N
N/** 
N * @brief Write 16/32 bit big endian value into buffer
N * @param buffer
N * @param position in buffer
N * @param value
N */
Nvoid big_endian_store_16(uint8_t * buffer, uint16_t position, uint16_t value);
Nvoid big_endian_store_24(uint8_t * buffer, uint16_t position, uint32_t value);
Nvoid big_endian_store_32(uint8_t * buffer, uint16_t position, uint32_t value);
N
N
N/**
N * @brief Swap bytes in 16 bit integer
N */
E "..\..\..\..\src\btstack_util.h" 140 8 identifier "inline" is undefined
E "..\..\..\..\src\btstack_util.h" 140 15 "uint16_t" has already been declared in the current scope
E "..\..\..\..\src\btstack_util.h" 140 24 expected a ";"
Nstatic inline uint16_t btstack_flip_16(uint16_t value){
N    return (uint16_t)((value & 0xffu) << 8) | (value >> 8);
N}
N
N/** 
N * @brief Check for big endian system
N * @returns 1 if on big endian
N */
Nstatic inline int btstack_is_big_endian(void){
N	uint16_t sample = 0x0100;
N	return (int) *(uint8_t*) &sample;
N}
N
N/** 
N * @brief Check for little endian system
N * @returns 1 if on little endian
N */
Nstatic inline int btstack_is_little_endian(void){
N	uint16_t sample = 0x0001;
N	return (int) *(uint8_t*) &sample;
N}
N
N/**
N * @brief Copy from source to destination and reverse byte order
N * @param src
N * @param dest
N * @param len
N */
W "..\..\..\..\src\btstack_util.h" 168 65 parsing restarts here after previous syntax error
Nvoid reverse_bytes(const uint8_t * src, uint8_t * dest, int len);
N
N/**
N * @brief Wrapper around reverse_bytes for common buffer sizes
N * @param src
N * @param dest
N */
Nvoid reverse_24 (const uint8_t * src, uint8_t * dest);
Nvoid reverse_48 (const uint8_t * src, uint8_t * dest);
Nvoid reverse_56 (const uint8_t * src, uint8_t * dest);
Nvoid reverse_64 (const uint8_t * src, uint8_t * dest);
Nvoid reverse_128(const uint8_t * src, uint8_t * dest);
Nvoid reverse_256(const uint8_t * src, uint8_t * dest);
N
Nvoid reverse_bd_addr(const bd_addr_t src, bd_addr_t dest);
N
N/** 
N * @brief ASCII character for 4-bit nibble
N * @return character
N */
Nchar char_for_nibble(int nibble);
N
N/**
N * @brif 4-bit nibble from ASCII character
N * @return value
N */
Nint nibble_for_char(char c);
N
N/**
N * @brief Compare two Bluetooth addresses
N * @param a
N * @param b
N * @return 0 if equal
N */
Nint bd_addr_cmp(const bd_addr_t a, const bd_addr_t b);
N
N/**
N * @brief Copy Bluetooth address
N * @param dest
N * @param src
N */
Nvoid bd_addr_copy(bd_addr_t dest, const bd_addr_t src);
N
N/**
N * @brief Use printf to write hexdump as single line of data
N */
Nvoid printf_hexdump(const void * data, int size);
N
N/**
N * @brief Create human readable representation for UUID128
N * @note uses fixed global buffer
N * @return pointer to UUID128 string
N */
Nchar * uuid128_to_str(const uint8_t * uuid);
N
N/**
N * @brief Create human readable represenationt of Bluetooth address
N * @note uses fixed global buffer
N * @return pointer to Bluetooth address string
N */
Nchar * bd_addr_to_str(const bd_addr_t addr);
N
N/**
N * @brief Replace address placeholder '00:00:00:00:00:00' with Bluetooth address
N * @param buffer
N * @param size
N * @param address
N */
E "..\..\..\..\src\btstack_util.h" 236 60 variable "uint16_t"  is not a type name
Nvoid btstack_replace_bd_addr_placeholder(uint8_t * buffer, uint16_t size, const bd_addr_t address);
N
N/** 
N * @brief Parse Bluetooth address
N * @param address_string
N * @param buffer for parsed address
N * @return 1 if string was parsed successfully
N */
Nint sscanf_bd_addr(const char * addr_string, bd_addr_t addr);
N
N/**
N * @brief Constructs UUID128 from 16 or 32 bit UUID using Bluetooth base UUID
N * @param uuid128 output buffer
N * @param short_uuid
N */
Nvoid uuid_add_bluetooth_prefix(uint8_t * uuid128, uint32_t short_uuid);
N
N/**
N * @brief Checks if UUID128 has Bluetooth base UUID prefix
N * @param uui128 to test
N * @return 1 if it can be expressed as UUID32
N */
Nint  uuid_has_bluetooth_prefix(const uint8_t * uuid128);
N
N/**
N * @brief Parse unsigned number 
N * @param str to parse
N * @return value
N */
Nuint32_t btstack_atoi(const char * str);
N
N/**
N * @brief Return number of digits of a uint32 number
N * @param uint32_number
N * @return num_digits
N */
Nint string_len_for_uint32(uint32_t i);
N
N/**
N * @brief Return number of set bits in a uint32 number
N * @param uint32_number
N * @return num_set_bits
N */
Nint count_set_bits_uint32(uint32_t x);
N
N/**
N * @brief Check CRC8 using ETSI TS 101 369 V6.3.0.
N * @note Only used by RFCOMM
N * @param data
N * @param len
N * @param check_sum
N */
E "..\..\..\..\src\btstack_util.h" 288 44 variable "uint16_t"  is not a type name
Nuint8_t btstack_crc8_check(uint8_t * data, uint16_t len, uint8_t check_sum);
N
N/**
N * @brief Calculate CRC8 using ETSI TS 101 369 V6.3.0. 
N * @note Only used by RFCOMM
N * @param data
N * @param len
N */
E "..\..\..\..\src\btstack_util.h" 296 43 variable "uint16_t"  is not a type name
Nuint8_t btstack_crc8_calc(uint8_t * data, uint16_t len);
N
N/**
N * @brief Get next cid
N * @param current_cid
N * @return next cid skiping 0
N */
E "..\..\..\..\src\btstack_util.h" 303 1 variable "uint16_t"  is not a type name
E "..\..\..\..\src\btstack_util.h" 303 41 variable "uint16_t"  is not a type name
Nuint16_t btstack_next_cid_ignoring_zero(uint16_t current_cid);
N
N/* API_END */
N
N#if defined __cplusplus
X#if 0L
S}
N#endif
N		
N#endif // BTSTACK_UTIL_H
L 50 "..\..\..\..\src\ble/att_dispatch.h" 2
N
N#if defined __cplusplus
X#if 0L
Sextern "C" {
N#endif
N
N/**
N * @brief reset att dispatchter
N * @param packet_hander for ATT client packets
N */
Nvoid att_dispatch_register_client(btstack_packet_handler_t packet_handler);
N
N/**
N * @brief reset att dispatchter
N * @param packet_hander for ATT server packets
N */
Nvoid att_dispatch_register_server(btstack_packet_handler_t packet_handler);
N
N/**
N * @brief can send packet for client
N * @param con_handle
N */
Nint att_dispatch_client_can_send_now(hci_con_handle_t con_handle);
N
N/**
N * @brief can send packet for server
N * @param con_handle
N */
Nint att_dispatch_server_can_send_now(hci_con_handle_t con_handle);
N
N/** 
N * @brief Request emission of L2CAP_EVENT_CAN_SEND_NOW as soon as possible for client
N * @note L2CAP_EVENT_CAN_SEND_NOW might be emitted during call to this function
N *       so packet handler should be ready to handle it
N * @param con_handle
N */
Nvoid att_dispatch_client_request_can_send_now_event(hci_con_handle_t con_handle);
N
N/** 
N * @brief Request emission of L2CAP_EVENT_CAN_SEND_NOW as soon as possible for server
N * @note L2CAP_EVENT_CAN_SEND_NOW might be emitted during call to this function
N *       so packet handler should be ready to handle it
N * @param con_handle
N */
Nvoid att_dispatch_server_request_can_send_now_event(hci_con_handle_t con_handle);
N
N/** 
N* @brief Used for propogating a updated MTU from att_server to gatt_client
N* @param con_handle
N* @param mtu
N*/
E "..\..\..\..\src\ble/att_dispatch.h" 100 69 variable "uint16_t"  is not a type name
Nvoid att_dispatch_server_mtu_exchanged(hci_con_handle_t con_handle, uint16_t new_mtu);
N
N/**
N* @brief Used for propogating a updated MTU from gatt_client to att_server
N* @param con_handle
N* @param mtu
N*/
E "..\..\..\..\src\ble/att_dispatch.h" 107 69 variable "uint16_t"  is not a type name
Nvoid att_dispatch_client_mtu_exchanged(hci_con_handle_t con_handle, uint16_t new_mtu);
N
N#if defined __cplusplus
X#if 0L
S}
N#endif
N
N#endif // ATT_DISPATCH_H
L 47 "..\..\..\..\src\ble\gatt_client.c" 2
N#include "ad_parser.h"
L 1 "..\..\..\..\src\ad_parser.h" 1
N/*
N * Copyright (C) 2014 BlueKitchen GmbH
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions
N * are met:
N *
N * 1. Redistributions of source code must retain the above copyright
N *    notice, this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright
N *    notice, this list of conditions and the following disclaimer in the
N *    documentation and/or other materials provided with the distribution.
N * 3. Neither the name of the copyright holders nor the names of
N *    contributors may be used to endorse or promote products derived
N *    from this software without specific prior written permission.
N * 4. Any redistribution, use, or modification is done solely for
N *    personal benefit and not for any commercial purpose or for
N *    monetary gain.
N *
N * THIS SOFTWARE IS PROVIDED BY BLUEKITCHEN GMBH AND CONTRIBUTORS
N * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
N * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL MATTHIAS
N * RINGWALD OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
N * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
N * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
N * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
N * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
N * THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
N * SUCH DAMAGE.
N *
N * Please inquire about commercial licensing options at 
N * contact@bluekitchen-gmbh.com
N *
N */
N
N/**
N * @title AD Data Parser 
N *
N * AD Data (Advertisements and EIR) Parser
N */
N
N#ifndef AD_PARSER_H
N#define AD_PARSER_H
N
N#include "btstack_config.h"
N#include "btstack_bool.h"
N
N#include <stdint.h>
N
N#if defined __cplusplus
X#if 0L
Sextern "C" {
N#endif
N
N/* API_START */
N
Ntypedef struct ad_context {
N     const uint8_t * data;
N     uint8_t   offset;
N     uint8_t   length;
N} ad_context_t;
N
N// Advertising or Scan Response data iterator
Nvoid ad_iterator_init(ad_context_t *context, uint8_t ad_len, const uint8_t * ad_data);
Nbool ad_iterator_has_more(const ad_context_t * context);
Xunsigned char ad_iterator_has_more(const ad_context_t * context);
Nvoid ad_iterator_next(ad_context_t * context);
N
N// Access functions
Nuint8_t         ad_iterator_get_data_type(const ad_context_t * context);
Nuint8_t         ad_iterator_get_data_len(const ad_context_t * context);
Nconst uint8_t * ad_iterator_get_data(const ad_context_t * context);
N
N// convenience function on complete advertisements
E "..\..\..\..\src\ad_parser.h" 75 71 variable "uint16_t"  is not a type name
Nbool ad_data_contains_uuid16(uint8_t ad_len, const uint8_t * ad_data, uint16_t uuid16);
Xunsigned char ad_data_contains_uuid16(uint8_t ad_len, const uint8_t * ad_data, uint16_t uuid16);
Nbool ad_data_contains_uuid128(uint8_t ad_len, const uint8_t * ad_data, const uint8_t * uuid128);
Xunsigned char ad_data_contains_uuid128(uint8_t ad_len, const uint8_t * ad_data, const uint8_t * uuid128);
N
N/* API_END */
N
N#if defined __cplusplus
X#if 0L
S}
N#endif
N#endif // AD_PARSER_H
L 48 "..\..\..\..\src\ble\gatt_client.c" 2
N#include "ble/att_db.h"
L 1 "..\..\..\..\src\ble/att_db.h" 1
N/*
N * Copyright (C) 2014 BlueKitchen GmbH
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions
N * are met:
N *
N * 1. Redistributions of source code must retain the above copyright
N *    notice, this list of conditions and the following disclaimer.
N * 2. Redistributions in binary form must reproduce the above copyright
N *    notice, this list of conditions and the following disclaimer in the
N *    documentation and/or other materials provided with the distribution.
N * 3. Neither the name of the copyright holders nor the names of
N *    contributors may be used to endorse or promote products derived
N *    from this software without specific prior written permission.
N * 4. Any redistribution, use, or modification is done solely for
N *    personal benefit and not for any commercial purpose or for
N *    monetary gain.
N *
N * THIS SOFTWARE IS PROVIDED BY BLUEKITCHEN GMBH AND CONTRIBUTORS
N * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
N * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL MATTHIAS
N * RINGWALD OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
N * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
N * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
N * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
N * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
N * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
N * THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
N * SUCH DAMAGE.
N *
N * Please inquire about commercial licensing options at 
N * contact@bluekitchen-gmbh.com
N *
N */
N
N/**
N * @title ATT Database Engine
N *
N */
N
N#ifndef ATT_DB_H
N#define ATT_DB_H
N
N#include <stdint.h>
N#include "bluetooth.h"
N#include "btstack_linked_list.h"
N#include "btstack_defines.h"
N#include "btstack_bool.h"
N
N#if defined __cplusplus
X#if 0L
Sextern "C" {
N#endif
N
N// MARK: Attribute PDU Opcodes 
N#define ATT_ERROR_RESPONSE              0x01
N
N#define ATT_EXCHANGE_MTU_REQUEST        0x02
N#define ATT_EXCHANGE_MTU_RESPONSE       0x03
N
N#define ATT_FIND_INFORMATION_REQUEST    0x04
N#define ATT_FIND_INFORMATION_REPLY      0x05
N#define ATT_FIND_BY_TYPE_VALUE_REQUEST  0x06
N#define ATT_FIND_BY_TYPE_VALUE_RESPONSE 0x07
N
N#define ATT_READ_BY_TYPE_REQUEST        0x08
N#define ATT_READ_BY_TYPE_RESPONSE       0x09
N#define ATT_READ_REQUEST                0x0a
N#define ATT_READ_RESPONSE               0x0b
N#define ATT_READ_BLOB_REQUEST           0x0c
N#define ATT_READ_BLOB_RESPONSE          0x0d
N#define ATT_READ_MULTIPLE_REQUEST       0x0e
N#define ATT_READ_MULTIPLE_RESPONSE      0x0f
N#define ATT_READ_BY_GROUP_TYPE_REQUEST  0x10
N#define ATT_READ_BY_GROUP_TYPE_RESPONSE 0x11
N
N#define ATT_WRITE_REQUEST               0x12
N#define ATT_WRITE_RESPONSE              0x13
N
N#define ATT_PREPARE_WRITE_REQUEST       0x16
N#define ATT_PREPARE_WRITE_RESPONSE      0x17
N#define ATT_EXECUTE_WRITE_REQUEST       0x18
N#define ATT_EXECUTE_WRITE_RESPONSE      0x19
N
N#define ATT_HANDLE_VALUE_NOTIFICATION   0x1b
N#define ATT_HANDLE_VALUE_INDICATION     0x1d
N#define ATT_HANDLE_VALUE_CONFIRMATION   0x1e
N
N#define ATT_READ_MULTIPLE_VARIABLE_REQ  0x20
N#define ATT_READ_MULTIPLE_VARIABLE_RSP  0x21
N#define ATT_MULTIPLE_HANDLE_VALUE_NTF   0x23
N
N#define ATT_WRITE_COMMAND                0x52
N#define ATT_SIGNED_WRITE_COMMAND         0xD2
N
N
N// internal additions
N// 128 bit UUID used
N#define ATT_PROPERTY_UUID128             0x200
N// Read/Write Permission bits
N#define ATT_PROPERTY_READ_PERMISSION_BIT_0  0x0400
N#define ATT_PROPERTY_READ_PERMISSION_BIT_1  0x0800
N#define ATT_PROPERTY_WRITE_PERMISSION_BIT_0 0x0001
N#define ATT_PROPERTY_WRITE_PERMISSION_BIT_1 0x0010
N#define ATT_PROPERTY_READ_PERMISSION_SC     0x0020
N#define ATT_PROPERTY_WRITE_PERMISSION_SC    0x0080
N
N
Ntypedef struct att_connection {
N    hci_con_handle_t con_handle;
E "..\..\..\..\src\ble/att_db.h" 112 5 variable "uint16_t"  is not a type name
N    uint16_t mtu;       // initialized to ATT_DEFAULT_MTU (23), negotiated during MTU exchange
E "..\..\..\..\src\ble/att_db.h" 113 5 variable "uint16_t"  is not a type name
N    uint16_t max_mtu;   // local maximal L2CAP_MTU, set to l2cap_max_le_mtu()
N    bool     mtu_exchanged;
X    unsigned char     mtu_exchanged;
N    uint8_t  encryption_key_size;
N    uint8_t  authenticated;
N    uint8_t  authorized;
N    uint8_t  secure_connection;
N} att_connection_t;
N
N/* API_START */
N
N// map ATT ERROR CODES on to att_read_callback length
N#define ATT_READ_ERROR_CODE_OFFSET       0xfe00
N
N// custom BTstack ATT Response Pending for att_read_callback
N#define ATT_READ_RESPONSE_PENDING                 0xffff
N
N// internally used to signal write response pending
N#define ATT_INTERNAL_WRITE_RESPONSE_PENDING       0xfffe
N
N/**
N * @brief ATT Client Read Callback for Dynamic Data
N * - if buffer == NULL, don't copy data, just return size of value
N * - if buffer != NULL, copy data and return number bytes copied
N * If ENABLE_ATT_DELAYED_READ_RESPONSE is defined, you may return ATT_READ_RESPONSE_PENDING if data isn't available yet
N * @param con_handle of hci le connection
N * @param attribute_handle to be read
N * @param offset defines start of attribute value
N * @param buffer 
N * @param buffer_size
N * @return size of value if buffer is NULL, otherwise number of bytes copied
N */
E "..\..\..\..\src\ble/att_db.h" 144 19 expected a type specifier
E "..\..\..\..\src\ble/att_db.h" 144 70 variable "uint16_t"  is not a type name
E "..\..\..\..\src\ble/att_db.h" 144 97 variable "uint16_t"  is not a type name
E "..\..\..\..\src\ble/att_db.h" 144 132 variable "uint16_t"  is not a type name
E "..\..\..\..\src\ble/att_db.h" 144 41 function returning function is not allowed
E "..\..\..\..\src\ble/att_db.h" 144 9 "uint16_t" has already been declared in the current scope
Ntypedef uint16_t (*att_read_callback_t)(hci_con_handle_t con_handle, uint16_t attribute_handle, uint16_t offset, uint8_t * buffer, uint16_t buffer_size);
N
N/**
N * @brief ATT Client Write Callback for Dynamic Data
N * Each Prepared Write Request triggers a callback with transaction mode ATT_TRANSACTION_MODE_ACTIVE.
N * On Execute Write, the callback will be called with ATT_TRANSACTION_MODE_VALIDATE and allows to validate all queued writes and return an application error.
N * If none of the registered callbacks return an error for ATT_TRANSACTION_MODE_VALIDATE and the callback will be called with ATT_TRANSACTION_MODE_EXECUTE.
N * Otherwise, all callbacks will be called with ATT_TRANSACTION_MODE_CANCEL.
N *
N * If the additional validation step is not needed, just return 0 for all callbacks with transaction mode ATT_TRANSACTION_MODE_VALIDATE.
N *
N * @param con_handle of hci le connection
N * @param attribute_handle to be written
N * @param transaction - ATT_TRANSACTION_MODE_NONE for regular writes. For prepared writes: ATT_TRANSACTION_MODE_ACTIVE, ATT_TRANSACTION_MODE_VALIDATE, ATT_TRANSACTION_MODE_EXECUTE, ATT_TRANSACTION_MODE_CANCEL
N * @param offset into the value - used for queued writes and long attributes
N * @param buffer 
N * @param buffer_size
N * @param signature used for signed write commmands
N * @return 0 if write was ok, ATT_ERROR_PREPARE_QUEUE_FULL if no space in queue, ATT_ERROR_INVALID_OFFSET if offset is larger than max buffer
N */
Ntypedef int (*att_write_callback_t)(hci_con_handle_t con_handle, uint16_t attribute_handle, uint16_t transaction_mode, uint16_t offset, uint8_t *buffer, uint16_t buffer_size);
N
N// Read & Write Callbacks for handle range
Ntypedef struct att_service_handler {
N    btstack_linked_item_t * item;
E "..\..\..\..\src\ble/att_db.h" 169 14 a function type is not allowed here
N    uint16_t start_handle;
E "..\..\..\..\src\ble/att_db.h" 170 14 a function type is not allowed here
N    uint16_t end_handle;
E "..\..\..\..\src\ble/att_db.h" 171 5 identifier "att_read_callback_t" is undefined
N    att_read_callback_t read_callback;
N    att_write_callback_t write_callback;
N    btstack_packet_handler_t packet_handler;
N} att_service_handler_t;
N
N// MARK: ATT Operations
N
N/**
N * @brief setup ATT database
N * @param db
N */
Nvoid att_set_db(uint8_t const * db);
N
N/*
N * @brief set callback for read of dynamic attributes
N * @param callback
N */
E "..\..\..\..\src\ble/att_db.h" 188 28 identifier "att_read_callback_t" is undefined
Nvoid att_set_read_callback(att_read_callback_t callback);
N
N/**
N * @brief set callback for write of dynamic attributes
N * @param callback
N */
Nvoid att_set_write_callback(att_write_callback_t callback);
N
N/**
N * @brief debug helper, dump ATT database to stdout using log_info
N */
Nvoid att_dump_attributes(void);
N
N/**
N * @brief process ATT request against database and put response into response buffer
N * @param att_connection used for mtu and security properties
N * @param request_buffer, request_len: ATT request from clinet
N * @param response_buffer for result
N * @return len of data in response buffer. 0 = no response, 
N *          ATT_READ_RESPONSE_PENDING if it was returned at least once for dynamic data (requires ENABLE_ATT_DELAYED_READ_RESPONSE)
N */
Nuint16_t att_handle_request(att_connection_t * att_connection,
N                            uint8_t * request_buffer,
N                            uint16_t request_len,
E "..\..\..\..\src\ble/att_db.h" 209 10 function returning function is not allowed
N                            uint8_t * response_buffer);
N
N/**
N * @brief setup value notification in response buffer for a given handle and value
N * @param att_connection
N * @param attribute_handle
N * @param value
N * @param value_len
N * @param response_buffer for notification
N */
Nuint16_t att_prepare_handle_value_notification(att_connection_t * att_connection,
N                                               uint16_t attribute_handle,
N                                               const uint8_t *value,
N                                               uint16_t value_len, 
E "..\..\..\..\src\ble/att_db.h" 222 10 function returning function is not allowed
N                                               uint8_t * response_buffer);
N
N/**
N * @brief setup value indication in response buffer for a given handle and value
N * @param att_connection
N * @param attribute_handle
N * @param value
N * @param value_len
N * @param response_buffer for indication
N */
Nuint16_t att_prepare_handle_value_indication(att_connection_t * att_connection,
N                                             uint16_t attribute_handle,
N                                             const uint8_t *value,
N                                             uint16_t value_len, 
E "..\..\..\..\src\ble/att_db.h" 236 10 function returning function is not allowed
N                                             uint8_t * response_buffer);
N
N/**
N * @brief transcation queue of prepared writes, e.g., after disconnect
N * @return att_connection
N */
Nvoid att_clear_transaction_queue(att_connection_t * att_connection);
N
N// att_read_callback helpers for a various data types
N
N/**
N * @brief Handle read of blob like data for att_read_callback
N * @param blob of data
N * @param blob_size of blob
N * @param offset from att_read_callback
N * @param buffer from att_read_callback
N * @param buffer_size from att_read_callback
N * @return value size for buffer == 0 and num bytes copied otherwise
N */
E "..\..\..\..\src\ble/att_db.h" 259 10 function returning function is not allowed
Nuint16_t att_read_callback_handle_blob(const uint8_t * blob, uint16_t blob_size, uint16_t offset, uint8_t * buffer, uint16_t buffer_size);
N
N/**
N * @brief Handle read of little endian unsigned 32 bit value for att_read_callback
N * @param value
N * @param offset from att_read_callback
N * @param buffer from att_read_callback
N * @param buffer_size from att_read_callback
N * @return value size for buffer == 0 and num bytes copied otherwise
N */
E "..\..\..\..\src\ble/att_db.h" 269 10 function returning function is not allowed
Nuint16_t att_read_callback_handle_little_endian_32(uint32_t value, uint16_t offset, uint8_t * buffer, uint16_t buffer_size);
N
N/**
N * @brief Handle read of little endian unsigned 16 bit value for att_read_callback
N * @param value
N * @param offset from att_read_callback
N * @param buffer from att_read_callback
N * @param buffer_size from att_read_callback
N * @return value size for buffer == 0 and num bytes copied otherwise
N */
E "..\..\..\..\src\ble/att_db.h" 279 10 function returning function is not allowed
Nuint16_t att_read_callback_handle_little_endian_16(uint16_t value, uint16_t offset, uint8_t * buffer, uint16_t buffer_size);
N
N/**
N * @brief Handle read of single byte for att_read_callback
N * @param blob of data
N * @param blob_size of blob
N * @param offset from att_read_callback
N * @param buffer from att_read_callback
N * @param buffer_size from att_read_callback
N * @return value size for buffer == 0 and num bytes copied otherwise
N */
E "..\..\..\..\src\ble/att_db.h" 290 10 function returning function is not allowed
C "" 0 0 error limit reached
Nuint16_t att_read_callback_handle_byte(uint8_t value, uint16_t offset, uint8_t * buffer, uint16_t buffer_size);
