; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bt_linknode.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bt_linknode.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\Middleware\blue_angel\inc -I..\..\Middleware\bt_callback_manager -I..\..\Middleware\blue_angel\btif -I..\..\Middleware\blue_angel\common -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\src\common -I..\..\Middleware\blue_angel\src\inc -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\platform\rtos -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\ut_manager\Cunit\Headers -I..\..\Middleware\ut_manager\Cunit\interface -I..\..\Middleware\blue_angel\platform\test -I..\..\Middleware\blue_angel\driver -I..\..\Middleware\blue_angel\src\core\hci -I..\..\User\bt\inc -I..\..\Middleware\bt_callback_manager -I..\..\Middleware\at_command -I..\..\Middleware\blue_angel\src\core\gap -I..\..\Middleware\blue_angel\src\core\l2cap -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=522 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DNDEBUG --omf_browse=.\flash\obj\bt_linknode.crf ..\..\Middleware\blue_angel\src\common\bt_linknode.c]
                          THUMB

                          AREA ||i.bt_linknode_cmp_backward||, CODE, READONLY, ALIGN=1

                  bt_linknode_cmp_backward PROC
;;;41     
;;;42     bool bt_linknode_cmp_backward(const bt_linknode_t *node, const void *data)
000000  4602              MOV      r2,r0
;;;43     {
;;;44         return (node->next == (const bt_linknode_t *)data);
000002  6810              LDR      r0,[r2,#0]
000004  4288              CMP      r0,r1
000006  d101              BNE      |L1.12|
000008  2001              MOVS     r0,#1
                  |L1.10|
;;;45     }
00000a  4770              BX       lr
                  |L1.12|
00000c  2000              MOVS     r0,#0                 ;44
00000e  e7fc              B        |L1.10|
;;;46     
                          ENDP


                          AREA ||i.bt_linknode_delete_node||, CODE, READONLY, ALIGN=2

                  bt_linknode_delete_node PROC
;;;23     
;;;24     bt_linknode_t *bt_linknode_delete_node(bt_linknode_t *head, bt_linknode_position_t position)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;25     {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
;;;26         bt_linknode_t *tmp = head;
000008  462e              MOV      r6,r5
;;;27         bt_linknode_t *node_to_delete = tmp->next;
00000a  6834              LDR      r4,[r6,#0]
;;;28         BT_ASSERT(head);
00000c  b105              CBZ      r5,|L2.16|
00000e  e003              B        |L2.24|
                  |L2.16|
000010  211c              MOVS     r1,#0x1c
000012  a009              ADR      r0,|L2.56|
000014  f7fffffe          BL       assert_failed
                  |L2.24|
;;;29         if (node_to_delete != NULL) {
000018  b15c              CBZ      r4,|L2.50|
;;;30             if (position == BT_NODE_TAIL) {
00001a  2f02              CMP      r7,#2
00001c  d105              BNE      |L2.42|
;;;31                 while (node_to_delete->next != NULL) {
00001e  e001              B        |L2.36|
                  |L2.32|
;;;32                     tmp = node_to_delete;
000020  4626              MOV      r6,r4
;;;33                     node_to_delete = node_to_delete->next;
000022  6824              LDR      r4,[r4,#0]
                  |L2.36|
000024  6820              LDR      r0,[r4,#0]            ;31
000026  2800              CMP      r0,#0                 ;31
000028  d1fa              BNE      |L2.32|
                  |L2.42|
;;;34                 }
;;;35             }
;;;36             tmp->next = node_to_delete->next;
00002a  6820              LDR      r0,[r4,#0]
00002c  6030              STR      r0,[r6,#0]
;;;37             node_to_delete->next = NULL;
00002e  2000              MOVS     r0,#0
000030  6020              STR      r0,[r4,#0]
                  |L2.50|
;;;38         }
;;;39         return node_to_delete;
000032  4620              MOV      r0,r4
;;;40     }
000034  e8bd81f0          POP      {r4-r8,pc}
;;;41     
                          ENDP

                  |L2.56|
000038  2e2e5c2e          DCB      "..\\..\\Middleware\\blue_angel\\src\\common\\bt_linknod"
00003c  2e5c4d69
000040  64646c65
000044  77617265
000048  5c626c75
00004c  655f616e
000050  67656c5c
000054  7372635c
000058  636f6d6d
00005c  6f6e5c62
000060  745f6c69
000064  6e6b6e6f
000068  64      
000069  652e6300          DCB      "e.c",0
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0

                          AREA ||i.bt_linknode_insert_node||, CODE, READONLY, ALIGN=2

                  bt_linknode_insert_node PROC
;;;10     
;;;11     void bt_linknode_insert_node(bt_linknode_t *head, bt_linknode_t *node_to_insert, bt_linknode_position_t position)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;12     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;13         bt_linknode_t *tmp = head;
00000a  462c              MOV      r4,r5
;;;14         BT_ASSERT(head);
00000c  b105              CBZ      r5,|L3.16|
00000e  e003              B        |L3.24|
                  |L3.16|
000010  210e              MOVS     r1,#0xe
000012  a007              ADR      r0,|L3.48|
000014  f7fffffe          BL       assert_failed
                  |L3.24|
;;;15         if (position == BT_NODE_TAIL) {
000018  2f02              CMP      r7,#2
00001a  d104              BNE      |L3.38|
;;;16             while (tmp->next != NULL) {
00001c  e000              B        |L3.32|
                  |L3.30|
;;;17                 tmp = tmp->next;
00001e  6824              LDR      r4,[r4,#0]
                  |L3.32|
000020  6820              LDR      r0,[r4,#0]            ;16
000022  2800              CMP      r0,#0                 ;16
000024  d1fb              BNE      |L3.30|
                  |L3.38|
;;;18             }
;;;19         }
;;;20         node_to_insert->next = tmp->next;
000026  6820              LDR      r0,[r4,#0]
000028  6030              STR      r0,[r6,#0]
;;;21         tmp->next = node_to_insert;
00002a  6026              STR      r6,[r4,#0]
;;;22     }
00002c  e8bd81f0          POP      {r4-r8,pc}
;;;23     
                          ENDP

                  |L3.48|
000030  2e2e5c2e          DCB      "..\\..\\Middleware\\blue_angel\\src\\common\\bt_linknod"
000034  2e5c4d69
000038  64646c65
00003c  77617265
000040  5c626c75
000044  655f616e
000048  67656c5c
00004c  7372635c
000050  636f6d6d
000054  6f6e5c62
000058  745f6c69
00005c  6e6b6e6f
000060  64      
000061  652e6300          DCB      "e.c",0
000065  00                DCB      0
000066  00                DCB      0
000067  00                DCB      0

                          AREA ||i.bt_linknode_travel_node||, CODE, READONLY, ALIGN=1

                  bt_linknode_travel_node PROC
;;;47     /*遍历整个链表，如果找到目标node(data),则返回其前驱节点*/
;;;48     bt_linknode_t *bt_linknode_travel_node(bt_linknode_t *head, bt_linknode_cmp_t cmp_func, const void *data)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;49     {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
;;;50         bt_linknode_t *tmp = head;
00000a  462c              MOV      r4,r5
;;;51         while (tmp) {
00000c  e00b              B        |L4.38|
                  |L4.14|
;;;52             if (cmp_func(tmp, data)) {
00000e  4631              MOV      r1,r6
000010  4620              MOV      r0,r4
000012  47b8              BLX      r7
000014  b110              CBZ      r0,|L4.28|
;;;53                 return tmp;
000016  4620              MOV      r0,r4
                  |L4.24|
;;;54             }
;;;55             tmp = tmp->next;
;;;56             /*这条链表可能是循环链表*/
;;;57             if (tmp == head) {
;;;58                 return NULL;
;;;59             }
;;;60         }
;;;61         return NULL;
;;;62     }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L4.28|
00001c  6824              LDR      r4,[r4,#0]            ;55
00001e  42ac              CMP      r4,r5                 ;57
000020  d101              BNE      |L4.38|
000022  2000              MOVS     r0,#0                 ;58
000024  e7f8              B        |L4.24|
                  |L4.38|
000026  2c00              CMP      r4,#0                 ;51
000028  d1f1              BNE      |L4.14|
00002a  2000              MOVS     r0,#0                 ;61
00002c  e7f4              B        |L4.24|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\Middleware\\blue_angel\\src\\common\\bt_linknode.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_bt_linknode_c_2a6374de____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_bt_linknode_c_2a6374de____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_bt_linknode_c_2a6374de____REVSH|
#line 128
|__asm___13_bt_linknode_c_2a6374de____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
