; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\list.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\list.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\Middleware\blue_angel\inc -I..\..\Middleware\bt_callback_manager -I..\..\Middleware\blue_angel\btif -I..\..\Middleware\blue_angel\common -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\src\common -I..\..\Middleware\blue_angel\src\inc -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\platform\rtos -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\ut_manager\Cunit\Headers -I..\..\Middleware\ut_manager\Cunit\interface -I..\..\Middleware\blue_angel\platform\test -I..\..\Middleware\blue_angel\driver -I..\..\Middleware\blue_angel\src\core\hci -I..\..\User\bt\inc -I..\..\Middleware\bt_callback_manager -I..\..\Middleware\at_command -I..\..\Middleware\blue_angel\src\core\gap -I..\..\Middleware\blue_angel\src\core\l2cap -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=522 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DNDEBUG --omf_browse=.\flash\obj\list.crf ..\..\FreeRTOS\list.c]
                          THUMB

                          AREA ||i.uxListRemove||, CODE, READONLY, ALIGN=1

                  uxListRemove PROC
;;;211    
;;;212    UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
000000  4601              MOV      r1,r0
;;;213    {
;;;214    /* The list item knows which list it is in.  Obtain the list from the list
;;;215    item. */
;;;216    List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
000002  690a              LDR      r2,[r1,#0x10]
;;;217    
;;;218    	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
000004  e9d13001          LDRD     r3,r0,[r1,#4]
000008  6098              STR      r0,[r3,#8]
;;;219    	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
00000a  e9d10301          LDRD     r0,r3,[r1,#4]
00000e  6058              STR      r0,[r3,#4]
;;;220    
;;;221    	/* Only used during decision coverage testing. */
;;;222    	mtCOVERAGE_TEST_DELAY();
;;;223    
;;;224    	/* Make sure the index is left pointing to a valid item. */
;;;225    	if( pxList->pxIndex == pxItemToRemove )
000010  6850              LDR      r0,[r2,#4]
000012  4288              CMP      r0,r1
000014  d101              BNE      |L1.26|
;;;226    	{
;;;227    		pxList->pxIndex = pxItemToRemove->pxPrevious;
000016  6888              LDR      r0,[r1,#8]
000018  6050              STR      r0,[r2,#4]
                  |L1.26|
;;;228    	}
;;;229    	else
;;;230    	{
;;;231    		mtCOVERAGE_TEST_MARKER();
;;;232    	}
;;;233    
;;;234    	pxItemToRemove->pvContainer = NULL;
00001a  2000              MOVS     r0,#0
00001c  6108              STR      r0,[r1,#0x10]
;;;235    	( pxList->uxNumberOfItems )--;
00001e  6810              LDR      r0,[r2,#0]
000020  1e40              SUBS     r0,r0,#1
000022  6010              STR      r0,[r2,#0]
;;;236    
;;;237    	return pxList->uxNumberOfItems;
000024  6810              LDR      r0,[r2,#0]
;;;238    }
000026  4770              BX       lr
;;;239    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vListInitialise||, CODE, READONLY, ALIGN=1

                  vListInitialise PROC
;;;78     
;;;79     void vListInitialise( List_t * const pxList )
000000  f1000108          ADD      r1,r0,#8
;;;80     {
;;;81     	/* The list structure contains a list item which is used to mark the
;;;82     	end of the list.  To initialise the list the list end is inserted
;;;83     	as the only list entry. */
;;;84     	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
000004  6041              STR      r1,[r0,#4]
;;;85     
;;;86     	/* The list end value is the highest possible value in the list to
;;;87     	ensure it remains at the end of the list. */
;;;88     	pxList->xListEnd.xItemValue = portMAX_DELAY;
000006  f04f31ff          MOV      r1,#0xffffffff
00000a  6081              STR      r1,[r0,#8]
;;;89     
;;;90     	/* The list end next and previous pointers point to itself so we know
;;;91     	when the list is empty. */
;;;92     	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
00000c  f1000108          ADD      r1,r0,#8
000010  60c1              STR      r1,[r0,#0xc]
;;;93     	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
000012  6101              STR      r1,[r0,#0x10]
;;;94     
;;;95     	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
000014  2100              MOVS     r1,#0
000016  6001              STR      r1,[r0,#0]
;;;96     
;;;97     	/* Write known values into the list if
;;;98     	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
;;;99     	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
;;;100    	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
;;;101    }
000018  4770              BX       lr
;;;102    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vListInitialiseItem||, CODE, READONLY, ALIGN=1

                  vListInitialiseItem PROC
;;;103    
;;;104    void vListInitialiseItem( ListItem_t * const pxItem )
000000  2100              MOVS     r1,#0
;;;105    {
;;;106    	/* Make sure the list item is not recorded as being on a list. */
;;;107    	pxItem->pvContainer = NULL;
000002  6101              STR      r1,[r0,#0x10]
;;;108    
;;;109    	/* Write known values into the list item if
;;;110    	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
;;;111    	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
;;;112    	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
;;;113    }
000004  4770              BX       lr
;;;114    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vListInsert||, CODE, READONLY, ALIGN=1

                  vListInsert PROC
;;;144    
;;;145    void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
000000  b510              PUSH     {r4,lr}
;;;146    {
000002  4602              MOV      r2,r0
;;;147    ListItem_t *pxIterator;
;;;148    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
000004  680b              LDR      r3,[r1,#0]
;;;149    
;;;150    	/* Only effective when configASSERT() is also defined, these tests may catch
;;;151    	the list data structures being overwritten in memory.  They will not catch
;;;152    	data errors caused by incorrect configuration or use of FreeRTOS. */
;;;153    	listTEST_LIST_INTEGRITY( pxList );
;;;154    	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
;;;155    
;;;156    	/* Insert the new list item into the list, sorted in xItemValue order.
;;;157    
;;;158    	If the list already contains a list item with the same item value then the
;;;159    	new list item should be placed after it.  This ensures that TCB's which are
;;;160    	stored in ready lists (all of which have the same xItemValue value) get a
;;;161    	share of the CPU.  However, if the xItemValue is the same as the back marker
;;;162    	the iteration loop below will not end.  Therefore the value is checked
;;;163    	first, and the algorithm slightly modified if necessary. */
;;;164    	if( xValueOfInsertion == portMAX_DELAY )
000006  1c5c              ADDS     r4,r3,#1
000008  b90c              CBNZ     r4,|L4.14|
;;;165    	{
;;;166    		pxIterator = pxList->xListEnd.pxPrevious;
00000a  6910              LDR      r0,[r2,#0x10]
00000c  e007              B        |L4.30|
                  |L4.14|
;;;167    	}
;;;168    	else
;;;169    	{
;;;170    		/* *** NOTE ***********************************************************
;;;171    		If you find your application is crashing here then likely causes are
;;;172    		listed below.  In addition see http://www.freertos.org/FAQHelp.html for
;;;173    		more tips, and ensure configASSERT() is defined!
;;;174    		http://www.freertos.org/a00110.html#configASSERT
;;;175    
;;;176    			1) Stack overflow -
;;;177    			   see http://www.freertos.org/Stacks-and-stack-overflow-checking.html
;;;178    			2) Incorrect interrupt priority assignment, especially on Cortex-M
;;;179    			   parts where numerically high priority values denote low actual
;;;180    			   interrupt priorities, which can seem counter intuitive.  See
;;;181    			   http://www.freertos.org/RTOS-Cortex-M3-M4.html and the definition
;;;182    			   of configMAX_SYSCALL_INTERRUPT_PRIORITY on
;;;183    			   http://www.freertos.org/a00110.html
;;;184    			3) Calling an API function from within a critical section or when
;;;185    			   the scheduler is suspended, or calling an API function that does
;;;186    			   not end in "FromISR" from an interrupt.
;;;187    			4) Using a queue or semaphore before it has been initialised or
;;;188    			   before the scheduler has been started (are interrupts firing
;;;189    			   before vTaskStartScheduler() has been called?).
;;;190    		**********************************************************************/
;;;191    
;;;192    		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
00000e  f1020008          ADD      r0,r2,#8
000012  e000              B        |L4.22|
                  |L4.20|
000014  6840              LDR      r0,[r0,#4]
                  |L4.22|
000016  6844              LDR      r4,[r0,#4]
000018  6824              LDR      r4,[r4,#0]
00001a  429c              CMP      r4,r3
00001c  d9fa              BLS      |L4.20|
                  |L4.30|
;;;193    		{
;;;194    			/* There is nothing to do here, just iterating to the wanted
;;;195    			insertion position. */
;;;196    		}
;;;197    	}
;;;198    
;;;199    	pxNewListItem->pxNext = pxIterator->pxNext;
00001e  6844              LDR      r4,[r0,#4]
000020  604c              STR      r4,[r1,#4]
;;;200    	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
000022  684c              LDR      r4,[r1,#4]
000024  60a1              STR      r1,[r4,#8]
;;;201    	pxNewListItem->pxPrevious = pxIterator;
000026  6088              STR      r0,[r1,#8]
;;;202    	pxIterator->pxNext = pxNewListItem;
000028  6041              STR      r1,[r0,#4]
;;;203    
;;;204    	/* Remember which list the item is in.  This allows fast removal of the
;;;205    	item later. */
;;;206    	pxNewListItem->pvContainer = ( void * ) pxList;
00002a  610a              STR      r2,[r1,#0x10]
;;;207    
;;;208    	( pxList->uxNumberOfItems )++;
00002c  6814              LDR      r4,[r2,#0]
00002e  1c64              ADDS     r4,r4,#1
000030  6014              STR      r4,[r2,#0]
;;;209    }
000032  bd10              POP      {r4,pc}
;;;210    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vListInsertEnd||, CODE, READONLY, ALIGN=1

                  vListInsertEnd PROC
;;;115    
;;;116    void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
000000  6842              LDR      r2,[r0,#4]
;;;117    {
;;;118    ListItem_t * const pxIndex = pxList->pxIndex;
;;;119    
;;;120    	/* Only effective when configASSERT() is also defined, these tests may catch
;;;121    	the list data structures being overwritten in memory.  They will not catch
;;;122    	data errors caused by incorrect configuration or use of FreeRTOS. */
;;;123    	listTEST_LIST_INTEGRITY( pxList );
;;;124    	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
;;;125    
;;;126    	/* Insert a new list item into pxList, but rather than sort the list,
;;;127    	makes the new list item the last item to be removed by a call to
;;;128    	listGET_OWNER_OF_NEXT_ENTRY(). */
;;;129    	pxNewListItem->pxNext = pxIndex;
000002  604a              STR      r2,[r1,#4]
;;;130    	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
000004  6893              LDR      r3,[r2,#8]
000006  608b              STR      r3,[r1,#8]
;;;131    
;;;132    	/* Only used during decision coverage testing. */
;;;133    	mtCOVERAGE_TEST_DELAY();
;;;134    
;;;135    	pxIndex->pxPrevious->pxNext = pxNewListItem;
000008  6893              LDR      r3,[r2,#8]
00000a  6059              STR      r1,[r3,#4]
;;;136    	pxIndex->pxPrevious = pxNewListItem;
00000c  6091              STR      r1,[r2,#8]
;;;137    
;;;138    	/* Remember which list the item is in. */
;;;139    	pxNewListItem->pvContainer = ( void * ) pxList;
00000e  6108              STR      r0,[r1,#0x10]
;;;140    
;;;141    	( pxList->uxNumberOfItems )++;
000010  6803              LDR      r3,[r0,#0]
000012  1c5b              ADDS     r3,r3,#1
000014  6003              STR      r3,[r0,#0]
;;;142    }
000016  4770              BX       lr
;;;143    /*-----------------------------------------------------------*/
                          ENDP

