; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\tasks.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\tasks.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\Middleware\blue_angel\inc -I..\..\Middleware\bt_callback_manager -I..\..\Middleware\blue_angel\btif -I..\..\Middleware\blue_angel\common -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\src\common -I..\..\Middleware\blue_angel\src\inc -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\platform\rtos -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\ut_manager\Cunit\Headers -I..\..\Middleware\ut_manager\Cunit\interface -I..\..\Middleware\blue_angel\platform\test -I..\..\Middleware\blue_angel\driver -I..\..\Middleware\blue_angel\src\core\hci -I..\..\User\bt\inc -I..\..\Middleware\bt_callback_manager -I..\..\Middleware\at_command -I..\..\Middleware\blue_angel\src\core\gap -I..\..\Middleware\blue_angel\src\core\l2cap -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=522 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DNDEBUG --omf_browse=.\flash\obj\tasks.crf ..\..\FreeRTOS\tasks.c]
                          THUMB

                          AREA ||i.prvAddCurrentTaskToDelayedList||, CODE, READONLY, ALIGN=2

                  prvAddCurrentTaskToDelayedList PROC
;;;3070   
;;;3071   static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
000000  b510              PUSH     {r4,lr}
;;;3072   {
000002  4604              MOV      r4,r0
;;;3073   	/* The list item will be inserted in wake time order. */
;;;3074   	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
000004  480e              LDR      r0,|L1.64|
000006  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000008  6044              STR      r4,[r0,#4]
;;;3075   
;;;3076   	if( xTimeToWake < xTickCount )
00000a  480e              LDR      r0,|L1.68|
00000c  6800              LDR      r0,[r0,#0]  ; xTickCount
00000e  4284              CMP      r4,r0
000010  d207              BCS      |L1.34|
;;;3077   	{
;;;3078   		/* Wake time has overflowed.  Place this item in the overflow list. */
;;;3079   		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
000012  480b              LDR      r0,|L1.64|
000014  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
000016  1d09              ADDS     r1,r1,#4
000018  480b              LDR      r0,|L1.72|
00001a  6800              LDR      r0,[r0,#0]  ; pxOverflowDelayedTaskList
00001c  f7fffffe          BL       vListInsert
000020  e00c              B        |L1.60|
                  |L1.34|
;;;3080   	}
;;;3081   	else
;;;3082   	{
;;;3083   		/* The wake time has not overflowed, so the current block list is used. */
;;;3084   		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
000022  4807              LDR      r0,|L1.64|
000024  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
000026  1d09              ADDS     r1,r1,#4
000028  4808              LDR      r0,|L1.76|
00002a  6800              LDR      r0,[r0,#0]  ; pxDelayedTaskList
00002c  f7fffffe          BL       vListInsert
;;;3085   
;;;3086   		/* If the task entering the blocked state was placed at the head of the
;;;3087   		list of blocked tasks then xNextTaskUnblockTime needs to be updated
;;;3088   		too. */
;;;3089   		if( xTimeToWake < xNextTaskUnblockTime )
000030  4807              LDR      r0,|L1.80|
000032  6800              LDR      r0,[r0,#0]  ; xNextTaskUnblockTime
000034  4284              CMP      r4,r0
000036  d201              BCS      |L1.60|
;;;3090   		{
;;;3091   			xNextTaskUnblockTime = xTimeToWake;
000038  4805              LDR      r0,|L1.80|
00003a  6004              STR      r4,[r0,#0]  ; xNextTaskUnblockTime
                  |L1.60|
;;;3092   		}
;;;3093   		else
;;;3094   		{
;;;3095   			mtCOVERAGE_TEST_MARKER();
;;;3096   		}
;;;3097   	}
;;;3098   }
00003c  bd10              POP      {r4,pc}
;;;3099   /*-----------------------------------------------------------*/
                          ENDP

00003e  0000              DCW      0x0000
                  |L1.64|
                          DCD      pxCurrentTCB
                  |L1.68|
                          DCD      xTickCount
                  |L1.72|
                          DCD      pxOverflowDelayedTaskList
                  |L1.76|
                          DCD      pxDelayedTaskList
                  |L1.80|
                          DCD      xNextTaskUnblockTime

                          AREA ||i.prvAllocateTCBAndStack||, CODE, READONLY, ALIGN=1

                  prvAllocateTCBAndStack PROC
;;;3100   
;;;3101   static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;3102   {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;3103   TCB_t *pxNewTCB;
;;;3104   
;;;3105   	/* If the stack grows down then allocate the stack then the TCB so the stack
;;;3106   	does not grow into the TCB.  Likewise if the stack grows up then allocate
;;;3107   	the TCB then the stack. */
;;;3108   	#if( portSTACK_GROWTH > 0 )
;;;3109   	{
;;;3110   		/* Allocate space for the TCB.  Where the memory comes from depends on
;;;3111   		the implementation of the port malloc function. */
;;;3112   		pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
;;;3113   
;;;3114   		if( pxNewTCB != NULL )
;;;3115   		{
;;;3116   			/* Allocate space for the stack used by the task being created.
;;;3117   			The base of the stack memory stored in the TCB so the task can
;;;3118   			be deleted later if required. */
;;;3119   			pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
;;;3120   
;;;3121   			if( pxNewTCB->pxStack == NULL )
;;;3122   			{
;;;3123   				/* Could not allocate the stack.  Delete the allocated TCB. */
;;;3124   				vPortFree( pxNewTCB );
;;;3125   				pxNewTCB = NULL;
;;;3126   			}
;;;3127   		}
;;;3128   	}
;;;3129   	#else /* portSTACK_GROWTH */
;;;3130   	{
;;;3131   	StackType_t *pxStack;
;;;3132   
;;;3133   		/* Allocate space for the stack used by the task being created. */
;;;3134   		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000008  b91f              CBNZ     r7,|L2.18|
00000a  00b0              LSLS     r0,r6,#2
00000c  f7fffffe          BL       pvPortMalloc
000010  e000              B        |L2.20|
                  |L2.18|
000012  4638              MOV      r0,r7
                  |L2.20|
000014  4605              MOV      r5,r0
;;;3135   
;;;3136   		if( pxStack != NULL )
000016  b155              CBZ      r5,|L2.46|
;;;3137   		{
;;;3138   			/* Allocate space for the TCB.  Where the memory comes from depends
;;;3139   			on the implementation of the port malloc function. */
;;;3140   			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
000018  2054              MOVS     r0,#0x54
00001a  f7fffffe          BL       pvPortMalloc
00001e  4604              MOV      r4,r0
;;;3141   
;;;3142   			if( pxNewTCB != NULL )
000020  b10c              CBZ      r4,|L2.38|
;;;3143   			{
;;;3144   				/* Store the stack location in the TCB. */
;;;3145   				pxNewTCB->pxStack = pxStack;
000022  6325              STR      r5,[r4,#0x30]
000024  e004              B        |L2.48|
                  |L2.38|
;;;3146   			}
;;;3147   			else
;;;3148   			{
;;;3149   				/* The stack cannot be used as the TCB was not created.  Free it
;;;3150   				again. */
;;;3151   				vPortFree( pxStack );
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       vPortFree
00002c  e000              B        |L2.48|
                  |L2.46|
;;;3152   			}
;;;3153   		}
;;;3154   		else
;;;3155   		{
;;;3156   			pxNewTCB = NULL;
00002e  2400              MOVS     r4,#0
                  |L2.48|
;;;3157   		}
;;;3158   	}
;;;3159   	#endif /* portSTACK_GROWTH */
;;;3160   
;;;3161   	if( pxNewTCB != NULL )
;;;3162   	{
;;;3163   		/* Avoid dependency on memset() if it is not required. */
;;;3164   		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
;;;3165   		{
;;;3166   			/* Just to help debugging. */
;;;3167   			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
;;;3168   		}
;;;3169   		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
;;;3170   	}
;;;3171   
;;;3172   	return pxNewTCB;
000030  4620              MOV      r0,r4
;;;3173   }
000032  e8bd81f0          POP      {r4-r8,pc}
;;;3174   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.prvCheckTasksWaitingTermination||, CODE, READONLY, ALIGN=2

                  prvCheckTasksWaitingTermination PROC
;;;3029   
;;;3030   static void prvCheckTasksWaitingTermination( void )
000000  b570              PUSH     {r4-r6,lr}
;;;3031   {
;;;3032   	#if ( INCLUDE_vTaskDelete == 1 )
;;;3033   	{
;;;3034   		BaseType_t xListIsEmpty;
;;;3035   
;;;3036   		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
;;;3037   		too often in the idle task. */
;;;3038   		while( uxTasksDeleted > ( UBaseType_t ) 0U )
000002  e023              B        |L3.76|
                  |L3.4|
;;;3039   		{
;;;3040   			vTaskSuspendAll();
000004  f7fffffe          BL       vTaskSuspendAll
;;;3041   			{
;;;3042   				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
000008  4813              LDR      r0,|L3.88|
00000a  6800              LDR      r0,[r0,#0]  ; xTasksWaitingTermination
00000c  b908              CBNZ     r0,|L3.18|
00000e  2001              MOVS     r0,#1
000010  e000              B        |L3.20|
                  |L3.18|
000012  2000              MOVS     r0,#0
                  |L3.20|
000014  4605              MOV      r5,r0
;;;3043   			}
;;;3044   			( void ) xTaskResumeAll();
000016  f7fffffe          BL       xTaskResumeAll
;;;3045   
;;;3046   			if( xListIsEmpty == pdFALSE )
00001a  b9bd              CBNZ     r5,|L3.76|
;;;3047   			{
;;;3048   				TCB_t *pxTCB;
;;;3049   
;;;3050   				taskENTER_CRITICAL();
00001c  f7fffffe          BL       vPortEnterCritical
;;;3051   				{
;;;3052   					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
000020  480d              LDR      r0,|L3.88|
000022  68c0              LDR      r0,[r0,#0xc]
000024  68c4              LDR      r4,[r0,#0xc]
;;;3053   					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
000026  1d20              ADDS     r0,r4,#4
000028  f7fffffe          BL       uxListRemove
;;;3054   					--uxCurrentNumberOfTasks;
00002c  480b              LDR      r0,|L3.92|
00002e  6800              LDR      r0,[r0,#0]  ; uxCurrentNumberOfTasks
000030  1e40              SUBS     r0,r0,#1
000032  490a              LDR      r1,|L3.92|
000034  6008              STR      r0,[r1,#0]  ; uxCurrentNumberOfTasks
;;;3055   					--uxTasksDeleted;
000036  480a              LDR      r0,|L3.96|
000038  6800              LDR      r0,[r0,#0]  ; uxTasksDeleted
00003a  1e40              SUBS     r0,r0,#1
00003c  4908              LDR      r1,|L3.96|
00003e  6008              STR      r0,[r1,#0]  ; uxTasksDeleted
;;;3056   				}
;;;3057   				taskEXIT_CRITICAL();
000040  f7fffffe          BL       vPortExitCritical
;;;3058   
;;;3059   				prvDeleteTCB( pxTCB );
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       prvDeleteTCB
;;;3060   			}
00004a  bf00              NOP      
                  |L3.76|
00004c  4804              LDR      r0,|L3.96|
00004e  6800              LDR      r0,[r0,#0]            ;3038  ; uxTasksDeleted
000050  2800              CMP      r0,#0                 ;3038
000052  d1d7              BNE      |L3.4|
;;;3061   			else
;;;3062   			{
;;;3063   				mtCOVERAGE_TEST_MARKER();
;;;3064   			}
;;;3065   		}
;;;3066   	}
;;;3067   	#endif /* vTaskDelete */
;;;3068   }
000054  bd70              POP      {r4-r6,pc}
;;;3069   /*-----------------------------------------------------------*/
                          ENDP

000056  0000              DCW      0x0000
                  |L3.88|
                          DCD      xTasksWaitingTermination
                  |L3.92|
                          DCD      uxCurrentNumberOfTasks
                  |L3.96|
                          DCD      uxTasksDeleted

                          AREA ||i.prvDeleteTCB||, CODE, READONLY, ALIGN=1

                  prvDeleteTCB PROC
;;;3310   
;;;3311   	static void prvDeleteTCB( TCB_t *pxTCB )
000000  b510              PUSH     {r4,lr}
;;;3312   	{
000002  4604              MOV      r4,r0
;;;3313   		/* This call is required specifically for the TriCore port.  It must be
;;;3314   		above the vPortFree() calls.  The call is also used by ports/demos that
;;;3315   		want to allocate and clean RAM statically. */
;;;3316   		portCLEAN_UP_TCB( pxTCB );
;;;3317   
;;;3318   		/* Free up the memory allocated by the scheduler for the task.  It is up
;;;3319   		to the task to free any memory allocated at the application level. */
;;;3320   		#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;3321   		{
;;;3322   			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
;;;3323   		}
;;;3324   		#endif /* configUSE_NEWLIB_REENTRANT */
;;;3325   
;;;3326   		#if( portUSING_MPU_WRAPPERS == 1 )
;;;3327   		{
;;;3328   			/* Only free the stack if it was allocated dynamically in the first
;;;3329   			place. */
;;;3330   			if( pxTCB->xUsingStaticallyAllocatedStack == pdFALSE )
;;;3331   			{
;;;3332   				vPortFreeAligned( pxTCB->pxStack );
;;;3333   			}
;;;3334   		}
;;;3335   		#else
;;;3336   		{
;;;3337   			vPortFreeAligned( pxTCB->pxStack );
000004  6b20              LDR      r0,[r4,#0x30]
000006  f7fffffe          BL       vPortFree
;;;3338   		}
;;;3339   		#endif
;;;3340   
;;;3341   		vPortFree( pxTCB );
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       vPortFree
;;;3342   	}
000010  bd10              POP      {r4,pc}
;;;3343   
                          ENDP


                          AREA ||i.prvIdleTask||, CODE, READONLY, ALIGN=2

                  prvIdleTask PROC
;;;2689    */
;;;2690   static portTASK_FUNCTION( prvIdleTask, pvParameters )
000000  bf00              NOP      
                  |L5.2|
;;;2691   {
;;;2692   	/* Stop warnings. */
;;;2693   	( void ) pvParameters;
;;;2694   
;;;2695   	for( ;; )
;;;2696   	{
;;;2697   		/* See if any tasks have been deleted. */
;;;2698   		prvCheckTasksWaitingTermination();
000002  f7fffffe          BL       prvCheckTasksWaitingTermination
;;;2699   
;;;2700   		#if ( configUSE_PREEMPTION == 0 )
;;;2701   		{
;;;2702   			/* If we are not using preemption we keep forcing a task switch to
;;;2703   			see if any other task has become available.  If we are using
;;;2704   			preemption we don't need to do this as any task becoming available
;;;2705   			will automatically get the processor anyway. */
;;;2706   			taskYIELD();
;;;2707   		}
;;;2708   		#endif /* configUSE_PREEMPTION */
;;;2709   
;;;2710   		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
;;;2711   		{
;;;2712   			/* When using preemption tasks of equal priority will be
;;;2713   			timesliced.  If a task that is sharing the idle priority is ready
;;;2714   			to run then the idle task should yield before the end of the
;;;2715   			timeslice.
;;;2716   
;;;2717   			A critical region is not required here as we are just reading from
;;;2718   			the list, and an occasional incorrect value will not matter.  If
;;;2719   			the ready list at the idle priority contains more than one task
;;;2720   			then a task other than the idle task is ready to execute. */
;;;2721   			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
000006  4803              LDR      r0,|L5.20|
000008  6800              LDR      r0,[r0,#0]  ; pxReadyTasksLists
00000a  2801              CMP      r0,#1
00000c  d9f9              BLS      |L5.2|
;;;2722   			{
;;;2723   				taskYIELD();
00000e  f7fffffe          BL       vPortYield
000012  e7f6              B        |L5.2|
;;;2724   			}
;;;2725   			else
;;;2726   			{
;;;2727   				mtCOVERAGE_TEST_MARKER();
;;;2728   			}
;;;2729   		}
;;;2730   		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
;;;2731   
;;;2732   		#if ( configUSE_IDLE_HOOK == 1 )
;;;2733   		{
;;;2734   			extern void vApplicationIdleHook( void );
;;;2735   
;;;2736   			/* Call the user defined function from within the idle task.  This
;;;2737   			allows the application designer to add background functionality
;;;2738   			without the overhead of a separate task.
;;;2739   			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
;;;2740   			CALL A FUNCTION THAT MIGHT BLOCK. */
;;;2741   			vApplicationIdleHook();
;;;2742   		}
;;;2743   		#endif /* configUSE_IDLE_HOOK */
;;;2744   
;;;2745   		/* This conditional compilation should use inequality to 0, not equality
;;;2746   		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
;;;2747   		user defined low power mode	implementations require
;;;2748   		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
;;;2749   		#if ( configUSE_TICKLESS_IDLE != 0 )
;;;2750   		{
;;;2751   		TickType_t xExpectedIdleTime;
;;;2752   
;;;2753   			/* It is not desirable to suspend then resume the scheduler on
;;;2754   			each iteration of the idle task.  Therefore, a preliminary
;;;2755   			test of the expected idle time is performed without the
;;;2756   			scheduler suspended.  The result here is not necessarily
;;;2757   			valid. */
;;;2758   			xExpectedIdleTime = prvGetExpectedIdleTime();
;;;2759   
;;;2760   			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
;;;2761   			{
;;;2762   				vTaskSuspendAll();
;;;2763   				{
;;;2764   					/* Now the scheduler is suspended, the expected idle
;;;2765   					time can be sampled again, and this time its value can
;;;2766   					be used. */
;;;2767   					configASSERT( xNextTaskUnblockTime >= xTickCount );
;;;2768   					xExpectedIdleTime = prvGetExpectedIdleTime();
;;;2769   
;;;2770   					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
;;;2771   					{
;;;2772   						traceLOW_POWER_IDLE_BEGIN();
;;;2773   						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
;;;2774   						traceLOW_POWER_IDLE_END();
;;;2775   					}
;;;2776   					else
;;;2777   					{
;;;2778   						mtCOVERAGE_TEST_MARKER();
;;;2779   					}
;;;2780   				}
;;;2781   				( void ) xTaskResumeAll();
;;;2782   			}
;;;2783   			else
;;;2784   			{
;;;2785   				mtCOVERAGE_TEST_MARKER();
;;;2786   			}
;;;2787   		}
;;;2788   		#endif /* configUSE_TICKLESS_IDLE */
;;;2789   	}
;;;2790   }
;;;2791   /*-----------------------------------------------------------*/
                          ENDP

                  |L5.20|
                          DCD      pxReadyTasksLists

                          AREA ||i.prvInitialiseTCBVariables||, CODE, READONLY, ALIGN=1

                  prvInitialiseTCBVariables PROC
;;;2832   
;;;2833   static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;2834   {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
00000a  4699              MOV      r9,r3
00000c  f8dd8020          LDR      r8,[sp,#0x20]
;;;2835   UBaseType_t x;
;;;2836   
;;;2837   	/* Store the task name in the TCB. */
;;;2838   	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
000010  2600              MOVS     r6,#0
000012  e007              B        |L6.36|
                  |L6.20|
;;;2839   	{
;;;2840   		pxTCB->pcTaskName[ x ] = pcName[ x ];
000014  5db9              LDRB     r1,[r7,r6]
000016  f1040034          ADD      r0,r4,#0x34
00001a  5581              STRB     r1,[r0,r6]
;;;2841   
;;;2842   		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
;;;2843   		configMAX_TASK_NAME_LEN characters just in case the memory after the
;;;2844   		string is not accessible (extremely unlikely). */
;;;2845   		if( pcName[ x ] == 0x00 )
00001c  5db8              LDRB     r0,[r7,r6]
00001e  b900              CBNZ     r0,|L6.34|
;;;2846   		{
;;;2847   			break;
000020  e002              B        |L6.40|
                  |L6.34|
000022  1c76              ADDS     r6,r6,#1              ;2838
                  |L6.36|
000024  2e10              CMP      r6,#0x10              ;2838
000026  d3f5              BCC      |L6.20|
                  |L6.40|
000028  bf00              NOP      
;;;2848   		}
;;;2849   		else
;;;2850   		{
;;;2851   			mtCOVERAGE_TEST_MARKER();
;;;2852   		}
;;;2853   	}
;;;2854   
;;;2855   	/* Ensure the name string is terminated in the case that the string length
;;;2856   	was greater or equal to configMAX_TASK_NAME_LEN. */
;;;2857   	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
00002a  2100              MOVS     r1,#0
00002c  2043              MOVS     r0,#0x43
00002e  5501              STRB     r1,[r0,r4]
;;;2858   
;;;2859   	/* This is used as an array index so must ensure it's not too large.  First
;;;2860   	remove the privilege bit if one is present. */
;;;2861   	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
000030  2d06              CMP      r5,#6
000032  d300              BCC      |L6.54|
;;;2862   	{
;;;2863   		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
000034  2505              MOVS     r5,#5
                  |L6.54|
;;;2864   	}
;;;2865   	else
;;;2866   	{
;;;2867   		mtCOVERAGE_TEST_MARKER();
;;;2868   	}
;;;2869   
;;;2870   	pxTCB->uxPriority = uxPriority;
000036  62e5              STR      r5,[r4,#0x2c]
;;;2871   	#if ( configUSE_MUTEXES == 1 )
;;;2872   	{
;;;2873   		pxTCB->uxBasePriority = uxPriority;
000038  6465              STR      r5,[r4,#0x44]
;;;2874   		pxTCB->uxMutexesHeld = 0;
00003a  2000              MOVS     r0,#0
00003c  64a0              STR      r0,[r4,#0x48]
;;;2875   	}
;;;2876   	#endif /* configUSE_MUTEXES */
;;;2877   
;;;2878   	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
00003e  1d20              ADDS     r0,r4,#4
000040  f7fffffe          BL       vListInitialiseItem
;;;2879   	vListInitialiseItem( &( pxTCB->xEventListItem ) );
000044  f1040018          ADD      r0,r4,#0x18
000048  f7fffffe          BL       vListInitialiseItem
;;;2880   
;;;2881   	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
;;;2882   	back to	the containing TCB from a generic item in a list. */
;;;2883   	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
00004c  6124              STR      r4,[r4,#0x10]
;;;2884   
;;;2885   	/* Event lists are always in priority order. */
;;;2886   	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
00004e  f1c50006          RSB      r0,r5,#6
000052  61a0              STR      r0,[r4,#0x18]
;;;2887   	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
000054  6264              STR      r4,[r4,#0x24]
;;;2888   
;;;2889   	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
;;;2890   	{
;;;2891   		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
;;;2892   	}
;;;2893   	#endif /* portCRITICAL_NESTING_IN_TCB */
;;;2894   
;;;2895   	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
;;;2896   	{
;;;2897   		pxTCB->pxTaskTag = NULL;
;;;2898   	}
;;;2899   	#endif /* configUSE_APPLICATION_TASK_TAG */
;;;2900   
;;;2901   	#if ( configGENERATE_RUN_TIME_STATS == 1 )
;;;2902   	{
;;;2903   		pxTCB->ulRunTimeCounter = 0UL;
;;;2904   	}
;;;2905   	#endif /* configGENERATE_RUN_TIME_STATS */
;;;2906   
;;;2907   	#if ( portUSING_MPU_WRAPPERS == 1 )
;;;2908   	{
;;;2909   		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, pxTCB->pxStack, usStackDepth );
;;;2910   	}
;;;2911   	#else /* portUSING_MPU_WRAPPERS */
;;;2912   	{
;;;2913   		( void ) xRegions;
;;;2914   		( void ) usStackDepth;
;;;2915   	}
;;;2916   	#endif /* portUSING_MPU_WRAPPERS */
;;;2917   
;;;2918   	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
;;;2919   	{
;;;2920   		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
;;;2921   		{
;;;2922   			pxTCB->pvThreadLocalStoragePointers[ x ] = NULL;
;;;2923   		}
;;;2924   	}
;;;2925   	#endif
;;;2926   
;;;2927   	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
;;;2928   	{
;;;2929   		pxTCB->ulNotifiedValue = 0;
000056  2000              MOVS     r0,#0
000058  64e0              STR      r0,[r4,#0x4c]
;;;2930   		pxTCB->eNotifyState = eNotWaitingNotification;
00005a  f8840050          STRB     r0,[r4,#0x50]
;;;2931   	}
;;;2932   	#endif
;;;2933   
;;;2934   	#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;2935   	{
;;;2936   		/* Initialise this task's Newlib reent structure. */
;;;2937   		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
;;;2938   	}
;;;2939   	#endif /* configUSE_NEWLIB_REENTRANT */
;;;2940   }
00005e  e8bd87f0          POP      {r4-r10,pc}
;;;2941   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.prvInitialiseTaskLists||, CODE, READONLY, ALIGN=2

                  prvInitialiseTaskLists PROC
;;;2997   
;;;2998   static void prvInitialiseTaskLists( void )
000000  b510              PUSH     {r4,lr}
;;;2999   {
;;;3000   UBaseType_t uxPriority;
;;;3001   
;;;3002   	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
000002  2400              MOVS     r4,#0
000004  e007              B        |L7.22|
                  |L7.6|
;;;3003   	{
;;;3004   		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
000006  eb040184          ADD      r1,r4,r4,LSL #2
00000a  4a0f              LDR      r2,|L7.72|
00000c  eb020081          ADD      r0,r2,r1,LSL #2
000010  f7fffffe          BL       vListInitialise
000014  1c64              ADDS     r4,r4,#1              ;3002
                  |L7.22|
000016  2c06              CMP      r4,#6                 ;3002
000018  d3f5              BCC      |L7.6|
;;;3005   	}
;;;3006   
;;;3007   	vListInitialise( &xDelayedTaskList1 );
00001a  480c              LDR      r0,|L7.76|
00001c  f7fffffe          BL       vListInitialise
;;;3008   	vListInitialise( &xDelayedTaskList2 );
000020  480b              LDR      r0,|L7.80|
000022  f7fffffe          BL       vListInitialise
;;;3009   	vListInitialise( &xPendingReadyList );
000026  480b              LDR      r0,|L7.84|
000028  f7fffffe          BL       vListInitialise
;;;3010   
;;;3011   	#if ( INCLUDE_vTaskDelete == 1 )
;;;3012   	{
;;;3013   		vListInitialise( &xTasksWaitingTermination );
00002c  480a              LDR      r0,|L7.88|
00002e  f7fffffe          BL       vListInitialise
;;;3014   	}
;;;3015   	#endif /* INCLUDE_vTaskDelete */
;;;3016   
;;;3017   	#if ( INCLUDE_vTaskSuspend == 1 )
;;;3018   	{
;;;3019   		vListInitialise( &xSuspendedTaskList );
000032  480a              LDR      r0,|L7.92|
000034  f7fffffe          BL       vListInitialise
;;;3020   	}
;;;3021   	#endif /* INCLUDE_vTaskSuspend */
;;;3022   
;;;3023   	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
;;;3024   	using list2. */
;;;3025   	pxDelayedTaskList = &xDelayedTaskList1;
000038  4804              LDR      r0,|L7.76|
00003a  4909              LDR      r1,|L7.96|
00003c  6008              STR      r0,[r1,#0]  ; pxDelayedTaskList
;;;3026   	pxOverflowDelayedTaskList = &xDelayedTaskList2;
00003e  4804              LDR      r0,|L7.80|
000040  4908              LDR      r1,|L7.100|
000042  6008              STR      r0,[r1,#0]  ; pxOverflowDelayedTaskList
;;;3027   }
000044  bd10              POP      {r4,pc}
;;;3028   /*-----------------------------------------------------------*/
                          ENDP

000046  0000              DCW      0x0000
                  |L7.72|
                          DCD      pxReadyTasksLists
                  |L7.76|
                          DCD      xDelayedTaskList1
                  |L7.80|
                          DCD      xDelayedTaskList2
                  |L7.84|
                          DCD      xPendingReadyList
                  |L7.88|
                          DCD      xTasksWaitingTermination
                  |L7.92|
                          DCD      xSuspendedTaskList
                  |L7.96|
                          DCD      pxDelayedTaskList
                  |L7.100|
                          DCD      pxOverflowDelayedTaskList

                          AREA ||i.prvResetNextTaskUnblockTime||, CODE, READONLY, ALIGN=2

                  prvResetNextTaskUnblockTime PROC
;;;3346   
;;;3347   static void prvResetNextTaskUnblockTime( void )
000000  490a              LDR      r1,|L8.44|
;;;3348   {
;;;3349   TCB_t *pxTCB;
;;;3350   
;;;3351   	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
000002  6809              LDR      r1,[r1,#0]  ; pxDelayedTaskList
000004  6809              LDR      r1,[r1,#0]
000006  b909              CBNZ     r1,|L8.12|
000008  2101              MOVS     r1,#1
00000a  e000              B        |L8.14|
                  |L8.12|
00000c  2100              MOVS     r1,#0
                  |L8.14|
00000e  b121              CBZ      r1,|L8.26|
;;;3352   	{
;;;3353   		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
;;;3354   		the maximum possible value so it is	extremely unlikely that the
;;;3355   		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
;;;3356   		there is an item in the delayed list. */
;;;3357   		xNextTaskUnblockTime = portMAX_DELAY;
000010  f04f31ff          MOV      r1,#0xffffffff
000014  4a06              LDR      r2,|L8.48|
000016  6011              STR      r1,[r2,#0]  ; xNextTaskUnblockTime
000018  e006              B        |L8.40|
                  |L8.26|
;;;3358   	}
;;;3359   	else
;;;3360   	{
;;;3361   		/* The new current delayed list is not empty, get the value of
;;;3362   		the item at the head of the delayed list.  This is the time at
;;;3363   		which the task at the head of the delayed list should be removed
;;;3364   		from the Blocked state. */
;;;3365   		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
00001a  4904              LDR      r1,|L8.44|
00001c  6809              LDR      r1,[r1,#0]  ; pxDelayedTaskList
00001e  68c9              LDR      r1,[r1,#0xc]
000020  68c8              LDR      r0,[r1,#0xc]
;;;3366   		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
000022  4a03              LDR      r2,|L8.48|
000024  6841              LDR      r1,[r0,#4]
000026  6011              STR      r1,[r2,#0]  ; xNextTaskUnblockTime
                  |L8.40|
;;;3367   	}
;;;3368   }
000028  4770              BX       lr
;;;3369   /*-----------------------------------------------------------*/
                          ENDP

00002a  0000              DCW      0x0000
                  |L8.44|
                          DCD      pxDelayedTaskList
                  |L8.48|
                          DCD      xNextTaskUnblockTime

                          AREA ||i.prvTaskIsTaskSuspended||, CODE, READONLY, ALIGN=2

                  prvTaskIsTaskSuspended PROC
;;;1372   
;;;1373   	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
000000  b570              PUSH     {r4-r6,lr}
;;;1374   	{
000002  4605              MOV      r5,r0
;;;1375   	BaseType_t xReturn = pdFALSE;
000004  2600              MOVS     r6,#0
;;;1376   	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
000006  462c              MOV      r4,r5
;;;1377   
;;;1378   		/* Accesses xPendingReadyList so must be called from a critical
;;;1379   		section. */
;;;1380   
;;;1381   		/* It does not make sense to check if the calling task is suspended. */
;;;1382   		configASSERT( xTask );
000008  b91d              CBNZ     r5,|L9.18|
00000a  f7fffffe          BL       ulPortSetInterruptMask
00000e  bf00              NOP      
                  |L9.16|
000010  e7fe              B        |L9.16|
                  |L9.18|
;;;1383   
;;;1384   		/* Is the task being resumed actually in the suspended list? */
;;;1385   		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
000012  490c              LDR      r1,|L9.68|
000014  6960              LDR      r0,[r4,#0x14]
000016  4288              CMP      r0,r1
000018  d101              BNE      |L9.30|
00001a  2001              MOVS     r0,#1
00001c  e000              B        |L9.32|
                  |L9.30|
00001e  2000              MOVS     r0,#0
                  |L9.32|
000020  b170              CBZ      r0,|L9.64|
;;;1386   		{
;;;1387   			/* Has the task already been resumed from within an ISR? */
;;;1388   			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
000022  4909              LDR      r1,|L9.72|
000024  6aa0              LDR      r0,[r4,#0x28]
000026  4288              CMP      r0,r1
000028  d101              BNE      |L9.46|
00002a  2001              MOVS     r0,#1
00002c  e000              B        |L9.48|
                  |L9.46|
00002e  2000              MOVS     r0,#0
                  |L9.48|
000030  b930              CBNZ     r0,|L9.64|
;;;1389   			{
;;;1390   				/* Is it in the suspended list because it is in the	Suspended
;;;1391   				state, or because is is blocked with no timeout? */
;;;1392   				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
000032  6aa0              LDR      r0,[r4,#0x28]
000034  b908              CBNZ     r0,|L9.58|
000036  2001              MOVS     r0,#1
000038  e000              B        |L9.60|
                  |L9.58|
00003a  2000              MOVS     r0,#0
                  |L9.60|
00003c  b100              CBZ      r0,|L9.64|
;;;1393   				{
;;;1394   					xReturn = pdTRUE;
00003e  2601              MOVS     r6,#1
                  |L9.64|
;;;1395   				}
;;;1396   				else
;;;1397   				{
;;;1398   					mtCOVERAGE_TEST_MARKER();
;;;1399   				}
;;;1400   			}
;;;1401   			else
;;;1402   			{
;;;1403   				mtCOVERAGE_TEST_MARKER();
;;;1404   			}
;;;1405   		}
;;;1406   		else
;;;1407   		{
;;;1408   			mtCOVERAGE_TEST_MARKER();
;;;1409   		}
;;;1410   
;;;1411   		return xReturn;
000040  4630              MOV      r0,r6
;;;1412   	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
000042  bd70              POP      {r4-r6,pc}
;;;1413   
                          ENDP

                  |L9.68|
                          DCD      xSuspendedTaskList
                  |L9.72|
                          DCD      xPendingReadyList

                          AREA ||i.pvTaskIncrementMutexHeldCount||, CODE, READONLY, ALIGN=2

                  pvTaskIncrementMutexHeldCount PROC
;;;3883   
;;;3884   	void *pvTaskIncrementMutexHeldCount( void )
000000  4806              LDR      r0,|L10.28|
;;;3885   	{
;;;3886   		/* If xSemaphoreCreateMutex() is called before any tasks have been created
;;;3887   		then pxCurrentTCB will be NULL. */
;;;3888   		if( pxCurrentTCB != NULL )
000002  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000004  b130              CBZ      r0,|L10.20|
;;;3889   		{
;;;3890   			( pxCurrentTCB->uxMutexesHeld )++;
000006  4905              LDR      r1,|L10.28|
000008  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
00000a  f1010048          ADD      r0,r1,#0x48
00000e  6c89              LDR      r1,[r1,#0x48]
000010  1c49              ADDS     r1,r1,#1
000012  6001              STR      r1,[r0,#0]
                  |L10.20|
;;;3891   		}
;;;3892   
;;;3893   		return pxCurrentTCB;
000014  4801              LDR      r0,|L10.28|
000016  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
;;;3894   	}
000018  4770              BX       lr
;;;3895   
                          ENDP

00001a  0000              DCW      0x0000
                  |L10.28|
                          DCD      pxCurrentTCB

                          AREA ||i.ulTaskNotifyTake||, CODE, READONLY, ALIGN=2

                  ulTaskNotifyTake PROC
;;;3900   
;;;3901   	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;3902   	{
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
;;;3903   	TickType_t xTimeToWake;
;;;3904   	uint32_t ulReturn;
;;;3905   
;;;3906   		taskENTER_CRITICAL();
000008  f7fffffe          BL       vPortEnterCritical
;;;3907   		{
;;;3908   			/* Only block if the notification count is not already non-zero. */
;;;3909   			if( pxCurrentTCB->ulNotifiedValue == 0UL )
00000c  4825              LDR      r0,|L11.164|
00000e  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000010  6cc0              LDR      r0,[r0,#0x4c]
000012  bb38              CBNZ     r0,|L11.100|
;;;3910   			{
;;;3911   				/* Mark this task as waiting for a notification. */
;;;3912   				pxCurrentTCB->eNotifyState = eWaitingNotification;
000014  2001              MOVS     r0,#1
000016  4923              LDR      r1,|L11.164|
000018  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
00001a  f8810050          STRB     r0,[r1,#0x50]
;;;3913   
;;;3914   				if( xTicksToWait > ( TickType_t ) 0 )
00001e  b30c              CBZ      r4,|L11.100|
;;;3915   				{
;;;3916   					/* The task is going to block.  First it must be removed
;;;3917   					from the ready list. */
;;;3918   					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
000020  4820              LDR      r0,|L11.164|
000022  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000024  1d00              ADDS     r0,r0,#4
000026  f7fffffe          BL       uxListRemove
00002a  b950              CBNZ     r0,|L11.66|
;;;3919   					{
;;;3920   						/* The current task must be in a ready list, so there is
;;;3921   						no need to check, and the port reset macro can be called
;;;3922   						directly. */
;;;3923   						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
00002c  481d              LDR      r0,|L11.164|
00002e  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000030  f890102c          LDRB     r1,[r0,#0x2c]
000034  2001              MOVS     r0,#1
000036  4088              LSLS     r0,r0,r1
000038  491b              LDR      r1,|L11.168|
00003a  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
00003c  4381              BICS     r1,r1,r0
00003e  481a              LDR      r0,|L11.168|
000040  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L11.66|
;;;3924   					}
;;;3925   					else
;;;3926   					{
;;;3927   						mtCOVERAGE_TEST_MARKER();
;;;3928   					}
;;;3929   
;;;3930   					#if ( INCLUDE_vTaskSuspend == 1 )
;;;3931   					{
;;;3932   						if( xTicksToWait == portMAX_DELAY )
000042  1c60              ADDS     r0,r4,#1
000044  b930              CBNZ     r0,|L11.84|
;;;3933   						{
;;;3934   							/* Add the task to the suspended task list instead
;;;3935   							of a delayed task list to ensure the task is not
;;;3936   							woken by a timing event.  It will block
;;;3937   							indefinitely. */
;;;3938   							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
000046  4817              LDR      r0,|L11.164|
000048  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
00004a  1d09              ADDS     r1,r1,#4
00004c  4817              LDR      r0,|L11.172|
00004e  f7fffffe          BL       vListInsertEnd
000052  e005              B        |L11.96|
                  |L11.84|
;;;3939   						}
;;;3940   						else
;;;3941   						{
;;;3942   							/* Calculate the time at which the task should be
;;;3943   							woken if no notification events occur.  This may
;;;3944   							overflow but this doesn't matter, the scheduler will
;;;3945   							handle it. */
;;;3946   							xTimeToWake = xTickCount + xTicksToWait;
000054  4816              LDR      r0,|L11.176|
000056  6800              LDR      r0,[r0,#0]  ; xTickCount
000058  1907              ADDS     r7,r0,r4
;;;3947   							prvAddCurrentTaskToDelayedList( xTimeToWake );
00005a  4638              MOV      r0,r7
00005c  f7fffffe          BL       prvAddCurrentTaskToDelayedList
                  |L11.96|
;;;3948   						}
;;;3949   					}
;;;3950   					#else /* INCLUDE_vTaskSuspend */
;;;3951   					{
;;;3952   							/* Calculate the time at which the task should be
;;;3953   							woken if the event does not occur.  This may
;;;3954   							overflow but this doesn't matter, the scheduler will
;;;3955   							handle it. */
;;;3956   							xTimeToWake = xTickCount + xTicksToWait;
;;;3957   							prvAddCurrentTaskToDelayedList( xTimeToWake );
;;;3958   					}
;;;3959   					#endif /* INCLUDE_vTaskSuspend */
;;;3960   
;;;3961   					traceTASK_NOTIFY_TAKE_BLOCK();
;;;3962   
;;;3963   					/* All ports are written to allow a yield in a critical
;;;3964   					section (some will yield immediately, others wait until the
;;;3965   					critical section exits) - but it is not something that
;;;3966   					application code should ever do. */
;;;3967   					portYIELD_WITHIN_API();
000060  f7fffffe          BL       vPortYield
                  |L11.100|
;;;3968   				}
;;;3969   				else
;;;3970   				{
;;;3971   					mtCOVERAGE_TEST_MARKER();
;;;3972   				}
;;;3973   			}
;;;3974   			else
;;;3975   			{
;;;3976   				mtCOVERAGE_TEST_MARKER();
;;;3977   			}
;;;3978   		}
;;;3979   		taskEXIT_CRITICAL();
000064  f7fffffe          BL       vPortExitCritical
;;;3980   
;;;3981   		taskENTER_CRITICAL();
000068  f7fffffe          BL       vPortEnterCritical
;;;3982   		{
;;;3983   			traceTASK_NOTIFY_TAKE();
;;;3984   			ulReturn = pxCurrentTCB->ulNotifiedValue;
00006c  480d              LDR      r0,|L11.164|
00006e  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000070  6cc5              LDR      r5,[r0,#0x4c]
;;;3985   
;;;3986   			if( ulReturn != 0UL )
000072  b165              CBZ      r5,|L11.142|
;;;3987   			{
;;;3988   				if( xClearCountOnExit != pdFALSE )
000074  b126              CBZ      r6,|L11.128|
;;;3989   				{
;;;3990   					pxCurrentTCB->ulNotifiedValue = 0UL;
000076  2000              MOVS     r0,#0
000078  490a              LDR      r1,|L11.164|
00007a  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
00007c  64c8              STR      r0,[r1,#0x4c]
00007e  e006              B        |L11.142|
                  |L11.128|
;;;3991   				}
;;;3992   				else
;;;3993   				{
;;;3994   					( pxCurrentTCB->ulNotifiedValue )--;
000080  4908              LDR      r1,|L11.164|
000082  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000084  f101004c          ADD      r0,r1,#0x4c
000088  6cc9              LDR      r1,[r1,#0x4c]
00008a  1e49              SUBS     r1,r1,#1
00008c  6001              STR      r1,[r0,#0]
                  |L11.142|
;;;3995   				}
;;;3996   			}
;;;3997   			else
;;;3998   			{
;;;3999   				mtCOVERAGE_TEST_MARKER();
;;;4000   			}
;;;4001   
;;;4002   			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
00008e  2000              MOVS     r0,#0
000090  4904              LDR      r1,|L11.164|
000092  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000094  f8810050          STRB     r0,[r1,#0x50]
;;;4003   		}
;;;4004   		taskEXIT_CRITICAL();
000098  f7fffffe          BL       vPortExitCritical
;;;4005   
;;;4006   		return ulReturn;
00009c  4628              MOV      r0,r5
;;;4007   	}
00009e  e8bd81f0          POP      {r4-r8,pc}
;;;4008   
                          ENDP

0000a2  0000              DCW      0x0000
                  |L11.164|
                          DCD      pxCurrentTCB
                  |L11.168|
                          DCD      uxTopReadyPriority
                  |L11.172|
                          DCD      xSuspendedTaskList
                  |L11.176|
                          DCD      xTickCount

                          AREA ||i.uxTaskGetNumberOfTasks||, CODE, READONLY, ALIGN=2

                  uxTaskGetNumberOfTasks PROC
;;;1809   
;;;1810   UBaseType_t uxTaskGetNumberOfTasks( void )
000000  4801              LDR      r0,|L12.8|
;;;1811   {
;;;1812   	/* A critical section is not required because the variables are of type
;;;1813   	BaseType_t. */
;;;1814   	return uxCurrentNumberOfTasks;
000002  6800              LDR      r0,[r0,#0]  ; uxCurrentNumberOfTasks
;;;1815   }
000004  4770              BX       lr
;;;1816   /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      uxCurrentNumberOfTasks

                          AREA ||i.uxTaskPriorityGet||, CODE, READONLY, ALIGN=2

                  uxTaskPriorityGet PROC
;;;1057   
;;;1058   	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
000000  b570              PUSH     {r4-r6,lr}
;;;1059   	{
000002  4604              MOV      r4,r0
;;;1060   	TCB_t *pxTCB;
;;;1061   	UBaseType_t uxReturn;
;;;1062   
;;;1063   		taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;1064   		{
;;;1065   			/* If null is passed in here then it is the priority of the that
;;;1066   			called uxTaskPriorityGet() that is being queried. */
;;;1067   			pxTCB = prvGetTCBFromHandle( xTask );
000008  b914              CBNZ     r4,|L13.16|
00000a  4805              LDR      r0,|L13.32|
00000c  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00000e  e000              B        |L13.18|
                  |L13.16|
000010  4620              MOV      r0,r4
                  |L13.18|
000012  4606              MOV      r6,r0
;;;1068   			uxReturn = pxTCB->uxPriority;
000014  6af5              LDR      r5,[r6,#0x2c]
;;;1069   		}
;;;1070   		taskEXIT_CRITICAL();
000016  f7fffffe          BL       vPortExitCritical
;;;1071   
;;;1072   		return uxReturn;
00001a  4628              MOV      r0,r5
;;;1073   	}
00001c  bd70              POP      {r4-r6,pc}
;;;1074   
                          ENDP

00001e  0000              DCW      0x0000
                  |L13.32|
                          DCD      pxCurrentTCB

                          AREA ||i.uxTaskPriorityGetFromISR||, CODE, READONLY, ALIGN=2

                  uxTaskPriorityGetFromISR PROC
;;;1079   
;;;1080   	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1081   	{
000004  4604              MOV      r4,r0
;;;1082   	TCB_t *pxTCB;
;;;1083   	UBaseType_t uxReturn, uxSavedInterruptState;
;;;1084   
;;;1085   		/* RTOS ports that support interrupt nesting have the concept of a
;;;1086   		maximum	system call (or maximum API call) interrupt priority.
;;;1087   		Interrupts that are	above the maximum system call priority are keep
;;;1088   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;1089   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;1090   		is defined in FreeRTOSConfig.h then
;;;1091   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1092   		failure if a FreeRTOS API function is called from an interrupt that has
;;;1093   		been assigned a priority above the configured maximum system call
;;;1094   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;1095   		from interrupts	that have been assigned a priority at or (logically)
;;;1096   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;1097   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;1098   		simple as possible.  More information (albeit Cortex-M specific) is
;;;1099   		provided on the following link:
;;;1100   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1101   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
000006  f7fffffe          BL       vPortValidateInterruptPriority
;;;1102   
;;;1103   		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
00000a  f7fffffe          BL       ulPortSetInterruptMask
00000e  4606              MOV      r6,r0
;;;1104   		{
;;;1105   			/* If null is passed in here then it is the priority of the calling
;;;1106   			task that is being queried. */
;;;1107   			pxTCB = prvGetTCBFromHandle( xTask );
000010  b914              CBNZ     r4,|L14.24|
000012  4806              LDR      r0,|L14.44|
000014  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000016  e000              B        |L14.26|
                  |L14.24|
000018  4620              MOV      r0,r4
                  |L14.26|
00001a  4607              MOV      r7,r0
;;;1108   			uxReturn = pxTCB->uxPriority;
00001c  6afd              LDR      r5,[r7,#0x2c]
;;;1109   		}
;;;1110   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       vPortClearInterruptMask
;;;1111   
;;;1112   		return uxReturn;
000024  4628              MOV      r0,r5
;;;1113   	}
000026  e8bd81f0          POP      {r4-r8,pc}
;;;1114   
                          ENDP

00002a  0000              DCW      0x0000
                  |L14.44|
                          DCD      pxCurrentTCB

                          AREA ||i.uxTaskResetEventItemValue||, CODE, READONLY, ALIGN=2

                  uxTaskResetEventItemValue PROC
;;;3867   
;;;3868   TickType_t uxTaskResetEventItemValue( void )
000000  4905              LDR      r1,|L15.24|
;;;3869   {
;;;3870   TickType_t uxReturn;
;;;3871   
;;;3872   	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
000002  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000004  6988              LDR      r0,[r1,#0x18]
;;;3873   
;;;3874   	/* Reset the event list item to its normal value - so it can be used with
;;;3875   	queues and semaphores. */
;;;3876   	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000006  4904              LDR      r1,|L15.24|
000008  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
00000a  6ac9              LDR      r1,[r1,#0x2c]
00000c  f1c10106          RSB      r1,r1,#6
000010  4a01              LDR      r2,|L15.24|
000012  6812              LDR      r2,[r2,#0]  ; pxCurrentTCB
000014  6191              STR      r1,[r2,#0x18]
;;;3877   
;;;3878   	return uxReturn;
;;;3879   }
000016  4770              BX       lr
;;;3880   /*-----------------------------------------------------------*/
                          ENDP

                  |L15.24|
                          DCD      pxCurrentTCB

                          AREA ||i.vTaskDelay||, CODE, READONLY, ALIGN=2

                  vTaskDelay PROC
;;;921    
;;;922    	void vTaskDelay( const TickType_t xTicksToDelay )
000000  b570              PUSH     {r4-r6,lr}
;;;923    	{
000002  4604              MOV      r4,r0
;;;924    	TickType_t xTimeToWake;
;;;925    	BaseType_t xAlreadyYielded = pdFALSE;
000004  2600              MOVS     r6,#0
;;;926    
;;;927    
;;;928    		/* A delay time of zero just forces a reschedule. */
;;;929    		if( xTicksToDelay > ( TickType_t ) 0U )
000006  b334              CBZ      r4,|L16.86|
;;;930    		{
;;;931    			configASSERT( uxSchedulerSuspended == 0 );
000008  4815              LDR      r0,|L16.96|
00000a  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00000c  b908              CBNZ     r0,|L16.18|
00000e  2001              MOVS     r0,#1
000010  e000              B        |L16.20|
                  |L16.18|
000012  2000              MOVS     r0,#0
                  |L16.20|
000014  b918              CBNZ     r0,|L16.30|
000016  f7fffffe          BL       ulPortSetInterruptMask
00001a  bf00              NOP      
                  |L16.28|
00001c  e7fe              B        |L16.28|
                  |L16.30|
;;;932    			vTaskSuspendAll();
00001e  f7fffffe          BL       vTaskSuspendAll
;;;933    			{
;;;934    				traceTASK_DELAY();
;;;935    
;;;936    				/* A task that is removed from the event list while the
;;;937    				scheduler is suspended will not get placed in the ready
;;;938    				list or removed from the blocked list until the scheduler
;;;939    				is resumed.
;;;940    
;;;941    				This task cannot be in an event list as it is the currently
;;;942    				executing task. */
;;;943    
;;;944    				/* Calculate the time to wake - this may overflow but this is
;;;945    				not a problem. */
;;;946    				xTimeToWake = xTickCount + xTicksToDelay;
000022  4810              LDR      r0,|L16.100|
000024  6800              LDR      r0,[r0,#0]  ; xTickCount
000026  1905              ADDS     r5,r0,r4
;;;947    
;;;948    				/* We must remove ourselves from the ready list before adding
;;;949    				ourselves to the blocked list as the same list item is used for
;;;950    				both lists. */
;;;951    				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
000028  480f              LDR      r0,|L16.104|
00002a  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00002c  1d00              ADDS     r0,r0,#4
00002e  f7fffffe          BL       uxListRemove
000032  b950              CBNZ     r0,|L16.74|
;;;952    				{
;;;953    					/* The current task must be in a ready list, so there is
;;;954    					no need to check, and the port reset macro can be called
;;;955    					directly. */
;;;956    					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
000034  480c              LDR      r0,|L16.104|
000036  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000038  f890102c          LDRB     r1,[r0,#0x2c]
00003c  2001              MOVS     r0,#1
00003e  4088              LSLS     r0,r0,r1
000040  490a              LDR      r1,|L16.108|
000042  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000044  4381              BICS     r1,r1,r0
000046  4809              LDR      r0,|L16.108|
000048  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L16.74|
;;;957    				}
;;;958    				else
;;;959    				{
;;;960    					mtCOVERAGE_TEST_MARKER();
;;;961    				}
;;;962    				prvAddCurrentTaskToDelayedList( xTimeToWake );
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;963    			}
;;;964    			xAlreadyYielded = xTaskResumeAll();
000050  f7fffffe          BL       xTaskResumeAll
000054  4606              MOV      r6,r0
                  |L16.86|
;;;965    		}
;;;966    		else
;;;967    		{
;;;968    			mtCOVERAGE_TEST_MARKER();
;;;969    		}
;;;970    
;;;971    		/* Force a reschedule if xTaskResumeAll has not already done so, we may
;;;972    		have put ourselves to sleep. */
;;;973    		if( xAlreadyYielded == pdFALSE )
000056  b90e              CBNZ     r6,|L16.92|
;;;974    		{
;;;975    			portYIELD_WITHIN_API();
000058  f7fffffe          BL       vPortYield
                  |L16.92|
;;;976    		}
;;;977    		else
;;;978    		{
;;;979    			mtCOVERAGE_TEST_MARKER();
;;;980    		}
;;;981    	}
00005c  bd70              POP      {r4-r6,pc}
;;;982    
                          ENDP

00005e  0000              DCW      0x0000
                  |L16.96|
                          DCD      uxSchedulerSuspended
                  |L16.100|
                          DCD      xTickCount
                  |L16.104|
                          DCD      pxCurrentTCB
                  |L16.108|
                          DCD      uxTopReadyPriority

                          AREA ||i.vTaskDelayUntil||, CODE, READONLY, ALIGN=2

                  vTaskDelayUntil PROC
;;;825    
;;;826    	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;827    	{
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;828    	TickType_t xTimeToWake;
;;;829    	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
000008  f04f0900          MOV      r9,#0
;;;830    
;;;831    		configASSERT( pxPreviousWakeTime );
00000c  b91c              CBNZ     r4,|L17.22|
00000e  f7fffffe          BL       ulPortSetInterruptMask
000012  bf00              NOP      
                  |L17.20|
000014  e7fe              B        |L17.20|
                  |L17.22|
;;;832    		configASSERT( ( xTimeIncrement > 0U ) );
000016  b10e              CBZ      r6,|L17.28|
000018  2001              MOVS     r0,#1
00001a  e000              B        |L17.30|
                  |L17.28|
00001c  2000              MOVS     r0,#0
                  |L17.30|
00001e  b918              CBNZ     r0,|L17.40|
000020  f7fffffe          BL       ulPortSetInterruptMask
000024  bf00              NOP      
                  |L17.38|
000026  e7fe              B        |L17.38|
                  |L17.40|
;;;833    		configASSERT( uxSchedulerSuspended == 0 );
000028  4821              LDR      r0,|L17.176|
00002a  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00002c  b908              CBNZ     r0,|L17.50|
00002e  2001              MOVS     r0,#1
000030  e000              B        |L17.52|
                  |L17.50|
000032  2000              MOVS     r0,#0
                  |L17.52|
000034  b918              CBNZ     r0,|L17.62|
000036  f7fffffe          BL       ulPortSetInterruptMask
00003a  bf00              NOP      
                  |L17.60|
00003c  e7fe              B        |L17.60|
                  |L17.62|
;;;834    
;;;835    		vTaskSuspendAll();
00003e  f7fffffe          BL       vTaskSuspendAll
;;;836    		{
;;;837    			/* Minor optimisation.  The tick count cannot change in this
;;;838    			block. */
;;;839    			const TickType_t xConstTickCount = xTickCount;
000042  481c              LDR      r0,|L17.180|
000044  f8d08000          LDR      r8,[r0,#0]  ; xTickCount
;;;840    
;;;841    			/* Generate the tick time at which the task wants to wake. */
;;;842    			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
000048  6820              LDR      r0,[r4,#0]
00004a  1985              ADDS     r5,r0,r6
;;;843    
;;;844    			if( xConstTickCount < *pxPreviousWakeTime )
00004c  6820              LDR      r0,[r4,#0]
00004e  4540              CMP      r0,r8
000050  d907              BLS      |L17.98|
;;;845    			{
;;;846    				/* The tick count has overflowed since this function was
;;;847    				lasted called.  In this case the only time we should ever
;;;848    				actually delay is if the wake time has also	overflowed,
;;;849    				and the wake time is greater than the tick time.  When this
;;;850    				is the case it is as if neither time had overflowed. */
;;;851    				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
000052  6820              LDR      r0,[r4,#0]
000054  42a8              CMP      r0,r5
000056  d90b              BLS      |L17.112|
000058  4545              CMP      r5,r8
00005a  d909              BLS      |L17.112|
;;;852    				{
;;;853    					xShouldDelay = pdTRUE;
00005c  f04f0901          MOV      r9,#1
000060  e006              B        |L17.112|
                  |L17.98|
;;;854    				}
;;;855    				else
;;;856    				{
;;;857    					mtCOVERAGE_TEST_MARKER();
;;;858    				}
;;;859    			}
;;;860    			else
;;;861    			{
;;;862    				/* The tick time has not overflowed.  In this case we will
;;;863    				delay if either the wake time has overflowed, and/or the
;;;864    				tick time is less than the wake time. */
;;;865    				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
000062  6820              LDR      r0,[r4,#0]
000064  42a8              CMP      r0,r5
000066  d801              BHI      |L17.108|
000068  4545              CMP      r5,r8
00006a  d901              BLS      |L17.112|
                  |L17.108|
;;;866    				{
;;;867    					xShouldDelay = pdTRUE;
00006c  f04f0901          MOV      r9,#1
                  |L17.112|
;;;868    				}
;;;869    				else
;;;870    				{
;;;871    					mtCOVERAGE_TEST_MARKER();
;;;872    				}
;;;873    			}
;;;874    
;;;875    			/* Update the wake time ready for the next call. */
;;;876    			*pxPreviousWakeTime = xTimeToWake;
000070  6025              STR      r5,[r4,#0]
;;;877    
;;;878    			if( xShouldDelay != pdFALSE )
000072  f1b90f00          CMP      r9,#0
000076  d013              BEQ      |L17.160|
;;;879    			{
;;;880    				traceTASK_DELAY_UNTIL();
;;;881    
;;;882    				/* Remove the task from the ready list before adding it to the
;;;883    				blocked list as the same list item is used for both lists. */
;;;884    				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
000078  480f              LDR      r0,|L17.184|
00007a  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00007c  1d00              ADDS     r0,r0,#4
00007e  f7fffffe          BL       uxListRemove
000082  b950              CBNZ     r0,|L17.154|
;;;885    				{
;;;886    					/* The current task must be in a ready list, so there is
;;;887    					no need to check, and the port reset macro can be called
;;;888    					directly. */
;;;889    					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
000084  480c              LDR      r0,|L17.184|
000086  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000088  f890102c          LDRB     r1,[r0,#0x2c]
00008c  2001              MOVS     r0,#1
00008e  4088              LSLS     r0,r0,r1
000090  490a              LDR      r1,|L17.188|
000092  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000094  4381              BICS     r1,r1,r0
000096  4809              LDR      r0,|L17.188|
000098  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L17.154|
;;;890    				}
;;;891    				else
;;;892    				{
;;;893    					mtCOVERAGE_TEST_MARKER();
;;;894    				}
;;;895    
;;;896    				prvAddCurrentTaskToDelayedList( xTimeToWake );
00009a  4628              MOV      r0,r5
00009c  f7fffffe          BL       prvAddCurrentTaskToDelayedList
                  |L17.160|
;;;897    			}
;;;898    			else
;;;899    			{
;;;900    				mtCOVERAGE_TEST_MARKER();
;;;901    			}
;;;902    		}
;;;903    		xAlreadyYielded = xTaskResumeAll();
0000a0  f7fffffe          BL       xTaskResumeAll
0000a4  4607              MOV      r7,r0
;;;904    
;;;905    		/* Force a reschedule if xTaskResumeAll has not already done so, we may
;;;906    		have put ourselves to sleep. */
;;;907    		if( xAlreadyYielded == pdFALSE )
0000a6  b90f              CBNZ     r7,|L17.172|
;;;908    		{
;;;909    			portYIELD_WITHIN_API();
0000a8  f7fffffe          BL       vPortYield
                  |L17.172|
;;;910    		}
;;;911    		else
;;;912    		{
;;;913    			mtCOVERAGE_TEST_MARKER();
;;;914    		}
;;;915    	}
0000ac  e8bd87f0          POP      {r4-r10,pc}
;;;916    
                          ENDP

                  |L17.176|
                          DCD      uxSchedulerSuspended
                  |L17.180|
                          DCD      xTickCount
                  |L17.184|
                          DCD      pxCurrentTCB
                  |L17.188|
                          DCD      uxTopReadyPriority

                          AREA ||i.vTaskDelete||, CODE, READONLY, ALIGN=2

                  vTaskDelete PROC
;;;743    
;;;744    	void vTaskDelete( TaskHandle_t xTaskToDelete )
000000  b570              PUSH     {r4-r6,lr}
;;;745    	{
000002  4605              MOV      r5,r0
;;;746    	TCB_t *pxTCB;
;;;747    
;;;748    		taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;749    		{
;;;750    			/* If null is passed in here then it is the calling task that is
;;;751    			being deleted. */
;;;752    			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
000008  b915              CBNZ     r5,|L18.16|
00000a  4825              LDR      r0,|L18.160|
00000c  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00000e  e000              B        |L18.18|
                  |L18.16|
000010  4628              MOV      r0,r5
                  |L18.18|
000012  4604              MOV      r4,r0
;;;753    
;;;754    			/* Remove task from the ready list and place in the	termination list.
;;;755    			This will stop the task from be scheduled.  The idle task will check
;;;756    			the termination list and free up any memory allocated by the
;;;757    			scheduler for the TCB and stack. */
;;;758    			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
000014  1d20              ADDS     r0,r4,#4
000016  f7fffffe          BL       uxListRemove
00001a  b978              CBNZ     r0,|L18.60|
;;;759    			{
;;;760    				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
00001c  6ae0              LDR      r0,[r4,#0x2c]
00001e  eb000080          ADD      r0,r0,r0,LSL #2
000022  4920              LDR      r1,|L18.164|
000024  f8510020          LDR      r0,[r1,r0,LSL #2]
000028  b940              CBNZ     r0,|L18.60|
00002a  f894102c          LDRB     r1,[r4,#0x2c]
00002e  2001              MOVS     r0,#1
000030  4088              LSLS     r0,r0,r1
000032  491d              LDR      r1,|L18.168|
000034  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000036  4381              BICS     r1,r1,r0
000038  481b              LDR      r0,|L18.168|
00003a  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L18.60|
;;;761    			}
;;;762    			else
;;;763    			{
;;;764    				mtCOVERAGE_TEST_MARKER();
;;;765    			}
;;;766    
;;;767    			/* Is the task waiting on an event also? */
;;;768    			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
00003c  6aa0              LDR      r0,[r4,#0x28]
00003e  b118              CBZ      r0,|L18.72|
;;;769    			{
;;;770    				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
000040  f1040018          ADD      r0,r4,#0x18
000044  f7fffffe          BL       uxListRemove
                  |L18.72|
;;;771    			}
;;;772    			else
;;;773    			{
;;;774    				mtCOVERAGE_TEST_MARKER();
;;;775    			}
;;;776    
;;;777    			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
000048  1d21              ADDS     r1,r4,#4
00004a  4818              LDR      r0,|L18.172|
00004c  f7fffffe          BL       vListInsertEnd
;;;778    
;;;779    			/* Increment the ucTasksDeleted variable so the idle task knows
;;;780    			there is a task that has been deleted and that it should therefore
;;;781    			check the xTasksWaitingTermination list. */
;;;782    			++uxTasksDeleted;
000050  4817              LDR      r0,|L18.176|
000052  6800              LDR      r0,[r0,#0]  ; uxTasksDeleted
000054  1c40              ADDS     r0,r0,#1
000056  4916              LDR      r1,|L18.176|
000058  6008              STR      r0,[r1,#0]  ; uxTasksDeleted
;;;783    
;;;784    			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
;;;785    			can detect that the task lists need re-generating. */
;;;786    			uxTaskNumber++;
00005a  4816              LDR      r0,|L18.180|
00005c  6800              LDR      r0,[r0,#0]  ; uxTaskNumber
00005e  1c40              ADDS     r0,r0,#1
000060  4914              LDR      r1,|L18.180|
000062  6008              STR      r0,[r1,#0]  ; uxTaskNumber
;;;787    
;;;788    			traceTASK_DELETE( pxTCB );
;;;789    		}
;;;790    		taskEXIT_CRITICAL();
000064  f7fffffe          BL       vPortExitCritical
;;;791    
;;;792    		/* Force a reschedule if it is the currently running task that has just
;;;793    		been deleted. */
;;;794    		if( xSchedulerRunning != pdFALSE )
000068  4813              LDR      r0,|L18.184|
00006a  6800              LDR      r0,[r0,#0]  ; xSchedulerRunning
00006c  b1b8              CBZ      r0,|L18.158|
;;;795    		{
;;;796    			if( pxTCB == pxCurrentTCB )
00006e  480c              LDR      r0,|L18.160|
000070  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000072  4284              CMP      r4,r0
000074  d10d              BNE      |L18.146|
;;;797    			{
;;;798    				configASSERT( uxSchedulerSuspended == 0 );
000076  4811              LDR      r0,|L18.188|
000078  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00007a  b908              CBNZ     r0,|L18.128|
00007c  2001              MOVS     r0,#1
00007e  e000              B        |L18.130|
                  |L18.128|
000080  2000              MOVS     r0,#0
                  |L18.130|
000082  b918              CBNZ     r0,|L18.140|
000084  f7fffffe          BL       ulPortSetInterruptMask
000088  bf00              NOP      
                  |L18.138|
00008a  e7fe              B        |L18.138|
                  |L18.140|
;;;799    
;;;800    				/* The pre-delete hook is primarily for the Windows simulator,
;;;801    				in which Windows specific clean up operations are performed,
;;;802    				after which it is not possible to yield away from this task -
;;;803    				hence xYieldPending is used to latch that a context switch is
;;;804    				required. */
;;;805    				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
;;;806    				portYIELD_WITHIN_API();
00008c  f7fffffe          BL       vPortYield
000090  e005              B        |L18.158|
                  |L18.146|
;;;807    			}
;;;808    			else
;;;809    			{
;;;810    				/* Reset the next expected unblock time in case it referred to
;;;811    				the task that has just been deleted. */
;;;812    				taskENTER_CRITICAL();
000092  f7fffffe          BL       vPortEnterCritical
;;;813    				{
;;;814    					prvResetNextTaskUnblockTime();
000096  f7fffffe          BL       prvResetNextTaskUnblockTime
;;;815    				}
;;;816    				taskEXIT_CRITICAL();
00009a  f7fffffe          BL       vPortExitCritical
                  |L18.158|
;;;817    			}
;;;818    		}
;;;819    	}
00009e  bd70              POP      {r4-r6,pc}
;;;820    
                          ENDP

                  |L18.160|
                          DCD      pxCurrentTCB
                  |L18.164|
                          DCD      pxReadyTasksLists
                  |L18.168|
                          DCD      uxTopReadyPriority
                  |L18.172|
                          DCD      xTasksWaitingTermination
                  |L18.176|
                          DCD      uxTasksDeleted
                  |L18.180|
                          DCD      uxTaskNumber
                  |L18.184|
                          DCD      xSchedulerRunning
                  |L18.188|
                          DCD      uxSchedulerSuspended

                          AREA ||i.vTaskEndScheduler||, CODE, READONLY, ALIGN=2

                  vTaskEndScheduler PROC
;;;1621   
;;;1622   void vTaskEndScheduler( void )
000000  b510              PUSH     {r4,lr}
;;;1623   {
;;;1624   	/* Stop the scheduler interrupts and call the portable scheduler end
;;;1625   	routine so the original ISRs can be restored if necessary.  The port
;;;1626   	layer must ensure interrupts enable	bit is left in the correct state. */
;;;1627   	portDISABLE_INTERRUPTS();
000002  f7fffffe          BL       ulPortSetInterruptMask
;;;1628   	xSchedulerRunning = pdFALSE;
000006  2000              MOVS     r0,#0
000008  4902              LDR      r1,|L19.20|
00000a  6008              STR      r0,[r1,#0]  ; xSchedulerRunning
;;;1629   	vPortEndScheduler();
00000c  f7fffffe          BL       vPortEndScheduler
;;;1630   }
000010  bd10              POP      {r4,pc}
;;;1631   /*----------------------------------------------------------*/
                          ENDP

000012  0000              DCW      0x0000
                  |L19.20|
                          DCD      xSchedulerRunning

                          AREA ||i.vTaskMissedYield||, CODE, READONLY, ALIGN=2

                  vTaskMissedYield PROC
;;;2634   
;;;2635   void vTaskMissedYield( void )
000000  2001              MOVS     r0,#1
;;;2636   {
;;;2637   	xYieldPending = pdTRUE;
000002  4901              LDR      r1,|L20.8|
000004  6008              STR      r0,[r1,#0]  ; xYieldPending
;;;2638   }
000006  4770              BX       lr
;;;2639   /*-----------------------------------------------------------*/
                          ENDP

                  |L20.8|
                          DCD      xYieldPending

                          AREA ||i.vTaskNotifyGiveFromISR||, CODE, READONLY, ALIGN=2

                  vTaskNotifyGiveFromISR PROC
;;;4361   
;;;4362   	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4363   	{
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;4364   	TCB_t * pxTCB;
;;;4365   	eNotifyValue eOriginalNotifyState;
;;;4366   	UBaseType_t uxSavedInterruptStatus;
;;;4367   
;;;4368   		configASSERT( xTaskToNotify );
000008  b91d              CBNZ     r5,|L21.18|
00000a  f7fffffe          BL       ulPortSetInterruptMask
00000e  bf00              NOP      
                  |L21.16|
000010  e7fe              B        |L21.16|
                  |L21.18|
;;;4369   
;;;4370   		/* RTOS ports that support interrupt nesting have the concept of a
;;;4371   		maximum	system call (or maximum API call) interrupt priority.
;;;4372   		Interrupts that are	above the maximum system call priority are keep
;;;4373   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;4374   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;4375   		is defined in FreeRTOSConfig.h then
;;;4376   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;4377   		failure if a FreeRTOS API function is called from an interrupt that has
;;;4378   		been assigned a priority above the configured maximum system call
;;;4379   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;4380   		from interrupts	that have been assigned a priority at or (logically)
;;;4381   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;4382   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;4383   		simple as possible.  More information (albeit Cortex-M specific) is
;;;4384   		provided on the following link:
;;;4385   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;4386   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
000012  f7fffffe          BL       vPortValidateInterruptPriority
;;;4387   
;;;4388   		pxTCB = ( TCB_t * ) xTaskToNotify;
000016  462c              MOV      r4,r5
;;;4389   
;;;4390   		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
000018  f7fffffe          BL       ulPortSetInterruptMask
00001c  4680              MOV      r8,r0
;;;4391   		{
;;;4392   			eOriginalNotifyState = pxTCB->eNotifyState;
00001e  f8947050          LDRB     r7,[r4,#0x50]
;;;4393   			pxTCB->eNotifyState = eNotified;
000022  2002              MOVS     r0,#2
000024  f8840050          STRB     r0,[r4,#0x50]
;;;4394   
;;;4395   			/* 'Giving' is equivalent to incrementing a count in a counting
;;;4396   			semaphore. */
;;;4397   			( pxTCB->ulNotifiedValue )++;
000028  6ce0              LDR      r0,[r4,#0x4c]
00002a  1c40              ADDS     r0,r0,#1
00002c  64e0              STR      r0,[r4,#0x4c]
;;;4398   
;;;4399   			traceTASK_NOTIFY_GIVE_FROM_ISR();
;;;4400   
;;;4401   			/* If the task is in the blocked state specifically to wait for a
;;;4402   			notification then unblock it now. */
;;;4403   			if( eOriginalNotifyState == eWaitingNotification )
00002e  2f01              CMP      r7,#1
000030  d130              BNE      |L21.148|
;;;4404   			{
;;;4405   				/* The task should not have been on an event list. */
;;;4406   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
000032  6aa0              LDR      r0,[r4,#0x28]
000034  b908              CBNZ     r0,|L21.58|
000036  2001              MOVS     r0,#1
000038  e000              B        |L21.60|
                  |L21.58|
00003a  2000              MOVS     r0,#0
                  |L21.60|
00003c  b918              CBNZ     r0,|L21.70|
00003e  f7fffffe          BL       ulPortSetInterruptMask
000042  bf00              NOP      
                  |L21.68|
000044  e7fe              B        |L21.68|
                  |L21.70|
;;;4407   
;;;4408   				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000046  4816              LDR      r0,|L21.160|
000048  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00004a  b9a8              CBNZ     r0,|L21.120|
;;;4409   				{
;;;4410   					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
00004c  1d20              ADDS     r0,r4,#4
00004e  f7fffffe          BL       uxListRemove
;;;4411   					prvAddTaskToReadyList( pxTCB );
000052  f894102c          LDRB     r1,[r4,#0x2c]
000056  2001              MOVS     r0,#1
000058  4088              LSLS     r0,r0,r1
00005a  4912              LDR      r1,|L21.164|
00005c  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
00005e  4308              ORRS     r0,r0,r1
000060  4910              LDR      r1,|L21.164|
000062  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000064  6ae1              LDR      r1,[r4,#0x2c]
000066  eb010181          ADD      r1,r1,r1,LSL #2
00006a  4a0f              LDR      r2,|L21.168|
00006c  eb020081          ADD      r0,r2,r1,LSL #2
000070  1d21              ADDS     r1,r4,#4
000072  f7fffffe          BL       vListInsertEnd
000076  e004              B        |L21.130|
                  |L21.120|
;;;4412   				}
;;;4413   				else
;;;4414   				{
;;;4415   					/* The delayed and ready lists cannot be accessed, so hold
;;;4416   					this task pending until the scheduler is resumed. */
;;;4417   					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
000078  f1040118          ADD      r1,r4,#0x18
00007c  480b              LDR      r0,|L21.172|
00007e  f7fffffe          BL       vListInsertEnd
                  |L21.130|
;;;4418   				}
;;;4419   
;;;4420   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
000082  490b              LDR      r1,|L21.176|
000084  6ae0              LDR      r0,[r4,#0x2c]
000086  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000088  6ac9              LDR      r1,[r1,#0x2c]
00008a  4288              CMP      r0,r1
00008c  d902              BLS      |L21.148|
;;;4421   				{
;;;4422   					/* The notified task has a priority above the currently
;;;4423   					executing task so a yield is required. */
;;;4424   					if( pxHigherPriorityTaskWoken != NULL )
00008e  b10e              CBZ      r6,|L21.148|
;;;4425   					{
;;;4426   						*pxHigherPriorityTaskWoken = pdTRUE;
000090  2001              MOVS     r0,#1
000092  6030              STR      r0,[r6,#0]
                  |L21.148|
;;;4427   					}
;;;4428   				}
;;;4429   				else
;;;4430   				{
;;;4431   					mtCOVERAGE_TEST_MARKER();
;;;4432   				}
;;;4433   			}
;;;4434   		}
;;;4435   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
000094  4640              MOV      r0,r8
000096  f7fffffe          BL       vPortClearInterruptMask
;;;4436   	}
00009a  e8bd81f0          POP      {r4-r8,pc}
;;;4437   
                          ENDP

00009e  0000              DCW      0x0000
                  |L21.160|
                          DCD      uxSchedulerSuspended
                  |L21.164|
                          DCD      uxTopReadyPriority
                  |L21.168|
                          DCD      pxReadyTasksLists
                  |L21.172|
                          DCD      xPendingReadyList
                  |L21.176|
                          DCD      pxCurrentTCB

                          AREA ||i.vTaskPlaceOnEventList||, CODE, READONLY, ALIGN=2

                  vTaskPlaceOnEventList PROC
;;;2261   
;;;2262   void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
000000  b570              PUSH     {r4-r6,lr}
;;;2263   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2264   TickType_t xTimeToWake;
;;;2265   
;;;2266   	configASSERT( pxEventList );
000006  b91d              CBNZ     r5,|L22.16|
000008  f7fffffe          BL       ulPortSetInterruptMask
00000c  bf00              NOP      
                  |L22.14|
00000e  e7fe              B        |L22.14|
                  |L22.16|
;;;2267   
;;;2268   	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
;;;2269   	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
;;;2270   
;;;2271   	/* Place the event list item of the TCB in the appropriate event list.
;;;2272   	This is placed in the list in priority order so the highest priority task
;;;2273   	is the first to be woken by the event.  The queue that contains the event
;;;2274   	list is locked, preventing simultaneous access from interrupts. */
;;;2275   	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
000010  4813              LDR      r0,|L22.96|
000012  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
000014  3118              ADDS     r1,r1,#0x18
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       vListInsert
;;;2276   
;;;2277   	/* The task must be removed from from the ready list before it is added to
;;;2278   	the blocked list as the same list item is used for both lists.  Exclusive
;;;2279   	access to the ready lists guaranteed because the scheduler is locked. */
;;;2280   	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
00001c  4810              LDR      r0,|L22.96|
00001e  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000020  1d00              ADDS     r0,r0,#4
000022  f7fffffe          BL       uxListRemove
000026  b950              CBNZ     r0,|L22.62|
;;;2281   	{
;;;2282   		/* The current task must be in a ready list, so there is no need to
;;;2283   		check, and the port reset macro can be called directly. */
;;;2284   		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
000028  480d              LDR      r0,|L22.96|
00002a  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00002c  f890102c          LDRB     r1,[r0,#0x2c]
000030  2001              MOVS     r0,#1
000032  4088              LSLS     r0,r0,r1
000034  490b              LDR      r1,|L22.100|
000036  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000038  4381              BICS     r1,r1,r0
00003a  480a              LDR      r0,|L22.100|
00003c  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L22.62|
;;;2285   	}
;;;2286   	else
;;;2287   	{
;;;2288   		mtCOVERAGE_TEST_MARKER();
;;;2289   	}
;;;2290   
;;;2291   	#if ( INCLUDE_vTaskSuspend == 1 )
;;;2292   	{
;;;2293   		if( xTicksToWait == portMAX_DELAY )
00003e  1c60              ADDS     r0,r4,#1
000040  b930              CBNZ     r0,|L22.80|
;;;2294   		{
;;;2295   			/* Add the task to the suspended task list instead of a delayed task
;;;2296   			list to ensure the task is not woken by a timing event.  It will
;;;2297   			block indefinitely. */
;;;2298   			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
000042  4807              LDR      r0,|L22.96|
000044  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
000046  1d09              ADDS     r1,r1,#4
000048  4807              LDR      r0,|L22.104|
00004a  f7fffffe          BL       vListInsertEnd
00004e  e005              B        |L22.92|
                  |L22.80|
;;;2299   		}
;;;2300   		else
;;;2301   		{
;;;2302   			/* Calculate the time at which the task should be woken if the event
;;;2303   			does not occur.  This may overflow but this doesn't matter, the
;;;2304   			scheduler will handle it. */
;;;2305   			xTimeToWake = xTickCount + xTicksToWait;
000050  4806              LDR      r0,|L22.108|
000052  6800              LDR      r0,[r0,#0]  ; xTickCount
000054  1906              ADDS     r6,r0,r4
;;;2306   			prvAddCurrentTaskToDelayedList( xTimeToWake );
000056  4630              MOV      r0,r6
000058  f7fffffe          BL       prvAddCurrentTaskToDelayedList
                  |L22.92|
;;;2307   		}
;;;2308   	}
;;;2309   	#else /* INCLUDE_vTaskSuspend */
;;;2310   	{
;;;2311   			/* Calculate the time at which the task should be woken if the event does
;;;2312   			not occur.  This may overflow but this doesn't matter, the scheduler
;;;2313   			will handle it. */
;;;2314   			xTimeToWake = xTickCount + xTicksToWait;
;;;2315   			prvAddCurrentTaskToDelayedList( xTimeToWake );
;;;2316   	}
;;;2317   	#endif /* INCLUDE_vTaskSuspend */
;;;2318   }
00005c  bd70              POP      {r4-r6,pc}
;;;2319   /*-----------------------------------------------------------*/
                          ENDP

00005e  0000              DCW      0x0000
                  |L22.96|
                          DCD      pxCurrentTCB
                  |L22.100|
                          DCD      uxTopReadyPriority
                  |L22.104|
                          DCD      xSuspendedTaskList
                  |L22.108|
                          DCD      xTickCount

                          AREA ||i.vTaskPlaceOnEventListRestricted||, CODE, READONLY, ALIGN=2

                  vTaskPlaceOnEventListRestricted PROC
;;;2388   
;;;2389   	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2390   	{
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;2391   	TickType_t xTimeToWake;
;;;2392   
;;;2393   		configASSERT( pxEventList );
00000a  b91c              CBNZ     r4,|L23.20|
00000c  f7fffffe          BL       ulPortSetInterruptMask
000010  bf00              NOP      
                  |L23.18|
000012  e7fe              B        |L23.18|
                  |L23.20|
;;;2394   
;;;2395   		/* This function should not be called by application code hence the
;;;2396   		'Restricted' in its name.  It is not part of the public API.  It is
;;;2397   		designed for use by kernel code, and has special calling requirements -
;;;2398   		it should be called with the scheduler suspended. */
;;;2399   
;;;2400   
;;;2401   		/* Place the event list item of the TCB in the appropriate event list.
;;;2402   		In this case it is assume that this is the only task that is going to
;;;2403   		be waiting on this event list, so the faster vListInsertEnd() function
;;;2404   		can be used in place of vListInsert. */
;;;2405   		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
000014  4813              LDR      r0,|L23.100|
000016  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
000018  3118              ADDS     r1,r1,#0x18
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       vListInsertEnd
;;;2406   
;;;2407   		/* We must remove this task from the ready list before adding it to the
;;;2408   		blocked list as the same list item is used for both lists.  This
;;;2409   		function is called with the scheduler locked so interrupts will not
;;;2410   		access the lists at the same time. */
;;;2411   		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
000020  4810              LDR      r0,|L23.100|
000022  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000024  1d00              ADDS     r0,r0,#4
000026  f7fffffe          BL       uxListRemove
00002a  b950              CBNZ     r0,|L23.66|
;;;2412   		{
;;;2413   			/* The current task must be in a ready list, so there is no need to
;;;2414   			check, and the port reset macro can be called directly. */
;;;2415   			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
00002c  480d              LDR      r0,|L23.100|
00002e  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000030  f890102c          LDRB     r1,[r0,#0x2c]
000034  2001              MOVS     r0,#1
000036  4088              LSLS     r0,r0,r1
000038  490b              LDR      r1,|L23.104|
00003a  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
00003c  4381              BICS     r1,r1,r0
00003e  480a              LDR      r0,|L23.104|
000040  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L23.66|
;;;2416   		}
;;;2417   		else
;;;2418   		{
;;;2419   			mtCOVERAGE_TEST_MARKER();
;;;2420   		}
;;;2421   
;;;2422   		/* If vTaskSuspend() is available then the suspended task list is also
;;;2423   		available and a task that is blocking indefinitely can enter the
;;;2424   		suspended state (it is not really suspended as it will re-enter the
;;;2425   		Ready state when the event it is waiting indefinitely for occurs).
;;;2426   		Blocking indefinitely is useful when using tickless idle mode as when
;;;2427   		all tasks are blocked indefinitely all timers can be turned off. */
;;;2428   		#if( INCLUDE_vTaskSuspend == 1 )
;;;2429   		{
;;;2430   			if( xWaitIndefinitely == pdTRUE )
000042  2e01              CMP      r6,#1
000044  d106              BNE      |L23.84|
;;;2431   			{
;;;2432   				/* Add the task to the suspended task list instead of a delayed
;;;2433   				task list to ensure the task is not woken by a timing event.  It
;;;2434   				will block indefinitely. */
;;;2435   				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
000046  4807              LDR      r0,|L23.100|
000048  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
00004a  1d09              ADDS     r1,r1,#4
00004c  4807              LDR      r0,|L23.108|
00004e  f7fffffe          BL       vListInsertEnd
000052  e005              B        |L23.96|
                  |L23.84|
;;;2436   			}
;;;2437   			else
;;;2438   			{
;;;2439   				/* Calculate the time at which the task should be woken if the
;;;2440   				event does not occur.  This may overflow but this doesn't
;;;2441   				matter. */
;;;2442   				xTimeToWake = xTickCount + xTicksToWait;
000054  4806              LDR      r0,|L23.112|
000056  6800              LDR      r0,[r0,#0]  ; xTickCount
000058  1947              ADDS     r7,r0,r5
;;;2443   				traceTASK_DELAY_UNTIL();
;;;2444   				prvAddCurrentTaskToDelayedList( xTimeToWake );
00005a  4638              MOV      r0,r7
00005c  f7fffffe          BL       prvAddCurrentTaskToDelayedList
                  |L23.96|
;;;2445   			}
;;;2446   		}
;;;2447   		#else
;;;2448   		{
;;;2449   			/* Calculate the time at which the task should be woken if the event
;;;2450   			does not occur.  This may overflow but this doesn't matter. */
;;;2451   			xTimeToWake = xTickCount + xTicksToWait;
;;;2452   			traceTASK_DELAY_UNTIL();
;;;2453   			prvAddCurrentTaskToDelayedList( xTimeToWake );
;;;2454   
;;;2455   			/* Remove compiler warnings when INCLUDE_vTaskSuspend() is not
;;;2456   			defined. */
;;;2457   			( void ) xWaitIndefinitely;
;;;2458   		}
;;;2459   		#endif
;;;2460   	}
000060  e8bd81f0          POP      {r4-r8,pc}
;;;2461   
                          ENDP

                  |L23.100|
                          DCD      pxCurrentTCB
                  |L23.104|
                          DCD      uxTopReadyPriority
                  |L23.108|
                          DCD      xSuspendedTaskList
                  |L23.112|
                          DCD      xTickCount

                          AREA ||i.vTaskPlaceOnUnorderedEventList||, CODE, READONLY, ALIGN=2

                  vTaskPlaceOnUnorderedEventList PROC
;;;2320   
;;;2321   void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2322   {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;2323   TickType_t xTimeToWake;
;;;2324   
;;;2325   	configASSERT( pxEventList );
00000a  b91d              CBNZ     r5,|L24.20|
00000c  f7fffffe          BL       ulPortSetInterruptMask
000010  bf00              NOP      
                  |L24.18|
000012  e7fe              B        |L24.18|
                  |L24.20|
;;;2326   
;;;2327   	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
;;;2328   	the event groups implementation. */
;;;2329   	configASSERT( uxSchedulerSuspended != 0 );
000014  481b              LDR      r0,|L24.132|
000016  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000018  b108              CBZ      r0,|L24.30|
00001a  2001              MOVS     r0,#1
00001c  e000              B        |L24.32|
                  |L24.30|
00001e  2000              MOVS     r0,#0
                  |L24.32|
000020  b918              CBNZ     r0,|L24.42|
000022  f7fffffe          BL       ulPortSetInterruptMask
000026  bf00              NOP      
                  |L24.40|
000028  e7fe              B        |L24.40|
                  |L24.42|
;;;2330   
;;;2331   	/* Store the item value in the event list item.  It is safe to access the
;;;2332   	event list item here as interrupts won't access the event list item of a
;;;2333   	task that is not in the Blocked state. */
;;;2334   	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
00002a  f0464000          ORR      r0,r6,#0x80000000
00002e  4916              LDR      r1,|L24.136|
000030  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000032  6188              STR      r0,[r1,#0x18]
;;;2335   
;;;2336   	/* Place the event list item of the TCB at the end of the appropriate event
;;;2337   	list.  It is safe to access the event list here because it is part of an
;;;2338   	event group implementation - and interrupts don't access event groups
;;;2339   	directly (instead they access them indirectly by pending function calls to
;;;2340   	the task level). */
;;;2341   	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
000034  4814              LDR      r0,|L24.136|
000036  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
000038  3118              ADDS     r1,r1,#0x18
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       vListInsertEnd
;;;2342   
;;;2343   	/* The task must be removed from the ready list before it is added to the
;;;2344   	blocked list.  Exclusive access can be assured to the ready list as the
;;;2345   	scheduler is locked. */
;;;2346   	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
000040  4811              LDR      r0,|L24.136|
000042  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000044  1d00              ADDS     r0,r0,#4
000046  f7fffffe          BL       uxListRemove
00004a  b950              CBNZ     r0,|L24.98|
;;;2347   	{
;;;2348   		/* The current task must be in a ready list, so there is no need to
;;;2349   		check, and the port reset macro can be called directly. */
;;;2350   		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
00004c  480e              LDR      r0,|L24.136|
00004e  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000050  f890102c          LDRB     r1,[r0,#0x2c]
000054  2001              MOVS     r0,#1
000056  4088              LSLS     r0,r0,r1
000058  490c              LDR      r1,|L24.140|
00005a  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
00005c  4381              BICS     r1,r1,r0
00005e  480b              LDR      r0,|L24.140|
000060  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L24.98|
;;;2351   	}
;;;2352   	else
;;;2353   	{
;;;2354   		mtCOVERAGE_TEST_MARKER();
;;;2355   	}
;;;2356   
;;;2357   	#if ( INCLUDE_vTaskSuspend == 1 )
;;;2358   	{
;;;2359   		if( xTicksToWait == portMAX_DELAY )
000062  1c60              ADDS     r0,r4,#1
000064  b930              CBNZ     r0,|L24.116|
;;;2360   		{
;;;2361   			/* Add the task to the suspended task list instead of a delayed task
;;;2362   			list to ensure it is not woken by a timing event.  It will block
;;;2363   			indefinitely. */
;;;2364   			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
000066  4808              LDR      r0,|L24.136|
000068  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
00006a  1d09              ADDS     r1,r1,#4
00006c  4808              LDR      r0,|L24.144|
00006e  f7fffffe          BL       vListInsertEnd
000072  e005              B        |L24.128|
                  |L24.116|
;;;2365   		}
;;;2366   		else
;;;2367   		{
;;;2368   			/* Calculate the time at which the task should be woken if the event
;;;2369   			does not occur.  This may overflow but this doesn't matter, the
;;;2370   			kernel will manage it correctly. */
;;;2371   			xTimeToWake = xTickCount + xTicksToWait;
000074  4807              LDR      r0,|L24.148|
000076  6800              LDR      r0,[r0,#0]  ; xTickCount
000078  1907              ADDS     r7,r0,r4
;;;2372   			prvAddCurrentTaskToDelayedList( xTimeToWake );
00007a  4638              MOV      r0,r7
00007c  f7fffffe          BL       prvAddCurrentTaskToDelayedList
                  |L24.128|
;;;2373   		}
;;;2374   	}
;;;2375   	#else /* INCLUDE_vTaskSuspend */
;;;2376   	{
;;;2377   			/* Calculate the time at which the task should be woken if the event does
;;;2378   			not occur.  This may overflow but this doesn't matter, the kernel
;;;2379   			will manage it correctly. */
;;;2380   			xTimeToWake = xTickCount + xTicksToWait;
;;;2381   			prvAddCurrentTaskToDelayedList( xTimeToWake );
;;;2382   	}
;;;2383   	#endif /* INCLUDE_vTaskSuspend */
;;;2384   }
000080  e8bd81f0          POP      {r4-r8,pc}
;;;2385   /*-----------------------------------------------------------*/
                          ENDP

                  |L24.132|
                          DCD      uxSchedulerSuspended
                  |L24.136|
                          DCD      pxCurrentTCB
                  |L24.140|
                          DCD      uxTopReadyPriority
                  |L24.144|
                          DCD      xSuspendedTaskList
                  |L24.148|
                          DCD      xTickCount

                          AREA ||i.vTaskPriorityInherit||, CODE, READONLY, ALIGN=2

                  vTaskPriorityInherit PROC
;;;3417   
;;;3418   	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
000000  b570              PUSH     {r4-r6,lr}
;;;3419   	{
000002  4605              MOV      r5,r0
;;;3420   	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
000004  462c              MOV      r4,r5
;;;3421   
;;;3422   		/* If the mutex was given back by an interrupt while the queue was
;;;3423   		locked then the mutex holder might now be NULL. */
;;;3424   		if( pxMutexHolder != NULL )
000006  2d00              CMP      r5,#0
000008  d04b              BEQ      |L25.162|
;;;3425   		{
;;;3426   			/* If the holder of the mutex has a priority below the priority of
;;;3427   			the task attempting to obtain the mutex then it will temporarily
;;;3428   			inherit the priority of the task attempting to obtain the mutex. */
;;;3429   			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
00000a  4926              LDR      r1,|L25.164|
00000c  6ae0              LDR      r0,[r4,#0x2c]
00000e  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000010  6ac9              LDR      r1,[r1,#0x2c]
000012  4288              CMP      r0,r1
000014  d245              BCS      |L25.162|
;;;3430   			{
;;;3431   				/* Adjust the mutex holder state to account for its new
;;;3432   				priority.  Only reset the event list item value if the value is
;;;3433   				not	being used for anything else. */
;;;3434   				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
000016  69a0              LDR      r0,[r4,#0x18]
000018  f0004000          AND      r0,r0,#0x80000000
00001c  b928              CBNZ     r0,|L25.42|
;;;3435   				{
;;;3436   					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
00001e  4821              LDR      r0,|L25.164|
000020  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000022  6ac0              LDR      r0,[r0,#0x2c]
000024  f1c00006          RSB      r0,r0,#6
000028  61a0              STR      r0,[r4,#0x18]
                  |L25.42|
;;;3437   				}
;;;3438   				else
;;;3439   				{
;;;3440   					mtCOVERAGE_TEST_MARKER();
;;;3441   				}
;;;3442   
;;;3443   				/* If the task being modified is in the ready state it will need
;;;3444   				to be moved into a new list. */
;;;3445   				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
00002a  6ae1              LDR      r1,[r4,#0x2c]
00002c  eb010181          ADD      r1,r1,r1,LSL #2
000030  4a1d              LDR      r2,|L25.168|
000032  eb020181          ADD      r1,r2,r1,LSL #2
000036  6960              LDR      r0,[r4,#0x14]
000038  4288              CMP      r0,r1
00003a  d101              BNE      |L25.64|
00003c  2001              MOVS     r0,#1
00003e  e000              B        |L25.66|
                  |L25.64|
000040  2000              MOVS     r0,#0
                  |L25.66|
000042  b350              CBZ      r0,|L25.154|
;;;3446   				{
;;;3447   					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
000044  1d20              ADDS     r0,r4,#4
000046  f7fffffe          BL       uxListRemove
00004a  b978              CBNZ     r0,|L25.108|
;;;3448   					{
;;;3449   						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
00004c  6ae0              LDR      r0,[r4,#0x2c]
00004e  eb000080          ADD      r0,r0,r0,LSL #2
000052  4915              LDR      r1,|L25.168|
000054  f8510020          LDR      r0,[r1,r0,LSL #2]
000058  b940              CBNZ     r0,|L25.108|
00005a  f894102c          LDRB     r1,[r4,#0x2c]
00005e  2001              MOVS     r0,#1
000060  4088              LSLS     r0,r0,r1
000062  4912              LDR      r1,|L25.172|
000064  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000066  4381              BICS     r1,r1,r0
000068  4810              LDR      r0,|L25.172|
00006a  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L25.108|
;;;3450   					}
;;;3451   					else
;;;3452   					{
;;;3453   						mtCOVERAGE_TEST_MARKER();
;;;3454   					}
;;;3455   
;;;3456   					/* Inherit the priority before being moved into the new list. */
;;;3457   					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
00006c  480d              LDR      r0,|L25.164|
00006e  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000070  6ac0              LDR      r0,[r0,#0x2c]
000072  62e0              STR      r0,[r4,#0x2c]
;;;3458   					prvAddTaskToReadyList( pxTCB );
000074  f894102c          LDRB     r1,[r4,#0x2c]
000078  2001              MOVS     r0,#1
00007a  4088              LSLS     r0,r0,r1
00007c  490b              LDR      r1,|L25.172|
00007e  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000080  4308              ORRS     r0,r0,r1
000082  490a              LDR      r1,|L25.172|
000084  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000086  6ae1              LDR      r1,[r4,#0x2c]
000088  eb010181          ADD      r1,r1,r1,LSL #2
00008c  4a06              LDR      r2,|L25.168|
00008e  eb020081          ADD      r0,r2,r1,LSL #2
000092  1d21              ADDS     r1,r4,#4
000094  f7fffffe          BL       vListInsertEnd
000098  e003              B        |L25.162|
                  |L25.154|
;;;3459   				}
;;;3460   				else
;;;3461   				{
;;;3462   					/* Just inherit the priority. */
;;;3463   					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
00009a  4802              LDR      r0,|L25.164|
00009c  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00009e  6ac0              LDR      r0,[r0,#0x2c]
0000a0  62e0              STR      r0,[r4,#0x2c]
                  |L25.162|
;;;3464   				}
;;;3465   
;;;3466   				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
;;;3467   			}
;;;3468   			else
;;;3469   			{
;;;3470   				mtCOVERAGE_TEST_MARKER();
;;;3471   			}
;;;3472   		}
;;;3473   		else
;;;3474   		{
;;;3475   			mtCOVERAGE_TEST_MARKER();
;;;3476   		}
;;;3477   	}
0000a2  bd70              POP      {r4-r6,pc}
;;;3478   
                          ENDP

                  |L25.164|
                          DCD      pxCurrentTCB
                  |L25.168|
                          DCD      pxReadyTasksLists
                  |L25.172|
                          DCD      uxTopReadyPriority

                          AREA ||i.vTaskPrioritySet||, CODE, READONLY, ALIGN=2

                  vTaskPrioritySet PROC
;;;1119   
;;;1120   	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1121   	{
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
;;;1122   	TCB_t *pxTCB;
;;;1123   	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
;;;1124   	BaseType_t xYieldRequired = pdFALSE;
000008  f04f0900          MOV      r9,#0
;;;1125   
;;;1126   		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
00000c  2d06              CMP      r5,#6
00000e  d201              BCS      |L26.20|
000010  2001              MOVS     r0,#1
000012  e000              B        |L26.22|
                  |L26.20|
000014  2000              MOVS     r0,#0
                  |L26.22|
000016  b918              CBNZ     r0,|L26.32|
000018  f7fffffe          BL       ulPortSetInterruptMask
00001c  bf00              NOP      
                  |L26.30|
00001e  e7fe              B        |L26.30|
                  |L26.32|
;;;1127   
;;;1128   		/* Ensure the new priority is valid. */
;;;1129   		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
000020  2d06              CMP      r5,#6
000022  d300              BCC      |L26.38|
;;;1130   		{
;;;1131   			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
000024  2505              MOVS     r5,#5
                  |L26.38|
;;;1132   		}
;;;1133   		else
;;;1134   		{
;;;1135   			mtCOVERAGE_TEST_MARKER();
;;;1136   		}
;;;1137   
;;;1138   		taskENTER_CRITICAL();
000026  f7fffffe          BL       vPortEnterCritical
;;;1139   		{
;;;1140   			/* If null is passed in here then it is the priority of the calling
;;;1141   			task that is being changed. */
;;;1142   			pxTCB = prvGetTCBFromHandle( xTask );
00002a  f1b80f00          CMP      r8,#0
00002e  d102              BNE      |L26.54|
000030  482e              LDR      r0,|L26.236|
000032  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000034  e000              B        |L26.56|
                  |L26.54|
000036  4640              MOV      r0,r8
                  |L26.56|
000038  4604              MOV      r4,r0
;;;1143   
;;;1144   			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
;;;1145   
;;;1146   			#if ( configUSE_MUTEXES == 1 )
;;;1147   			{
;;;1148   				uxCurrentBasePriority = pxTCB->uxBasePriority;
00003a  6c66              LDR      r6,[r4,#0x44]
;;;1149   			}
;;;1150   			#else
;;;1151   			{
;;;1152   				uxCurrentBasePriority = pxTCB->uxPriority;
;;;1153   			}
;;;1154   			#endif
;;;1155   
;;;1156   			if( uxCurrentBasePriority != uxNewPriority )
00003c  42ae              CMP      r6,r5
00003e  d050              BEQ      |L26.226|
;;;1157   			{
;;;1158   				/* The priority change may have readied a task of higher
;;;1159   				priority than the calling task. */
;;;1160   				if( uxNewPriority > uxCurrentBasePriority )
000040  42b5              CMP      r5,r6
000042  d90b              BLS      |L26.92|
;;;1161   				{
;;;1162   					if( pxTCB != pxCurrentTCB )
000044  4829              LDR      r0,|L26.236|
000046  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000048  4284              CMP      r4,r0
00004a  d00d              BEQ      |L26.104|
;;;1163   					{
;;;1164   						/* The priority of a task other than the currently
;;;1165   						running task is being raised.  Is the priority being
;;;1166   						raised above that of the running task? */
;;;1167   						if( uxNewPriority >= pxCurrentTCB->uxPriority )
00004c  4827              LDR      r0,|L26.236|
00004e  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000050  6ac0              LDR      r0,[r0,#0x2c]
000052  42a8              CMP      r0,r5
000054  d808              BHI      |L26.104|
;;;1168   						{
;;;1169   							xYieldRequired = pdTRUE;
000056  f04f0901          MOV      r9,#1
00005a  e005              B        |L26.104|
                  |L26.92|
;;;1170   						}
;;;1171   						else
;;;1172   						{
;;;1173   							mtCOVERAGE_TEST_MARKER();
;;;1174   						}
;;;1175   					}
;;;1176   					else
;;;1177   					{
;;;1178   						/* The priority of the running task is being raised,
;;;1179   						but the running task must already be the highest
;;;1180   						priority task able to run so no yield is required. */
;;;1181   					}
;;;1182   				}
;;;1183   				else if( pxTCB == pxCurrentTCB )
00005c  4823              LDR      r0,|L26.236|
00005e  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000060  4284              CMP      r4,r0
000062  d101              BNE      |L26.104|
;;;1184   				{
;;;1185   					/* Setting the priority of the running task down means
;;;1186   					there may now be another task of higher priority that
;;;1187   					is ready to execute. */
;;;1188   					xYieldRequired = pdTRUE;
000064  f04f0901          MOV      r9,#1
                  |L26.104|
;;;1189   				}
;;;1190   				else
;;;1191   				{
;;;1192   					/* Setting the priority of any other task down does not
;;;1193   					require a yield as the running task must be above the
;;;1194   					new priority of the task being modified. */
;;;1195   				}
;;;1196   
;;;1197   				/* Remember the ready list the task might be referenced from
;;;1198   				before its uxPriority member is changed so the
;;;1199   				taskRESET_READY_PRIORITY() macro can function correctly. */
;;;1200   				uxPriorityUsedOnEntry = pxTCB->uxPriority;
000068  6ae7              LDR      r7,[r4,#0x2c]
;;;1201   
;;;1202   				#if ( configUSE_MUTEXES == 1 )
;;;1203   				{
;;;1204   					/* Only change the priority being used if the task is not
;;;1205   					currently using an inherited priority. */
;;;1206   					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
00006a  6ae1              LDR      r1,[r4,#0x2c]
00006c  6c60              LDR      r0,[r4,#0x44]
00006e  4288              CMP      r0,r1
000070  d100              BNE      |L26.116|
;;;1207   					{
;;;1208   						pxTCB->uxPriority = uxNewPriority;
000072  62e5              STR      r5,[r4,#0x2c]
                  |L26.116|
;;;1209   					}
;;;1210   					else
;;;1211   					{
;;;1212   						mtCOVERAGE_TEST_MARKER();
;;;1213   					}
;;;1214   
;;;1215   					/* The base priority gets set whatever. */
;;;1216   					pxTCB->uxBasePriority = uxNewPriority;
000074  6465              STR      r5,[r4,#0x44]
;;;1217   				}
;;;1218   				#else
;;;1219   				{
;;;1220   					pxTCB->uxPriority = uxNewPriority;
;;;1221   				}
;;;1222   				#endif
;;;1223   
;;;1224   				/* Only reset the event list item value if the value is not
;;;1225   				being used for anything else. */
;;;1226   				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
000076  69a0              LDR      r0,[r4,#0x18]
000078  f0004000          AND      r0,r0,#0x80000000
00007c  b910              CBNZ     r0,|L26.132|
;;;1227   				{
;;;1228   					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
00007e  f1c50006          RSB      r0,r5,#6
000082  61a0              STR      r0,[r4,#0x18]
                  |L26.132|
;;;1229   				}
;;;1230   				else
;;;1231   				{
;;;1232   					mtCOVERAGE_TEST_MARKER();
;;;1233   				}
;;;1234   
;;;1235   				/* If the task is in the blocked or suspended list we need do
;;;1236   				nothing more than change it's priority variable. However, if
;;;1237   				the task is in a ready list it needs to be removed and placed
;;;1238   				in the list appropriate to its new priority. */
;;;1239   				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
000084  eb070187          ADD      r1,r7,r7,LSL #2
000088  4a19              LDR      r2,|L26.240|
00008a  eb020181          ADD      r1,r2,r1,LSL #2
00008e  6960              LDR      r0,[r4,#0x14]
000090  4288              CMP      r0,r1
000092  d101              BNE      |L26.152|
000094  2001              MOVS     r0,#1
000096  e000              B        |L26.154|
                  |L26.152|
000098  2000              MOVS     r0,#0
                  |L26.154|
00009a  b1e0              CBZ      r0,|L26.214|
;;;1240   				{
;;;1241   					/* The task is currently in its ready list - remove before adding
;;;1242   					it to it's new ready list.  As we are in a critical section we
;;;1243   					can do this even if the scheduler is suspended. */
;;;1244   					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
00009c  1d20              ADDS     r0,r4,#4
00009e  f7fffffe          BL       uxListRemove
0000a2  b930              CBNZ     r0,|L26.178|
;;;1245   					{
;;;1246   						/* It is known that the task is in its ready list so
;;;1247   						there is no need to check again and the port level
;;;1248   						reset macro can be called directly. */
;;;1249   						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
0000a4  2001              MOVS     r0,#1
0000a6  40b8              LSLS     r0,r0,r7
0000a8  4912              LDR      r1,|L26.244|
0000aa  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
0000ac  4381              BICS     r1,r1,r0
0000ae  4811              LDR      r0,|L26.244|
0000b0  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L26.178|
;;;1250   					}
;;;1251   					else
;;;1252   					{
;;;1253   						mtCOVERAGE_TEST_MARKER();
;;;1254   					}
;;;1255   					prvAddTaskToReadyList( pxTCB );
0000b2  f894102c          LDRB     r1,[r4,#0x2c]
0000b6  2001              MOVS     r0,#1
0000b8  4088              LSLS     r0,r0,r1
0000ba  490e              LDR      r1,|L26.244|
0000bc  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
0000be  4308              ORRS     r0,r0,r1
0000c0  490c              LDR      r1,|L26.244|
0000c2  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
0000c4  6ae1              LDR      r1,[r4,#0x2c]
0000c6  eb010181          ADD      r1,r1,r1,LSL #2
0000ca  4a09              LDR      r2,|L26.240|
0000cc  eb020081          ADD      r0,r2,r1,LSL #2
0000d0  1d21              ADDS     r1,r4,#4
0000d2  f7fffffe          BL       vListInsertEnd
                  |L26.214|
;;;1256   				}
;;;1257   				else
;;;1258   				{
;;;1259   					mtCOVERAGE_TEST_MARKER();
;;;1260   				}
;;;1261   
;;;1262   				if( xYieldRequired == pdTRUE )
0000d6  f1b90f01          CMP      r9,#1
0000da  d101              BNE      |L26.224|
;;;1263   				{
;;;1264   					taskYIELD_IF_USING_PREEMPTION();
0000dc  f7fffffe          BL       vPortYield
                  |L26.224|
;;;1265   				}
;;;1266   				else
;;;1267   				{
;;;1268   					mtCOVERAGE_TEST_MARKER();
;;;1269   				}
;;;1270   
;;;1271   				/* Remove compiler warning about unused variables when the port
;;;1272   				optimised task selection is not being used. */
;;;1273   				( void ) uxPriorityUsedOnEntry;
0000e0  bf00              NOP      
                  |L26.226|
;;;1274   			}
;;;1275   		}
;;;1276   		taskEXIT_CRITICAL();
0000e2  f7fffffe          BL       vPortExitCritical
;;;1277   	}
0000e6  e8bd87f0          POP      {r4-r10,pc}
;;;1278   
                          ENDP

0000ea  0000              DCW      0x0000
                  |L26.236|
                          DCD      pxCurrentTCB
                  |L26.240|
                          DCD      pxReadyTasksLists
                  |L26.244|
                          DCD      uxTopReadyPriority

                          AREA ||i.vTaskResume||, CODE, READONLY, ALIGN=2

                  vTaskResume PROC
;;;1418   
;;;1419   	void vTaskResume( TaskHandle_t xTaskToResume )
000000  b570              PUSH     {r4-r6,lr}
;;;1420   	{
000002  4605              MOV      r5,r0
;;;1421   	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
000004  462c              MOV      r4,r5
;;;1422   
;;;1423   		/* It does not make sense to resume the calling task. */
;;;1424   		configASSERT( xTaskToResume );
000006  b91d              CBNZ     r5,|L27.16|
000008  f7fffffe          BL       ulPortSetInterruptMask
00000c  bf00              NOP      
                  |L27.14|
00000e  e7fe              B        |L27.14|
                  |L27.16|
;;;1425   
;;;1426   		/* The parameter cannot be NULL as it is impossible to resume the
;;;1427   		currently executing task. */
;;;1428   		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
000010  b34c              CBZ      r4,|L27.102|
000012  4815              LDR      r0,|L27.104|
000014  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000016  4284              CMP      r4,r0
000018  d025              BEQ      |L27.102|
;;;1429   		{
;;;1430   			taskENTER_CRITICAL();
00001a  f7fffffe          BL       vPortEnterCritical
;;;1431   			{
;;;1432   				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       prvTaskIsTaskSuspended
000024  2801              CMP      r0,#1
000026  d11c              BNE      |L27.98|
;;;1433   				{
;;;1434   					traceTASK_RESUME( pxTCB );
;;;1435   
;;;1436   					/* As we are in a critical section we can access the ready
;;;1437   					lists even if the scheduler is suspended. */
;;;1438   					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
000028  1d20              ADDS     r0,r4,#4
00002a  f7fffffe          BL       uxListRemove
;;;1439   					prvAddTaskToReadyList( pxTCB );
00002e  f894102c          LDRB     r1,[r4,#0x2c]
000032  2001              MOVS     r0,#1
000034  4088              LSLS     r0,r0,r1
000036  490d              LDR      r1,|L27.108|
000038  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
00003a  4308              ORRS     r0,r0,r1
00003c  490b              LDR      r1,|L27.108|
00003e  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000040  6ae1              LDR      r1,[r4,#0x2c]
000042  eb010181          ADD      r1,r1,r1,LSL #2
000046  4a0a              LDR      r2,|L27.112|
000048  eb020081          ADD      r0,r2,r1,LSL #2
00004c  1d21              ADDS     r1,r4,#4
00004e  f7fffffe          BL       vListInsertEnd
;;;1440   
;;;1441   					/* We may have just resumed a higher priority task. */
;;;1442   					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
000052  4905              LDR      r1,|L27.104|
000054  6ae0              LDR      r0,[r4,#0x2c]
000056  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000058  6ac9              LDR      r1,[r1,#0x2c]
00005a  4288              CMP      r0,r1
00005c  d301              BCC      |L27.98|
;;;1443   					{
;;;1444   						/* This yield may not cause the task just resumed to run,
;;;1445   						but will leave the lists in the correct state for the
;;;1446   						next yield. */
;;;1447   						taskYIELD_IF_USING_PREEMPTION();
00005e  f7fffffe          BL       vPortYield
                  |L27.98|
;;;1448   					}
;;;1449   					else
;;;1450   					{
;;;1451   						mtCOVERAGE_TEST_MARKER();
;;;1452   					}
;;;1453   				}
;;;1454   				else
;;;1455   				{
;;;1456   					mtCOVERAGE_TEST_MARKER();
;;;1457   				}
;;;1458   			}
;;;1459   			taskEXIT_CRITICAL();
000062  f7fffffe          BL       vPortExitCritical
                  |L27.102|
;;;1460   		}
;;;1461   		else
;;;1462   		{
;;;1463   			mtCOVERAGE_TEST_MARKER();
;;;1464   		}
;;;1465   	}
000066  bd70              POP      {r4-r6,pc}
;;;1466   
                          ENDP

                  |L27.104|
                          DCD      pxCurrentTCB
                  |L27.108|
                          DCD      uxTopReadyPriority
                  |L27.112|
                          DCD      pxReadyTasksLists

                          AREA ||i.vTaskSetTimeOutState||, CODE, READONLY, ALIGN=2

                  vTaskSetTimeOutState PROC
;;;2577   
;;;2578   void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
000000  b510              PUSH     {r4,lr}
;;;2579   {
000002  4604              MOV      r4,r0
;;;2580   	configASSERT( pxTimeOut );
000004  b91c              CBNZ     r4,|L28.14|
000006  f7fffffe          BL       ulPortSetInterruptMask
00000a  bf00              NOP      
                  |L28.12|
00000c  e7fe              B        |L28.12|
                  |L28.14|
;;;2581   	pxTimeOut->xOverflowCount = xNumOfOverflows;
00000e  4803              LDR      r0,|L28.28|
000010  6800              LDR      r0,[r0,#0]  ; xNumOfOverflows
000012  6020              STR      r0,[r4,#0]
;;;2582   	pxTimeOut->xTimeOnEntering = xTickCount;
000014  4802              LDR      r0,|L28.32|
000016  6800              LDR      r0,[r0,#0]  ; xTickCount
000018  6060              STR      r0,[r4,#4]
;;;2583   }
00001a  bd10              POP      {r4,pc}
;;;2584   /*-----------------------------------------------------------*/
                          ENDP

                  |L28.28|
                          DCD      xNumOfOverflows
                  |L28.32|
                          DCD      xTickCount

                          AREA ||i.vTaskStartScheduler||, CODE, READONLY, ALIGN=2

                  vTaskStartScheduler PROC
;;;1542   
;;;1543   void vTaskStartScheduler( void )
000000  b51f              PUSH     {r0-r4,lr}
;;;1544   {
;;;1545   BaseType_t xReturn;
;;;1546   
;;;1547   	/* Add the idle task at the lowest priority. */
;;;1548   	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
;;;1549   	{
;;;1550   		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
;;;1551   		be returned by the xTaskGetIdleTaskHandle() function. */
;;;1552   		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
;;;1553   	}
;;;1554   	#else
;;;1555   	{
;;;1556   		/* Create the idle task without storing its handle. */
;;;1557   		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
000006  9001              STR      r0,[sp,#4]
000008  9002              STR      r0,[sp,#8]
00000a  4603              MOV      r3,r0
00000c  2280              MOVS     r2,#0x80
00000e  a110              ADR      r1,|L29.80|
000010  9003              STR      r0,[sp,#0xc]
000012  4811              LDR      r0,|L29.88|
000014  f7fffffe          BL       xTaskGenericCreate
000018  4604              MOV      r4,r0
;;;1558   	}
;;;1559   	#endif /* INCLUDE_xTaskGetIdleTaskHandle */
;;;1560   
;;;1561   	#if ( configUSE_TIMERS == 1 )
;;;1562   	{
;;;1563   		if( xReturn == pdPASS )
00001a  2c01              CMP      r4,#1
00001c  d102              BNE      |L29.36|
;;;1564   		{
;;;1565   			xReturn = xTimerCreateTimerTask();
00001e  f7fffffe          BL       xTimerCreateTimerTask
000022  4604              MOV      r4,r0
                  |L29.36|
;;;1566   		}
;;;1567   		else
;;;1568   		{
;;;1569   			mtCOVERAGE_TEST_MARKER();
;;;1570   		}
;;;1571   	}
;;;1572   	#endif /* configUSE_TIMERS */
;;;1573   
;;;1574   	if( xReturn == pdPASS )
000024  2c01              CMP      r4,#1
000026  d10d              BNE      |L29.68|
;;;1575   	{
;;;1576   		/* Interrupts are turned off here, to ensure a tick does not occur
;;;1577   		before or during the call to xPortStartScheduler().  The stacks of
;;;1578   		the created tasks contain a status word with interrupts switched on
;;;1579   		so interrupts will automatically get re-enabled when the first task
;;;1580   		starts to run. */
;;;1581   		portDISABLE_INTERRUPTS();
000028  f7fffffe          BL       ulPortSetInterruptMask
;;;1582   
;;;1583   		#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;1584   		{
;;;1585   			/* Switch Newlib's _impure_ptr variable to point to the _reent
;;;1586   			structure specific to the task that will run first. */
;;;1587   			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
;;;1588   		}
;;;1589   		#endif /* configUSE_NEWLIB_REENTRANT */
;;;1590   
;;;1591   		xNextTaskUnblockTime = portMAX_DELAY;
00002c  1ea0              SUBS     r0,r4,#2
00002e  490b              LDR      r1,|L29.92|
000030  6008              STR      r0,[r1,#0]  ; xNextTaskUnblockTime
;;;1592   		xSchedulerRunning = pdTRUE;
000032  2001              MOVS     r0,#1
000034  490a              LDR      r1,|L29.96|
000036  6008              STR      r0,[r1,#0]  ; xSchedulerRunning
;;;1593   		xTickCount = ( TickType_t ) 0U;
000038  2000              MOVS     r0,#0
00003a  490a              LDR      r1,|L29.100|
00003c  6008              STR      r0,[r1,#0]  ; xTickCount
;;;1594   
;;;1595   		/* If configGENERATE_RUN_TIME_STATS is defined then the following
;;;1596   		macro must be defined to configure the timer/counter used to generate
;;;1597   		the run time counter time base. */
;;;1598   		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
;;;1599   
;;;1600   		/* Setting up the timer tick is hardware specific and thus in the
;;;1601   		portable interface. */
;;;1602   		if( xPortStartScheduler() != pdFALSE )
00003e  f7fffffe          BL       xPortStartScheduler
000042  e004              B        |L29.78|
                  |L29.68|
;;;1603   		{
;;;1604   			/* Should not reach here as if the scheduler is running the
;;;1605   			function will not return. */
;;;1606   		}
;;;1607   		else
;;;1608   		{
;;;1609   			/* Should only reach here if a task calls xTaskEndScheduler(). */
;;;1610   		}
;;;1611   	}
;;;1612   	else
;;;1613   	{
;;;1614   		/* This line will only be reached if the kernel could not be started,
;;;1615   		because there was not enough FreeRTOS heap to create the idle task
;;;1616   		or the timer task. */
;;;1617   		configASSERT( xReturn );
000044  b91c              CBNZ     r4,|L29.78|
000046  f7fffffe          BL       ulPortSetInterruptMask
00004a  bf00              NOP      
                  |L29.76|
00004c  e7fe              B        |L29.76|
                  |L29.78|
;;;1618   	}
;;;1619   }
00004e  bd1f              POP      {r0-r4,pc}
;;;1620   /*-----------------------------------------------------------*/
                          ENDP

                  |L29.80|
000050  49444c45          DCB      "IDLE",0
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
                  |L29.88|
                          DCD      prvIdleTask
                  |L29.92|
                          DCD      xNextTaskUnblockTime
                  |L29.96|
                          DCD      xSchedulerRunning
                  |L29.100|
                          DCD      xTickCount

                          AREA ||i.vTaskSuspend||, CODE, READONLY, ALIGN=2

                  vTaskSuspend PROC
;;;1283   
;;;1284   	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
000000  b570              PUSH     {r4-r6,lr}
;;;1285   	{
000002  4605              MOV      r5,r0
;;;1286   	TCB_t *pxTCB;
;;;1287   
;;;1288   		taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;1289   		{
;;;1290   			/* If null is passed in here then it is the running task that is
;;;1291   			being suspended. */
;;;1292   			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
000008  b915              CBNZ     r5,|L30.16|
00000a  4828              LDR      r0,|L30.172|
00000c  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00000e  e000              B        |L30.18|
                  |L30.16|
000010  4628              MOV      r0,r5
                  |L30.18|
000012  4604              MOV      r4,r0
;;;1293   
;;;1294   			traceTASK_SUSPEND( pxTCB );
;;;1295   
;;;1296   			/* Remove task from the ready/delayed list and place in the
;;;1297   			suspended list. */
;;;1298   			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
000014  1d20              ADDS     r0,r4,#4
000016  f7fffffe          BL       uxListRemove
00001a  b978              CBNZ     r0,|L30.60|
;;;1299   			{
;;;1300   				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
00001c  6ae0              LDR      r0,[r4,#0x2c]
00001e  eb000080          ADD      r0,r0,r0,LSL #2
000022  4923              LDR      r1,|L30.176|
000024  f8510020          LDR      r0,[r1,r0,LSL #2]
000028  b940              CBNZ     r0,|L30.60|
00002a  f894102c          LDRB     r1,[r4,#0x2c]
00002e  2001              MOVS     r0,#1
000030  4088              LSLS     r0,r0,r1
000032  4920              LDR      r1,|L30.180|
000034  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000036  4381              BICS     r1,r1,r0
000038  481e              LDR      r0,|L30.180|
00003a  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L30.60|
;;;1301   			}
;;;1302   			else
;;;1303   			{
;;;1304   				mtCOVERAGE_TEST_MARKER();
;;;1305   			}
;;;1306   
;;;1307   			/* Is the task waiting on an event also? */
;;;1308   			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
00003c  6aa0              LDR      r0,[r4,#0x28]
00003e  b118              CBZ      r0,|L30.72|
;;;1309   			{
;;;1310   				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
000040  f1040018          ADD      r0,r4,#0x18
000044  f7fffffe          BL       uxListRemove
                  |L30.72|
;;;1311   			}
;;;1312   			else
;;;1313   			{
;;;1314   				mtCOVERAGE_TEST_MARKER();
;;;1315   			}
;;;1316   
;;;1317   			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
000048  1d21              ADDS     r1,r4,#4
00004a  481b              LDR      r0,|L30.184|
00004c  f7fffffe          BL       vListInsertEnd
;;;1318   		}
;;;1319   		taskEXIT_CRITICAL();
000050  f7fffffe          BL       vPortExitCritical
;;;1320   
;;;1321   		if( pxTCB == pxCurrentTCB )
000054  4815              LDR      r0,|L30.172|
000056  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000058  4284              CMP      r4,r0
00005a  d11d              BNE      |L30.152|
;;;1322   		{
;;;1323   			if( xSchedulerRunning != pdFALSE )
00005c  4817              LDR      r0,|L30.188|
00005e  6800              LDR      r0,[r0,#0]  ; xSchedulerRunning
000060  b168              CBZ      r0,|L30.126|
;;;1324   			{
;;;1325   				/* The current task has just been suspended. */
;;;1326   				configASSERT( uxSchedulerSuspended == 0 );
000062  4817              LDR      r0,|L30.192|
000064  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000066  b908              CBNZ     r0,|L30.108|
000068  2001              MOVS     r0,#1
00006a  e000              B        |L30.110|
                  |L30.108|
00006c  2000              MOVS     r0,#0
                  |L30.110|
00006e  b918              CBNZ     r0,|L30.120|
000070  f7fffffe          BL       ulPortSetInterruptMask
000074  bf00              NOP      
                  |L30.118|
000076  e7fe              B        |L30.118|
                  |L30.120|
;;;1327   				portYIELD_WITHIN_API();
000078  f7fffffe          BL       vPortYield
00007c  e015              B        |L30.170|
                  |L30.126|
;;;1328   			}
;;;1329   			else
;;;1330   			{
;;;1331   				/* The scheduler is not running, but the task that was pointed
;;;1332   				to by pxCurrentTCB has just been suspended and pxCurrentTCB
;;;1333   				must be adjusted to point to a different task. */
;;;1334   				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
00007e  480e              LDR      r0,|L30.184|
000080  6800              LDR      r0,[r0,#0]  ; xSuspendedTaskList
000082  4910              LDR      r1,|L30.196|
000084  6809              LDR      r1,[r1,#0]  ; uxCurrentNumberOfTasks
000086  4288              CMP      r0,r1
000088  d103              BNE      |L30.146|
;;;1335   				{
;;;1336   					/* No other tasks are ready, so set pxCurrentTCB back to
;;;1337   					NULL so when the next task is created pxCurrentTCB will
;;;1338   					be set to point to it no matter what its relative priority
;;;1339   					is. */
;;;1340   					pxCurrentTCB = NULL;
00008a  2000              MOVS     r0,#0
00008c  4907              LDR      r1,|L30.172|
00008e  6008              STR      r0,[r1,#0]  ; pxCurrentTCB
000090  e00b              B        |L30.170|
                  |L30.146|
;;;1341   				}
;;;1342   				else
;;;1343   				{
;;;1344   					vTaskSwitchContext();
000092  f7fffffe          BL       vTaskSwitchContext
000096  e008              B        |L30.170|
                  |L30.152|
;;;1345   				}
;;;1346   			}
;;;1347   		}
;;;1348   		else
;;;1349   		{
;;;1350   			if( xSchedulerRunning != pdFALSE )
000098  4808              LDR      r0,|L30.188|
00009a  6800              LDR      r0,[r0,#0]  ; xSchedulerRunning
00009c  b128              CBZ      r0,|L30.170|
;;;1351   			{
;;;1352   				/* A task other than the currently running task was suspended,
;;;1353   				reset the next expected unblock time in case it referred to the
;;;1354   				task that is now in the Suspended state. */
;;;1355   				taskENTER_CRITICAL();
00009e  f7fffffe          BL       vPortEnterCritical
;;;1356   				{
;;;1357   					prvResetNextTaskUnblockTime();
0000a2  f7fffffe          BL       prvResetNextTaskUnblockTime
;;;1358   				}
;;;1359   				taskEXIT_CRITICAL();
0000a6  f7fffffe          BL       vPortExitCritical
                  |L30.170|
;;;1360   			}
;;;1361   			else
;;;1362   			{
;;;1363   				mtCOVERAGE_TEST_MARKER();
;;;1364   			}
;;;1365   		}
;;;1366   	}
0000aa  bd70              POP      {r4-r6,pc}
;;;1367   
                          ENDP

                  |L30.172|
                          DCD      pxCurrentTCB
                  |L30.176|
                          DCD      pxReadyTasksLists
                  |L30.180|
                          DCD      uxTopReadyPriority
                  |L30.184|
                          DCD      xSuspendedTaskList
                  |L30.188|
                          DCD      xSchedulerRunning
                  |L30.192|
                          DCD      uxSchedulerSuspended
                  |L30.196|
                          DCD      uxCurrentNumberOfTasks

                          AREA ||i.vTaskSuspendAll||, CODE, READONLY, ALIGN=2

                  vTaskSuspendAll PROC
;;;1632   
;;;1633   void vTaskSuspendAll( void )
000000  4802              LDR      r0,|L31.12|
;;;1634   {
;;;1635   	/* A critical section is not required as the variable is of type
;;;1636   	BaseType_t.  Please read Richard Barry's reply in the following link to a
;;;1637   	post in the FreeRTOS support forum before reporting this as a bug! -
;;;1638   	http://goo.gl/wu4acr */
;;;1639   	++uxSchedulerSuspended;
000002  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000004  1c40              ADDS     r0,r0,#1
000006  4901              LDR      r1,|L31.12|
000008  6008              STR      r0,[r1,#0]  ; uxSchedulerSuspended
;;;1640   }
00000a  4770              BX       lr
;;;1641   /*----------------------------------------------------------*/
                          ENDP

                  |L31.12|
                          DCD      uxSchedulerSuspended

                          AREA ||i.vTaskSwitchContext||, CODE, READONLY, ALIGN=2

                  vTaskSwitchContext PROC
;;;2202   
;;;2203   void vTaskSwitchContext( void )
000000  b510              PUSH     {r4,lr}
;;;2204   {
;;;2205   	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
000002  481a              LDR      r0,|L32.108|
000004  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000006  b118              CBZ      r0,|L32.16|
;;;2206   	{
;;;2207   		/* The scheduler is currently suspended - do not allow a context
;;;2208   		switch. */
;;;2209   		xYieldPending = pdTRUE;
000008  2001              MOVS     r0,#1
00000a  4919              LDR      r1,|L32.112|
00000c  6008              STR      r0,[r1,#0]  ; xYieldPending
00000e  e02b              B        |L32.104|
                  |L32.16|
;;;2210   	}
;;;2211   	else
;;;2212   	{
;;;2213   		xYieldPending = pdFALSE;
000010  2000              MOVS     r0,#0
000012  4917              LDR      r1,|L32.112|
000014  6008              STR      r0,[r1,#0]  ; xYieldPending
;;;2214   		traceTASK_SWITCHED_OUT();
;;;2215   
;;;2216   		#if ( configGENERATE_RUN_TIME_STATS == 1 )
;;;2217   		{
;;;2218   				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
;;;2219   					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
;;;2220   				#else
;;;2221   					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
;;;2222   				#endif
;;;2223   
;;;2224   				/* Add the amount of time the task has been running to the
;;;2225   				accumulated	time so far.  The time the task started running was
;;;2226   				stored in ulTaskSwitchedInTime.  Note that there is no overflow
;;;2227   				protection here	so count values are only valid until the timer
;;;2228   				overflows.  The guard against negative values is to protect
;;;2229   				against suspect run time stat counter implementations - which
;;;2230   				are provided by the application, not the kernel. */
;;;2231   				if( ulTotalRunTime > ulTaskSwitchedInTime )
;;;2232   				{
;;;2233   					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
;;;2234   				}
;;;2235   				else
;;;2236   				{
;;;2237   					mtCOVERAGE_TEST_MARKER();
;;;2238   				}
;;;2239   				ulTaskSwitchedInTime = ulTotalRunTime;
;;;2240   		}
;;;2241   		#endif /* configGENERATE_RUN_TIME_STATS */
;;;2242   
;;;2243   		/* Check for stack overflow, if configured. */
;;;2244   		taskCHECK_FOR_STACK_OVERFLOW();
;;;2245   
;;;2246   		/* Select a new task to run using either the generic C or port
;;;2247   		optimised asm code. */
;;;2248   		taskSELECT_HIGHEST_PRIORITY_TASK();
000016  4817              LDR      r0,|L32.116|
000018  6800              LDR      r0,[r0,#0]  ; uxTopReadyPriority
00001a  fab0f080          CLZ      r0,r0
00001e  f1c0041f          RSB      r4,r0,#0x1f
000022  eb040084          ADD      r0,r4,r4,LSL #2
000026  4914              LDR      r1,|L32.120|
000028  f8510020          LDR      r0,[r1,r0,LSL #2]
00002c  b108              CBZ      r0,|L32.50|
00002e  2001              MOVS     r0,#1
000030  e000              B        |L32.52|
                  |L32.50|
000032  2000              MOVS     r0,#0
                  |L32.52|
000034  b918              CBNZ     r0,|L32.62|
000036  f7fffffe          BL       ulPortSetInterruptMask
00003a  bf00              NOP      
                  |L32.60|
00003c  e7fe              B        |L32.60|
                  |L32.62|
00003e  eb040184          ADD      r1,r4,r4,LSL #2
000042  4a0d              LDR      r2,|L32.120|
000044  eb020081          ADD      r0,r2,r1,LSL #2
000048  6841              LDR      r1,[r0,#4]
00004a  6849              LDR      r1,[r1,#4]
00004c  6041              STR      r1,[r0,#4]
00004e  f1000108          ADD      r1,r0,#8
000052  6842              LDR      r2,[r0,#4]
000054  428a              CMP      r2,r1
000056  d102              BNE      |L32.94|
000058  6841              LDR      r1,[r0,#4]
00005a  6849              LDR      r1,[r1,#4]
00005c  6041              STR      r1,[r0,#4]
                  |L32.94|
00005e  6841              LDR      r1,[r0,#4]
000060  68c9              LDR      r1,[r1,#0xc]
000062  4a06              LDR      r2,|L32.124|
000064  6011              STR      r1,[r2,#0]  ; pxCurrentTCB
000066  bf00              NOP      
                  |L32.104|
;;;2249   		traceTASK_SWITCHED_IN();
;;;2250   
;;;2251   		#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;2252   		{
;;;2253   			/* Switch Newlib's _impure_ptr variable to point to the _reent
;;;2254   			structure specific to this task. */
;;;2255   			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
;;;2256   		}
;;;2257   		#endif /* configUSE_NEWLIB_REENTRANT */
;;;2258   	}
;;;2259   }
000068  bd10              POP      {r4,pc}
;;;2260   /*-----------------------------------------------------------*/
                          ENDP

00006a  0000              DCW      0x0000
                  |L32.108|
                          DCD      uxSchedulerSuspended
                  |L32.112|
                          DCD      xYieldPending
                  |L32.116|
                          DCD      uxTopReadyPriority
                  |L32.120|
                          DCD      pxReadyTasksLists
                  |L32.124|
                          DCD      pxCurrentTCB

                          AREA ||i.xTaskCheckForTimeOut||, CODE, READONLY, ALIGN=2

                  xTaskCheckForTimeOut PROC
;;;2585   
;;;2586   BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2587   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;2588   BaseType_t xReturn;
;;;2589   
;;;2590   	configASSERT( pxTimeOut );
000008  b91c              CBNZ     r4,|L33.18|
00000a  f7fffffe          BL       ulPortSetInterruptMask
00000e  bf00              NOP      
                  |L33.16|
000010  e7fe              B        |L33.16|
                  |L33.18|
;;;2591   	configASSERT( pxTicksToWait );
000012  b91d              CBNZ     r5,|L33.28|
000014  f7fffffe          BL       ulPortSetInterruptMask
000018  bf00              NOP      
                  |L33.26|
00001a  e7fe              B        |L33.26|
                  |L33.28|
;;;2592   
;;;2593   	taskENTER_CRITICAL();
00001c  f7fffffe          BL       vPortEnterCritical
;;;2594   	{
;;;2595   		/* Minor optimisation.  The tick count cannot change in this block. */
;;;2596   		const TickType_t xConstTickCount = xTickCount;
000020  4812              LDR      r0,|L33.108|
000022  6807              LDR      r7,[r0,#0]  ; xTickCount
;;;2597   
;;;2598   		#if ( INCLUDE_vTaskSuspend == 1 )
;;;2599   			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
;;;2600   			the maximum block time then the task should block indefinitely, and
;;;2601   			therefore never time out. */
;;;2602   			if( *pxTicksToWait == portMAX_DELAY )
000024  6828              LDR      r0,[r5,#0]
000026  1c40              ADDS     r0,r0,#1
000028  b908              CBNZ     r0,|L33.46|
;;;2603   			{
;;;2604   				xReturn = pdFALSE;
00002a  2600              MOVS     r6,#0
00002c  e019              B        |L33.98|
                  |L33.46|
;;;2605   			}
;;;2606   			else /* We are not blocking indefinitely, perform the checks below. */
;;;2607   		#endif
;;;2608   
;;;2609   		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
00002e  4910              LDR      r1,|L33.112|
000030  6820              LDR      r0,[r4,#0]
000032  6809              LDR      r1,[r1,#0]  ; xNumOfOverflows
000034  4288              CMP      r0,r1
000036  d004              BEQ      |L33.66|
000038  6860              LDR      r0,[r4,#4]
00003a  42b8              CMP      r0,r7
00003c  d801              BHI      |L33.66|
;;;2610   		{
;;;2611   			/* The tick count is greater than the time at which vTaskSetTimeout()
;;;2612   			was called, but has also overflowed since vTaskSetTimeOut() was called.
;;;2613   			It must have wrapped all the way around and gone past us again. This
;;;2614   			passed since vTaskSetTimeout() was called. */
;;;2615   			xReturn = pdTRUE;
00003e  2601              MOVS     r6,#1
000040  e00f              B        |L33.98|
                  |L33.66|
;;;2616   		}
;;;2617   		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
000042  6860              LDR      r0,[r4,#4]
000044  1a38              SUBS     r0,r7,r0
000046  6829              LDR      r1,[r5,#0]
000048  4288              CMP      r0,r1
00004a  d209              BCS      |L33.96|
;;;2618   		{
;;;2619   			/* Not a genuine timeout. Adjust parameters for time remaining. */
;;;2620   			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
00004c  6828              LDR      r0,[r5,#0]
00004e  6861              LDR      r1,[r4,#4]
000050  1a79              SUBS     r1,r7,r1
000052  1a40              SUBS     r0,r0,r1
000054  6028              STR      r0,[r5,#0]
;;;2621   			vTaskSetTimeOutState( pxTimeOut );
000056  4620              MOV      r0,r4
000058  f7fffffe          BL       vTaskSetTimeOutState
;;;2622   			xReturn = pdFALSE;
00005c  2600              MOVS     r6,#0
00005e  e000              B        |L33.98|
                  |L33.96|
;;;2623   		}
;;;2624   		else
;;;2625   		{
;;;2626   			xReturn = pdTRUE;
000060  2601              MOVS     r6,#1
                  |L33.98|
;;;2627   		}
;;;2628   	}
;;;2629   	taskEXIT_CRITICAL();
000062  f7fffffe          BL       vPortExitCritical
;;;2630   
;;;2631   	return xReturn;
000066  4630              MOV      r0,r6
;;;2632   }
000068  e8bd81f0          POP      {r4-r8,pc}
;;;2633   /*-----------------------------------------------------------*/
                          ENDP

                  |L33.108|
                          DCD      xTickCount
                  |L33.112|
                          DCD      xNumOfOverflows

                          AREA ||i.xTaskGenericCreate||, CODE, READONLY, ALIGN=2

                  xTaskGenericCreate PROC
;;;550    
;;;551    BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;552    {
000004  b081              SUB      sp,sp,#4
000006  4680              MOV      r8,r0
000008  4616              MOV      r6,r2
00000a  469a              MOV      r10,r3
00000c  e9dd5b0e          LDRD     r5,r11,[sp,#0x38]
;;;553    BaseType_t xReturn;
;;;554    TCB_t * pxNewTCB;
;;;555    StackType_t *pxTopOfStack;
;;;556    
;;;557    	configASSERT( pxTaskCode );
000010  f1b80f00          CMP      r8,#0
000014  d103              BNE      |L34.30|
000016  f7fffffe          BL       ulPortSetInterruptMask
00001a  bf00              NOP      
                  |L34.28|
00001c  e7fe              B        |L34.28|
                  |L34.30|
;;;558    	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
00001e  2d06              CMP      r5,#6
000020  d201              BCS      |L34.38|
000022  2001              MOVS     r0,#1
000024  e000              B        |L34.40|
                  |L34.38|
000026  2000              MOVS     r0,#0
                  |L34.40|
000028  b918              CBNZ     r0,|L34.50|
00002a  f7fffffe          BL       ulPortSetInterruptMask
00002e  bf00              NOP      
                  |L34.48|
000030  e7fe              B        |L34.48|
                  |L34.50|
;;;559    
;;;560    	/* Allocate the memory required by the TCB and stack for the new task,
;;;561    	checking that the allocation was successful. */
;;;562    	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
000032  4630              MOV      r0,r6
000034  9910              LDR      r1,[sp,#0x40]
000036  f7fffffe          BL       prvAllocateTCBAndStack
00003a  4604              MOV      r4,r0
;;;563    
;;;564    	if( pxNewTCB != NULL )
00003c  2c00              CMP      r4,#0
00003e  d05a              BEQ      |L34.246|
;;;565    	{
;;;566    		#if( portUSING_MPU_WRAPPERS == 1 )
;;;567    			/* Should the task be created in privileged mode? */
;;;568    			BaseType_t xRunPrivileged;
;;;569    			if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
;;;570    			{
;;;571    				xRunPrivileged = pdTRUE;
;;;572    			}
;;;573    			else
;;;574    			{
;;;575    				xRunPrivileged = pdFALSE;
;;;576    			}
;;;577    			uxPriority &= ~portPRIVILEGE_BIT;
;;;578    
;;;579    			if( puxStackBuffer != NULL )
;;;580    			{
;;;581    				/* The application provided its own stack.  Note this so no
;;;582    				attempt is made to delete the stack should that task be
;;;583    				deleted. */
;;;584    				pxNewTCB->xUsingStaticallyAllocatedStack = pdTRUE;
;;;585    			}
;;;586    			else
;;;587    			{
;;;588    				/* The stack was allocated dynamically.  Note this so it can be
;;;589    				deleted again if the task is deleted. */
;;;590    				pxNewTCB->xUsingStaticallyAllocatedStack = pdFALSE;
;;;591    			}
;;;592    		#endif /* portUSING_MPU_WRAPPERS == 1 */
;;;593    
;;;594    		/* Calculate the top of stack address.  This depends on whether the
;;;595    		stack grows from high memory to low (as per the 80x86) or vice versa.
;;;596    		portSTACK_GROWTH is used to make the result positive or negative as
;;;597    		required by the port. */
;;;598    		#if( portSTACK_GROWTH < 0 )
;;;599    		{
;;;600    			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
000040  1e70              SUBS     r0,r6,#1
000042  6b21              LDR      r1,[r4,#0x30]
000044  eb010980          ADD      r9,r1,r0,LSL #2
;;;601    			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
000048  f0290907          BIC      r9,r9,#7
;;;602    
;;;603    			/* Check the alignment of the calculated top of stack is correct. */
;;;604    			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
00004c  f0090007          AND      r0,r9,#7
000050  b908              CBNZ     r0,|L34.86|
000052  2001              MOVS     r0,#1
000054  e000              B        |L34.88|
                  |L34.86|
000056  2000              MOVS     r0,#0
                  |L34.88|
000058  b918              CBNZ     r0,|L34.98|
00005a  f7fffffe          BL       ulPortSetInterruptMask
00005e  bf00              NOP      
                  |L34.96|
000060  e7fe              B        |L34.96|
                  |L34.98|
;;;605    		}
;;;606    		#else /* portSTACK_GROWTH */
;;;607    		{
;;;608    			pxTopOfStack = pxNewTCB->pxStack;
;;;609    
;;;610    			/* Check the alignment of the stack buffer is correct. */
;;;611    			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
;;;612    
;;;613    			/* If we want to use stack checking on architectures that use
;;;614    			a positive stack growth direction then we also need to store the
;;;615    			other extreme of the stack space. */
;;;616    			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
;;;617    		}
;;;618    		#endif /* portSTACK_GROWTH */
;;;619    
;;;620    		/* Setup the newly allocated TCB with the initial state of the task. */
;;;621    		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
000062  9600              STR      r6,[sp,#0]
000064  462a              MOV      r2,r5
000066  4620              MOV      r0,r4
000068  9b11              LDR      r3,[sp,#0x44]
00006a  9902              LDR      r1,[sp,#8]
00006c  f7fffffe          BL       prvInitialiseTCBVariables
;;;622    
;;;623    		/* Initialize the TCB stack to look as if the task was already running,
;;;624    		but had been interrupted by the scheduler.  The return address is set
;;;625    		to the start of the task function. Once the stack has been initialised
;;;626    		the	top of stack variable is updated. */
;;;627    		#if( portUSING_MPU_WRAPPERS == 1 )
;;;628    		{
;;;629    			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
;;;630    		}
;;;631    		#else /* portUSING_MPU_WRAPPERS */
;;;632    		{
;;;633    			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
000070  4652              MOV      r2,r10
000072  4641              MOV      r1,r8
000074  4648              MOV      r0,r9
000076  f7fffffe          BL       pxPortInitialiseStack
00007a  6020              STR      r0,[r4,#0]
;;;634    		}
;;;635    		#endif /* portUSING_MPU_WRAPPERS */
;;;636    
;;;637    		if( ( void * ) pxCreatedTask != NULL )
00007c  f1bb0f00          CMP      r11,#0
000080  d001              BEQ      |L34.134|
;;;638    		{
;;;639    			/* Pass the TCB out - in an anonymous way.  The calling function/
;;;640    			task can use this as a handle to delete the task later if
;;;641    			required.*/
;;;642    			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
000082  f8cb4000          STR      r4,[r11,#0]
                  |L34.134|
;;;643    		}
;;;644    		else
;;;645    		{
;;;646    			mtCOVERAGE_TEST_MARKER();
;;;647    		}
;;;648    
;;;649    		/* Ensure interrupts don't access the task lists while they are being
;;;650    		updated. */
;;;651    		taskENTER_CRITICAL();
000086  f7fffffe          BL       vPortEnterCritical
;;;652    		{
;;;653    			uxCurrentNumberOfTasks++;
00008a  4824              LDR      r0,|L34.284|
00008c  6800              LDR      r0,[r0,#0]  ; uxCurrentNumberOfTasks
00008e  1c40              ADDS     r0,r0,#1
000090  4922              LDR      r1,|L34.284|
000092  6008              STR      r0,[r1,#0]  ; uxCurrentNumberOfTasks
;;;654    			if( pxCurrentTCB == NULL )
000094  4822              LDR      r0,|L34.288|
000096  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000098  b940              CBNZ     r0,|L34.172|
;;;655    			{
;;;656    				/* There are no other tasks, or all the other tasks are in
;;;657    				the suspended state - make this the current task. */
;;;658    				pxCurrentTCB =  pxNewTCB;
00009a  4821              LDR      r0,|L34.288|
00009c  6004              STR      r4,[r0,#0]  ; pxCurrentTCB
;;;659    
;;;660    				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
00009e  4608              MOV      r0,r1
0000a0  6800              LDR      r0,[r0,#0]  ; uxCurrentNumberOfTasks
0000a2  2801              CMP      r0,#1
0000a4  d10c              BNE      |L34.192|
;;;661    				{
;;;662    					/* This is the first task to be created so do the preliminary
;;;663    					initialisation required.  We will not recover if this call
;;;664    					fails, but we will report the failure. */
;;;665    					prvInitialiseTaskLists();
0000a6  f7fffffe          BL       prvInitialiseTaskLists
0000aa  e009              B        |L34.192|
                  |L34.172|
;;;666    				}
;;;667    				else
;;;668    				{
;;;669    					mtCOVERAGE_TEST_MARKER();
;;;670    				}
;;;671    			}
;;;672    			else
;;;673    			{
;;;674    				/* If the scheduler is not already running, make this task the
;;;675    				current task if it is the highest priority task to be created
;;;676    				so far. */
;;;677    				if( xSchedulerRunning == pdFALSE )
0000ac  481d              LDR      r0,|L34.292|
0000ae  6800              LDR      r0,[r0,#0]  ; xSchedulerRunning
0000b0  b930              CBNZ     r0,|L34.192|
;;;678    				{
;;;679    					if( pxCurrentTCB->uxPriority <= uxPriority )
0000b2  481b              LDR      r0,|L34.288|
0000b4  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
0000b6  6ac0              LDR      r0,[r0,#0x2c]
0000b8  42a8              CMP      r0,r5
0000ba  d801              BHI      |L34.192|
;;;680    					{
;;;681    						pxCurrentTCB = pxNewTCB;
0000bc  4818              LDR      r0,|L34.288|
0000be  6004              STR      r4,[r0,#0]  ; pxCurrentTCB
                  |L34.192|
;;;682    					}
;;;683    					else
;;;684    					{
;;;685    						mtCOVERAGE_TEST_MARKER();
;;;686    					}
;;;687    				}
;;;688    				else
;;;689    				{
;;;690    					mtCOVERAGE_TEST_MARKER();
;;;691    				}
;;;692    			}
;;;693    
;;;694    			uxTaskNumber++;
0000c0  4819              LDR      r0,|L34.296|
0000c2  6800              LDR      r0,[r0,#0]  ; uxTaskNumber
0000c4  1c40              ADDS     r0,r0,#1
0000c6  4918              LDR      r1,|L34.296|
0000c8  6008              STR      r0,[r1,#0]  ; uxTaskNumber
;;;695    
;;;696    			#if ( configUSE_TRACE_FACILITY == 1 )
;;;697    			{
;;;698    				/* Add a counter into the TCB for tracing only. */
;;;699    				pxNewTCB->uxTCBNumber = uxTaskNumber;
;;;700    			}
;;;701    			#endif /* configUSE_TRACE_FACILITY */
;;;702    			traceTASK_CREATE( pxNewTCB );
;;;703    
;;;704    			prvAddTaskToReadyList( pxNewTCB );
0000ca  f894102c          LDRB     r1,[r4,#0x2c]
0000ce  2001              MOVS     r0,#1
0000d0  4088              LSLS     r0,r0,r1
0000d2  4916              LDR      r1,|L34.300|
0000d4  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
0000d6  4308              ORRS     r0,r0,r1
0000d8  4914              LDR      r1,|L34.300|
0000da  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
0000dc  6ae1              LDR      r1,[r4,#0x2c]
0000de  eb010181          ADD      r1,r1,r1,LSL #2
0000e2  4a13              LDR      r2,|L34.304|
0000e4  eb020081          ADD      r0,r2,r1,LSL #2
0000e8  1d21              ADDS     r1,r4,#4
0000ea  f7fffffe          BL       vListInsertEnd
;;;705    
;;;706    			xReturn = pdPASS;
0000ee  2701              MOVS     r7,#1
;;;707    			portSETUP_TCB( pxNewTCB );
;;;708    		}
;;;709    		taskEXIT_CRITICAL();
0000f0  f7fffffe          BL       vPortExitCritical
0000f4  e001              B        |L34.250|
                  |L34.246|
;;;710    	}
;;;711    	else
;;;712    	{
;;;713    		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
0000f6  f04f37ff          MOV      r7,#0xffffffff
                  |L34.250|
;;;714    		traceTASK_CREATE_FAILED();
;;;715    	}
;;;716    
;;;717    	if( xReturn == pdPASS )
0000fa  2f01              CMP      r7,#1
0000fc  d109              BNE      |L34.274|
;;;718    	{
;;;719    		if( xSchedulerRunning != pdFALSE )
0000fe  4809              LDR      r0,|L34.292|
000100  6800              LDR      r0,[r0,#0]  ; xSchedulerRunning
000102  b130              CBZ      r0,|L34.274|
;;;720    		{
;;;721    			/* If the created task is of a higher priority than the current task
;;;722    			then it should run now. */
;;;723    			if( pxCurrentTCB->uxPriority < uxPriority )
000104  4806              LDR      r0,|L34.288|
000106  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000108  6ac0              LDR      r0,[r0,#0x2c]
00010a  42a8              CMP      r0,r5
00010c  d201              BCS      |L34.274|
;;;724    			{
;;;725    				taskYIELD_IF_USING_PREEMPTION();
00010e  f7fffffe          BL       vPortYield
                  |L34.274|
;;;726    			}
;;;727    			else
;;;728    			{
;;;729    				mtCOVERAGE_TEST_MARKER();
;;;730    			}
;;;731    		}
;;;732    		else
;;;733    		{
;;;734    			mtCOVERAGE_TEST_MARKER();
;;;735    		}
;;;736    	}
;;;737    
;;;738    	return xReturn;
000112  4638              MOV      r0,r7
;;;739    }
000114  b005              ADD      sp,sp,#0x14
000116  e8bd8ff0          POP      {r4-r11,pc}
;;;740    /*-----------------------------------------------------------*/
                          ENDP

00011a  0000              DCW      0x0000
                  |L34.284|
                          DCD      uxCurrentNumberOfTasks
                  |L34.288|
                          DCD      pxCurrentTCB
                  |L34.292|
                          DCD      xSchedulerRunning
                  |L34.296|
                          DCD      uxTaskNumber
                  |L34.300|
                          DCD      uxTopReadyPriority
                  |L34.304|
                          DCD      pxReadyTasksLists

                          AREA ||i.xTaskGenericNotify||, CODE, READONLY, ALIGN=2

                  xTaskGenericNotify PROC
;;;4138   
;;;4139   	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;4140   	{
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;4141   	TCB_t * pxTCB;
;;;4142   	eNotifyValue eOriginalNotifyState;
;;;4143   	BaseType_t xReturn = pdPASS;
00000c  f04f0a01          MOV      r10,#1
;;;4144   
;;;4145   		configASSERT( xTaskToNotify );
000010  b91e              CBNZ     r6,|L35.26|
000012  f7fffffe          BL       ulPortSetInterruptMask
000016  bf00              NOP      
                  |L35.24|
000018  e7fe              B        |L35.24|
                  |L35.26|
;;;4146   		pxTCB = ( TCB_t * ) xTaskToNotify;
00001a  4634              MOV      r4,r6
;;;4147   
;;;4148   		taskENTER_CRITICAL();
00001c  f7fffffe          BL       vPortEnterCritical
;;;4149   		{
;;;4150   			if( pulPreviousNotificationValue != NULL )
000020  f1b80f00          CMP      r8,#0
000024  d002              BEQ      |L35.44|
;;;4151   			{
;;;4152   				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
000026  6ce0              LDR      r0,[r4,#0x4c]
000028  f8c80000          STR      r0,[r8,#0]
                  |L35.44|
;;;4153   			}
;;;4154   
;;;4155   			eOriginalNotifyState = pxTCB->eNotifyState;
00002c  f8949050          LDRB     r9,[r4,#0x50]
;;;4156   
;;;4157   			pxTCB->eNotifyState = eNotified;
000030  2002              MOVS     r0,#2
000032  f8840050          STRB     r0,[r4,#0x50]
;;;4158   
;;;4159   			switch( eAction )
000036  2f05              CMP      r7,#5
000038  d217              BCS      |L35.106|
00003a  e8dff007          TBB      [pc,r7]
00003e  1503              DCB      0x15,0x03
000040  070b0d00          DCB      0x07,0x0b,0x0d,0x00
;;;4160   			{
;;;4161   				case eSetBits	:
;;;4162   					pxTCB->ulNotifiedValue |= ulValue;
000044  6ce0              LDR      r0,[r4,#0x4c]
000046  4328              ORRS     r0,r0,r5
000048  64e0              STR      r0,[r4,#0x4c]
;;;4163   					break;
00004a  e00e              B        |L35.106|
;;;4164   
;;;4165   				case eIncrement	:
;;;4166   					( pxTCB->ulNotifiedValue )++;
00004c  6ce0              LDR      r0,[r4,#0x4c]
00004e  1c40              ADDS     r0,r0,#1
000050  64e0              STR      r0,[r4,#0x4c]
;;;4167   					break;
000052  e00a              B        |L35.106|
;;;4168   
;;;4169   				case eSetValueWithOverwrite	:
;;;4170   					pxTCB->ulNotifiedValue = ulValue;
000054  64e5              STR      r5,[r4,#0x4c]
;;;4171   					break;
000056  e008              B        |L35.106|
;;;4172   
;;;4173   				case eSetValueWithoutOverwrite :
;;;4174   					if( eOriginalNotifyState != eNotified )
000058  f1b90f02          CMP      r9,#2
00005c  d001              BEQ      |L35.98|
;;;4175   					{
;;;4176   						pxTCB->ulNotifiedValue = ulValue;
00005e  64e5              STR      r5,[r4,#0x4c]
000060  e001              B        |L35.102|
                  |L35.98|
;;;4177   					}
;;;4178   					else
;;;4179   					{
;;;4180   						/* The value could not be written to the task. */
;;;4181   						xReturn = pdFAIL;
000062  f04f0a00          MOV      r10,#0
                  |L35.102|
;;;4182   					}
;;;4183   					break;
000066  e000              B        |L35.106|
;;;4184   
;;;4185   				case eNoAction:
;;;4186   					/* The task is being notified without its notify value being
;;;4187   					updated. */
;;;4188   					break;
000068  bf00              NOP      
                  |L35.106|
00006a  bf00              NOP                            ;4163
;;;4189   			}
;;;4190   
;;;4191   			traceTASK_NOTIFY();
;;;4192   
;;;4193   			/* If the task is in the blocked state specifically to wait for a
;;;4194   			notification then unblock it now. */
;;;4195   			if( eOriginalNotifyState == eWaitingNotification )
00006c  f1b90f01          CMP      r9,#1
000070  d126              BNE      |L35.192|
;;;4196   			{
;;;4197   				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
000072  1d20              ADDS     r0,r4,#4
000074  f7fffffe          BL       uxListRemove
;;;4198   				prvAddTaskToReadyList( pxTCB );
000078  f894102c          LDRB     r1,[r4,#0x2c]
00007c  2001              MOVS     r0,#1
00007e  4088              LSLS     r0,r0,r1
000080  4912              LDR      r1,|L35.204|
000082  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000084  4308              ORRS     r0,r0,r1
000086  4911              LDR      r1,|L35.204|
000088  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
00008a  6ae1              LDR      r1,[r4,#0x2c]
00008c  eb010181          ADD      r1,r1,r1,LSL #2
000090  4a0f              LDR      r2,|L35.208|
000092  eb020081          ADD      r0,r2,r1,LSL #2
000096  1d21              ADDS     r1,r4,#4
000098  f7fffffe          BL       vListInsertEnd
;;;4199   
;;;4200   				/* The task should not have been on an event list. */
;;;4201   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
00009c  6aa0              LDR      r0,[r4,#0x28]
00009e  b908              CBNZ     r0,|L35.164|
0000a0  2001              MOVS     r0,#1
0000a2  e000              B        |L35.166|
                  |L35.164|
0000a4  2000              MOVS     r0,#0
                  |L35.166|
0000a6  b918              CBNZ     r0,|L35.176|
0000a8  f7fffffe          BL       ulPortSetInterruptMask
0000ac  bf00              NOP      
                  |L35.174|
0000ae  e7fe              B        |L35.174|
                  |L35.176|
;;;4202   
;;;4203   				#if( configUSE_TICKLESS_IDLE != 0 )
;;;4204   				{
;;;4205   					/* If a task is blocked waiting for a notification then
;;;4206   					xNextTaskUnblockTime might be set to the blocked task's time
;;;4207   					out time.  If the task is unblocked for a reason other than
;;;4208   					a timeout xNextTaskUnblockTime is normally left unchanged,
;;;4209   					because it will automatically get reset to a new value when
;;;4210   					the tick count equals xNextTaskUnblockTime.  However if
;;;4211   					tickless idling is used it might be more important to enter
;;;4212   					sleep mode at the earliest possible time - so reset
;;;4213   					xNextTaskUnblockTime here to ensure it is updated at the
;;;4214   					earliest possible time. */
;;;4215   					prvResetNextTaskUnblockTime();
;;;4216   				}
;;;4217   				#endif
;;;4218   
;;;4219   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
0000b0  4908              LDR      r1,|L35.212|
0000b2  6ae0              LDR      r0,[r4,#0x2c]
0000b4  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
0000b6  6ac9              LDR      r1,[r1,#0x2c]
0000b8  4288              CMP      r0,r1
0000ba  d901              BLS      |L35.192|
;;;4220   				{
;;;4221   					/* The notified task has a priority above the currently
;;;4222   					executing task so a yield is required. */
;;;4223   					taskYIELD_IF_USING_PREEMPTION();
0000bc  f7fffffe          BL       vPortYield
                  |L35.192|
;;;4224   				}
;;;4225   				else
;;;4226   				{
;;;4227   					mtCOVERAGE_TEST_MARKER();
;;;4228   				}
;;;4229   			}
;;;4230   			else
;;;4231   			{
;;;4232   				mtCOVERAGE_TEST_MARKER();
;;;4233   			}
;;;4234   		}
;;;4235   		taskEXIT_CRITICAL();
0000c0  f7fffffe          BL       vPortExitCritical
;;;4236   
;;;4237   		return xReturn;
0000c4  4650              MOV      r0,r10
;;;4238   	}
0000c6  e8bd87f0          POP      {r4-r10,pc}
;;;4239   
                          ENDP

0000ca  0000              DCW      0x0000
                  |L35.204|
                          DCD      uxTopReadyPriority
                  |L35.208|
                          DCD      pxReadyTasksLists
                  |L35.212|
                          DCD      pxCurrentTCB

                          AREA ||i.xTaskGenericNotifyFromISR||, CODE, READONLY, ALIGN=2

                  xTaskGenericNotifyFromISR PROC
;;;4244   
;;;4245   	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;4246   	{
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  f8dda028          LDR      r10,[sp,#0x28]
;;;4247   	TCB_t * pxTCB;
;;;4248   	eNotifyValue eOriginalNotifyState;
;;;4249   	BaseType_t xReturn = pdPASS;
000010  f04f0b01          MOV      r11,#1
;;;4250   	UBaseType_t uxSavedInterruptStatus;
;;;4251   
;;;4252   		configASSERT( xTaskToNotify );
000014  b91e              CBNZ     r6,|L36.30|
000016  f7fffffe          BL       ulPortSetInterruptMask
00001a  bf00              NOP      
                  |L36.28|
00001c  e7fe              B        |L36.28|
                  |L36.30|
;;;4253   
;;;4254   		/* RTOS ports that support interrupt nesting have the concept of a
;;;4255   		maximum	system call (or maximum API call) interrupt priority.
;;;4256   		Interrupts that are	above the maximum system call priority are keep
;;;4257   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;4258   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;4259   		is defined in FreeRTOSConfig.h then
;;;4260   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;4261   		failure if a FreeRTOS API function is called from an interrupt that has
;;;4262   		been assigned a priority above the configured maximum system call
;;;4263   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;4264   		from interrupts	that have been assigned a priority at or (logically)
;;;4265   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;4266   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;4267   		simple as possible.  More information (albeit Cortex-M specific) is
;;;4268   		provided on the following link:
;;;4269   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;4270   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
00001e  f7fffffe          BL       vPortValidateInterruptPriority
;;;4271   
;;;4272   		pxTCB = ( TCB_t * ) xTaskToNotify;
000022  4634              MOV      r4,r6
;;;4273   
;;;4274   		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
000024  f7fffffe          BL       ulPortSetInterruptMask
000028  9000              STR      r0,[sp,#0]
;;;4275   		{
;;;4276   			if( pulPreviousNotificationValue != NULL )
00002a  f1b80f00          CMP      r8,#0
00002e  d002              BEQ      |L36.54|
;;;4277   			{
;;;4278   				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
000030  6ce0              LDR      r0,[r4,#0x4c]
000032  f8c80000          STR      r0,[r8,#0]
                  |L36.54|
;;;4279   			}
;;;4280   
;;;4281   			eOriginalNotifyState = pxTCB->eNotifyState;
000036  f8949050          LDRB     r9,[r4,#0x50]
;;;4282   			pxTCB->eNotifyState = eNotified;
00003a  2002              MOVS     r0,#2
00003c  f8840050          STRB     r0,[r4,#0x50]
;;;4283   
;;;4284   			switch( eAction )
000040  2f05              CMP      r7,#5
000042  d217              BCS      |L36.116|
000044  e8dff007          TBB      [pc,r7]
000048  1503070b          DCB      0x15,0x03,0x07,0x0b
00004c  0d00              DCB      0x0d,0x00
;;;4285   			{
;;;4286   				case eSetBits	:
;;;4287   					pxTCB->ulNotifiedValue |= ulValue;
00004e  6ce0              LDR      r0,[r4,#0x4c]
000050  4328              ORRS     r0,r0,r5
000052  64e0              STR      r0,[r4,#0x4c]
;;;4288   					break;
000054  e00e              B        |L36.116|
;;;4289   
;;;4290   				case eIncrement	:
;;;4291   					( pxTCB->ulNotifiedValue )++;
000056  6ce0              LDR      r0,[r4,#0x4c]
000058  1c40              ADDS     r0,r0,#1
00005a  64e0              STR      r0,[r4,#0x4c]
;;;4292   					break;
00005c  e00a              B        |L36.116|
;;;4293   
;;;4294   				case eSetValueWithOverwrite	:
;;;4295   					pxTCB->ulNotifiedValue = ulValue;
00005e  64e5              STR      r5,[r4,#0x4c]
;;;4296   					break;
000060  e008              B        |L36.116|
;;;4297   
;;;4298   				case eSetValueWithoutOverwrite :
;;;4299   					if( eOriginalNotifyState != eNotified )
000062  f1b90f02          CMP      r9,#2
000066  d001              BEQ      |L36.108|
;;;4300   					{
;;;4301   						pxTCB->ulNotifiedValue = ulValue;
000068  64e5              STR      r5,[r4,#0x4c]
00006a  e001              B        |L36.112|
                  |L36.108|
;;;4302   					}
;;;4303   					else
;;;4304   					{
;;;4305   						/* The value could not be written to the task. */
;;;4306   						xReturn = pdFAIL;
00006c  f04f0b00          MOV      r11,#0
                  |L36.112|
;;;4307   					}
;;;4308   					break;
000070  e000              B        |L36.116|
;;;4309   
;;;4310   				case eNoAction :
;;;4311   					/* The task is being notified without its notify value being
;;;4312   					updated. */
;;;4313   					break;
000072  bf00              NOP      
                  |L36.116|
000074  bf00              NOP                            ;4288
;;;4314   			}
;;;4315   
;;;4316   			traceTASK_NOTIFY_FROM_ISR();
;;;4317   
;;;4318   			/* If the task is in the blocked state specifically to wait for a
;;;4319   			notification then unblock it now. */
;;;4320   			if( eOriginalNotifyState == eWaitingNotification )
000076  f1b90f01          CMP      r9,#1
00007a  d133              BNE      |L36.228|
;;;4321   			{
;;;4322   				/* The task should not have been on an event list. */
;;;4323   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
00007c  6aa0              LDR      r0,[r4,#0x28]
00007e  b908              CBNZ     r0,|L36.132|
000080  2001              MOVS     r0,#1
000082  e000              B        |L36.134|
                  |L36.132|
000084  2000              MOVS     r0,#0
                  |L36.134|
000086  b918              CBNZ     r0,|L36.144|
000088  f7fffffe          BL       ulPortSetInterruptMask
00008c  bf00              NOP      
                  |L36.142|
00008e  e7fe              B        |L36.142|
                  |L36.144|
;;;4324   
;;;4325   				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000090  4817              LDR      r0,|L36.240|
000092  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000094  b9a8              CBNZ     r0,|L36.194|
;;;4326   				{
;;;4327   					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
000096  1d20              ADDS     r0,r4,#4
000098  f7fffffe          BL       uxListRemove
;;;4328   					prvAddTaskToReadyList( pxTCB );
00009c  f894102c          LDRB     r1,[r4,#0x2c]
0000a0  2001              MOVS     r0,#1
0000a2  4088              LSLS     r0,r0,r1
0000a4  4913              LDR      r1,|L36.244|
0000a6  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
0000a8  4308              ORRS     r0,r0,r1
0000aa  4912              LDR      r1,|L36.244|
0000ac  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
0000ae  6ae1              LDR      r1,[r4,#0x2c]
0000b0  eb010181          ADD      r1,r1,r1,LSL #2
0000b4  4a10              LDR      r2,|L36.248|
0000b6  eb020081          ADD      r0,r2,r1,LSL #2
0000ba  1d21              ADDS     r1,r4,#4
0000bc  f7fffffe          BL       vListInsertEnd
0000c0  e004              B        |L36.204|
                  |L36.194|
;;;4329   				}
;;;4330   				else
;;;4331   				{
;;;4332   					/* The delayed and ready lists cannot be accessed, so hold
;;;4333   					this task pending until the scheduler is resumed. */
;;;4334   					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
0000c2  f1040118          ADD      r1,r4,#0x18
0000c6  480d              LDR      r0,|L36.252|
0000c8  f7fffffe          BL       vListInsertEnd
                  |L36.204|
;;;4335   				}
;;;4336   
;;;4337   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
0000cc  490c              LDR      r1,|L36.256|
0000ce  6ae0              LDR      r0,[r4,#0x2c]
0000d0  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
0000d2  6ac9              LDR      r1,[r1,#0x2c]
0000d4  4288              CMP      r0,r1
0000d6  d905              BLS      |L36.228|
;;;4338   				{
;;;4339   					/* The notified task has a priority above the currently
;;;4340   					executing task so a yield is required. */
;;;4341   					if( pxHigherPriorityTaskWoken != NULL )
0000d8  f1ba0f00          CMP      r10,#0
0000dc  d002              BEQ      |L36.228|
;;;4342   					{
;;;4343   						*pxHigherPriorityTaskWoken = pdTRUE;
0000de  2001              MOVS     r0,#1
0000e0  f8ca0000          STR      r0,[r10,#0]
                  |L36.228|
;;;4344   					}
;;;4345   				}
;;;4346   				else
;;;4347   				{
;;;4348   					mtCOVERAGE_TEST_MARKER();
;;;4349   				}
;;;4350   			}
;;;4351   		}
;;;4352   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
0000e4  9800              LDR      r0,[sp,#0]
0000e6  f7fffffe          BL       vPortClearInterruptMask
;;;4353   
;;;4354   		return xReturn;
0000ea  4658              MOV      r0,r11
;;;4355   	}
0000ec  e8bd8ff8          POP      {r3-r11,pc}
;;;4356   
                          ENDP

                  |L36.240|
                          DCD      uxSchedulerSuspended
                  |L36.244|
                          DCD      uxTopReadyPriority
                  |L36.248|
                          DCD      pxReadyTasksLists
                  |L36.252|
                          DCD      xPendingReadyList
                  |L36.256|
                          DCD      pxCurrentTCB

                          AREA ||i.xTaskGetCurrentTaskHandle||, CODE, READONLY, ALIGN=2

                  xTaskGetCurrentTaskHandle PROC
;;;3372   
;;;3373   	TaskHandle_t xTaskGetCurrentTaskHandle( void )
000000  4901              LDR      r1,|L37.8|
;;;3374   	{
;;;3375   	TaskHandle_t xReturn;
;;;3376   
;;;3377   		/* A critical section is not required as this is not called from
;;;3378   		an interrupt and the current TCB will always be the same for any
;;;3379   		individual execution thread. */
;;;3380   		xReturn = pxCurrentTCB;
000002  6808              LDR      r0,[r1,#0]  ; pxCurrentTCB
;;;3381   
;;;3382   		return xReturn;
;;;3383   	}
000004  4770              BX       lr
;;;3384   
                          ENDP

000006  0000              DCW      0x0000
                  |L37.8|
                          DCD      pxCurrentTCB

                          AREA ||i.xTaskGetSchedulerState||, CODE, READONLY, ALIGN=2

                  xTaskGetSchedulerState PROC
;;;3389   
;;;3390   	BaseType_t xTaskGetSchedulerState( void )
000000  4905              LDR      r1,|L38.24|
;;;3391   	{
;;;3392   	BaseType_t xReturn;
;;;3393   
;;;3394   		if( xSchedulerRunning == pdFALSE )
000002  6809              LDR      r1,[r1,#0]  ; xSchedulerRunning
000004  b909              CBNZ     r1,|L38.10|
;;;3395   		{
;;;3396   			xReturn = taskSCHEDULER_NOT_STARTED;
000006  2001              MOVS     r0,#1
000008  e005              B        |L38.22|
                  |L38.10|
;;;3397   		}
;;;3398   		else
;;;3399   		{
;;;3400   			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
00000a  4904              LDR      r1,|L38.28|
00000c  6809              LDR      r1,[r1,#0]  ; uxSchedulerSuspended
00000e  b909              CBNZ     r1,|L38.20|
;;;3401   			{
;;;3402   				xReturn = taskSCHEDULER_RUNNING;
000010  2002              MOVS     r0,#2
000012  e000              B        |L38.22|
                  |L38.20|
;;;3403   			}
;;;3404   			else
;;;3405   			{
;;;3406   				xReturn = taskSCHEDULER_SUSPENDED;
000014  2000              MOVS     r0,#0
                  |L38.22|
;;;3407   			}
;;;3408   		}
;;;3409   
;;;3410   		return xReturn;
;;;3411   	}
000016  4770              BX       lr
;;;3412   
                          ENDP

                  |L38.24|
                          DCD      xSchedulerRunning
                  |L38.28|
                          DCD      uxSchedulerSuspended

                          AREA ||i.xTaskGetTickCount||, CODE, READONLY, ALIGN=2

                  xTaskGetTickCount PROC
;;;1763   
;;;1764   TickType_t xTaskGetTickCount( void )
000000  4901              LDR      r1,|L39.8|
;;;1765   {
;;;1766   TickType_t xTicks;
;;;1767   
;;;1768   	/* Critical section required if running on a 16 bit processor. */
;;;1769   	portTICK_TYPE_ENTER_CRITICAL();
;;;1770   	{
;;;1771   		xTicks = xTickCount;
000002  6808              LDR      r0,[r1,#0]  ; xTickCount
;;;1772   	}
;;;1773   	portTICK_TYPE_EXIT_CRITICAL();
;;;1774   
;;;1775   	return xTicks;
;;;1776   }
000004  4770              BX       lr
;;;1777   /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L39.8|
                          DCD      xTickCount

                          AREA ||i.xTaskGetTickCountFromISR||, CODE, READONLY, ALIGN=2

                  xTaskGetTickCountFromISR PROC
;;;1778   
;;;1779   TickType_t xTaskGetTickCountFromISR( void )
000000  b570              PUSH     {r4-r6,lr}
;;;1780   {
;;;1781   TickType_t xReturn;
;;;1782   UBaseType_t uxSavedInterruptStatus;
;;;1783   
;;;1784   	/* RTOS ports that support interrupt nesting have the concept of a maximum
;;;1785   	system call (or maximum API call) interrupt priority.  Interrupts that are
;;;1786   	above the maximum system call priority are kept permanently enabled, even
;;;1787   	when the RTOS kernel is in a critical section, but cannot make any calls to
;;;1788   	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
;;;1789   	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1790   	failure if a FreeRTOS API function is called from an interrupt that has been
;;;1791   	assigned a priority above the configured maximum system call priority.
;;;1792   	Only FreeRTOS functions that end in FromISR can be called from interrupts
;;;1793   	that have been assigned a priority at or (logically) below the maximum
;;;1794   	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
;;;1795   	safe API to ensure interrupt entry is as fast and as simple as possible.
;;;1796   	More information (albeit Cortex-M specific) is provided on the following
;;;1797   	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1798   	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
000002  f7fffffe          BL       vPortValidateInterruptPriority
;;;1799   
;;;1800   	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
000006  2500              MOVS     r5,#0
;;;1801   	{
;;;1802   		xReturn = xTickCount;
000008  4801              LDR      r0,|L40.16|
00000a  6804              LDR      r4,[r0,#0]  ; xTickCount
;;;1803   	}
;;;1804   	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
;;;1805   
;;;1806   	return xReturn;
00000c  4620              MOV      r0,r4
;;;1807   }
00000e  bd70              POP      {r4-r6,pc}
;;;1808   /*-----------------------------------------------------------*/
                          ENDP

                  |L40.16|
                          DCD      xTickCount

                          AREA ||i.xTaskIncrementTick||, CODE, READONLY, ALIGN=2

                  xTaskIncrementTick PROC
;;;1938   
;;;1939   BaseType_t xTaskIncrementTick( void )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1940   {
;;;1941   TCB_t * pxTCB;
;;;1942   TickType_t xItemValue;
;;;1943   BaseType_t xSwitchRequired = pdFALSE;
000004  f04f0800          MOV      r8,#0
;;;1944   
;;;1945   	/* Called by the portable layer each time a tick interrupt occurs.
;;;1946   	Increments the tick then checks to see if the new tick value will cause any
;;;1947   	tasks to be unblocked. */
;;;1948   	traceTASK_INCREMENT_TICK( xTickCount );
;;;1949   	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000008  4841              LDR      r0,|L41.272|
00000a  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00000c  2800              CMP      r0,#0
00000e  d172              BNE      |L41.246|
;;;1950   	{
;;;1951   		/* Increment the RTOS tick, switching the delayed and overflowed
;;;1952   		delayed lists if it wraps to 0. */
;;;1953   		++xTickCount;
000010  4840              LDR      r0,|L41.276|
000012  6800              LDR      r0,[r0,#0]  ; xTickCount
000014  1c40              ADDS     r0,r0,#1
000016  493f              LDR      r1,|L41.276|
000018  6008              STR      r0,[r1,#0]  ; xTickCount
;;;1954   
;;;1955   		{
;;;1956   			/* Minor optimisation.  The tick count cannot change in this
;;;1957   			block. */
;;;1958   			const TickType_t xConstTickCount = xTickCount;
00001a  4608              MOV      r0,r1
00001c  6806              LDR      r6,[r0,#0]  ; xTickCount
;;;1959   
;;;1960   			if( xConstTickCount == ( TickType_t ) 0U )
00001e  b9de              CBNZ     r6,|L41.88|
;;;1961   			{
;;;1962   				taskSWITCH_DELAYED_LISTS();
000020  483d              LDR      r0,|L41.280|
000022  6800              LDR      r0,[r0,#0]  ; pxDelayedTaskList
000024  6800              LDR      r0,[r0,#0]
000026  b908              CBNZ     r0,|L41.44|
000028  2001              MOVS     r0,#1
00002a  e000              B        |L41.46|
                  |L41.44|
00002c  2000              MOVS     r0,#0
                  |L41.46|
00002e  b918              CBNZ     r0,|L41.56|
000030  f7fffffe          BL       ulPortSetInterruptMask
000034  bf00              NOP      
                  |L41.54|
000036  e7fe              B        |L41.54|
                  |L41.56|
000038  4837              LDR      r0,|L41.280|
00003a  6807              LDR      r7,[r0,#0]  ; pxDelayedTaskList
00003c  4837              LDR      r0,|L41.284|
00003e  6800              LDR      r0,[r0,#0]  ; pxOverflowDelayedTaskList
000040  4935              LDR      r1,|L41.280|
000042  6008              STR      r0,[r1,#0]  ; pxDelayedTaskList
000044  4835              LDR      r0,|L41.284|
000046  6007              STR      r7,[r0,#0]  ; pxOverflowDelayedTaskList
000048  4835              LDR      r0,|L41.288|
00004a  6800              LDR      r0,[r0,#0]  ; xNumOfOverflows
00004c  1c40              ADDS     r0,r0,#1
00004e  4934              LDR      r1,|L41.288|
000050  6008              STR      r0,[r1,#0]  ; xNumOfOverflows
000052  f7fffffe          BL       prvResetNextTaskUnblockTime
000056  bf00              NOP      
                  |L41.88|
;;;1963   			}
;;;1964   			else
;;;1965   			{
;;;1966   				mtCOVERAGE_TEST_MARKER();
;;;1967   			}
;;;1968   
;;;1969   			/* See if this tick has made a timeout expire.  Tasks are stored in
;;;1970   			the	queue in the order of their wake time - meaning once one task
;;;1971   			has been found whose block time has not expired there is no need to
;;;1972   			look any further down the list. */
;;;1973   			if( xConstTickCount >= xNextTaskUnblockTime )
000058  4832              LDR      r0,|L41.292|
00005a  6800              LDR      r0,[r0,#0]  ; xNextTaskUnblockTime
00005c  4286              CMP      r6,r0
00005e  d33c              BCC      |L41.218|
;;;1974   			{
;;;1975   				for( ;; )
000060  bf00              NOP      
                  |L41.98|
;;;1976   				{
;;;1977   					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
000062  482d              LDR      r0,|L41.280|
000064  6800              LDR      r0,[r0,#0]  ; pxDelayedTaskList
000066  6800              LDR      r0,[r0,#0]
000068  b908              CBNZ     r0,|L41.110|
00006a  2001              MOVS     r0,#1
00006c  e000              B        |L41.112|
                  |L41.110|
00006e  2000              MOVS     r0,#0
                  |L41.112|
000070  b120              CBZ      r0,|L41.124|
;;;1978   					{
;;;1979   						/* The delayed list is empty.  Set xNextTaskUnblockTime
;;;1980   						to the maximum possible value so it is extremely
;;;1981   						unlikely that the
;;;1982   						if( xTickCount >= xNextTaskUnblockTime ) test will pass
;;;1983   						next time through. */
;;;1984   						xNextTaskUnblockTime = portMAX_DELAY;
000072  f04f30ff          MOV      r0,#0xffffffff
000076  492b              LDR      r1,|L41.292|
000078  6008              STR      r0,[r1,#0]  ; xNextTaskUnblockTime
;;;1985   						break;
00007a  e02d              B        |L41.216|
                  |L41.124|
;;;1986   					}
;;;1987   					else
;;;1988   					{
;;;1989   						/* The delayed list is not empty, get the value of the
;;;1990   						item at the head of the delayed list.  This is the time
;;;1991   						at which the task at the head of the delayed list must
;;;1992   						be removed from the Blocked state. */
;;;1993   						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
00007c  4826              LDR      r0,|L41.280|
00007e  6800              LDR      r0,[r0,#0]  ; pxDelayedTaskList
000080  68c0              LDR      r0,[r0,#0xc]
000082  68c4              LDR      r4,[r0,#0xc]
;;;1994   						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
000084  6865              LDR      r5,[r4,#4]
;;;1995   
;;;1996   						if( xConstTickCount < xItemValue )
000086  42ae              CMP      r6,r5
000088  d202              BCS      |L41.144|
;;;1997   						{
;;;1998   							/* It is not time to unblock this item yet, but the
;;;1999   							item value is the time at which the task at the head
;;;2000   							of the blocked list must be removed from the Blocked
;;;2001   							state -	so record the item value in
;;;2002   							xNextTaskUnblockTime. */
;;;2003   							xNextTaskUnblockTime = xItemValue;
00008a  4826              LDR      r0,|L41.292|
00008c  6005              STR      r5,[r0,#0]  ; xNextTaskUnblockTime
;;;2004   							break;
00008e  e023              B        |L41.216|
                  |L41.144|
;;;2005   						}
;;;2006   						else
;;;2007   						{
;;;2008   							mtCOVERAGE_TEST_MARKER();
;;;2009   						}
;;;2010   
;;;2011   						/* It is time to remove the item from the Blocked state. */
;;;2012   						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
000090  1d20              ADDS     r0,r4,#4
000092  f7fffffe          BL       uxListRemove
;;;2013   
;;;2014   						/* Is the task waiting on an event also?  If so remove
;;;2015   						it from the event list. */
;;;2016   						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
000096  6aa0              LDR      r0,[r4,#0x28]
000098  b118              CBZ      r0,|L41.162|
;;;2017   						{
;;;2018   							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
00009a  f1040018          ADD      r0,r4,#0x18
00009e  f7fffffe          BL       uxListRemove
                  |L41.162|
;;;2019   						}
;;;2020   						else
;;;2021   						{
;;;2022   							mtCOVERAGE_TEST_MARKER();
;;;2023   						}
;;;2024   
;;;2025   						/* Place the unblocked task into the appropriate ready
;;;2026   						list. */
;;;2027   						prvAddTaskToReadyList( pxTCB );
0000a2  f894102c          LDRB     r1,[r4,#0x2c]
0000a6  2001              MOVS     r0,#1
0000a8  4088              LSLS     r0,r0,r1
0000aa  491f              LDR      r1,|L41.296|
0000ac  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
0000ae  4308              ORRS     r0,r0,r1
0000b0  491d              LDR      r1,|L41.296|
0000b2  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
0000b4  6ae1              LDR      r1,[r4,#0x2c]
0000b6  eb010181          ADD      r1,r1,r1,LSL #2
0000ba  4a1c              LDR      r2,|L41.300|
0000bc  eb020081          ADD      r0,r2,r1,LSL #2
0000c0  1d21              ADDS     r1,r4,#4
0000c2  f7fffffe          BL       vListInsertEnd
;;;2028   
;;;2029   						/* A task being unblocked cannot cause an immediate
;;;2030   						context switch if preemption is turned off. */
;;;2031   						#if (  configUSE_PREEMPTION == 1 )
;;;2032   						{
;;;2033   							/* Preemption is on, but a context switch should
;;;2034   							only be performed if the unblocked task has a
;;;2035   							priority that is equal to or higher than the
;;;2036   							currently executing task. */
;;;2037   							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
0000c6  491a              LDR      r1,|L41.304|
0000c8  6ae0              LDR      r0,[r4,#0x2c]
0000ca  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
0000cc  6ac9              LDR      r1,[r1,#0x2c]
0000ce  4288              CMP      r0,r1
0000d0  d3c7              BCC      |L41.98|
;;;2038   							{
;;;2039   								xSwitchRequired = pdTRUE;
0000d2  f04f0801          MOV      r8,#1
0000d6  e7c4              B        |L41.98|
                  |L41.216|
0000d8  bf00              NOP                            ;1985
                  |L41.218|
;;;2040   							}
;;;2041   							else
;;;2042   							{
;;;2043   								mtCOVERAGE_TEST_MARKER();
;;;2044   							}
;;;2045   						}
;;;2046   						#endif /* configUSE_PREEMPTION */
;;;2047   					}
;;;2048   				}
;;;2049   			}
;;;2050   		}
;;;2051   
;;;2052   		/* Tasks of equal priority to the currently running task will share
;;;2053   		processing time (time slice) if preemption is on, and the application
;;;2054   		writer has not explicitly turned time slicing off. */
;;;2055   		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
;;;2056   		{
;;;2057   			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
0000da  4815              LDR      r0,|L41.304|
0000dc  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
0000de  6ac0              LDR      r0,[r0,#0x2c]
0000e0  eb000080          ADD      r0,r0,r0,LSL #2
0000e4  4911              LDR      r1,|L41.300|
0000e6  f8510020          LDR      r0,[r1,r0,LSL #2]
0000ea  2801              CMP      r0,#1
0000ec  d908              BLS      |L41.256|
;;;2058   			{
;;;2059   				xSwitchRequired = pdTRUE;
0000ee  f04f0801          MOV      r8,#1
0000f2  e005              B        |L41.256|
0000f4  e7ff              B        |L41.246|
                  |L41.246|
;;;2060   			}
;;;2061   			else
;;;2062   			{
;;;2063   				mtCOVERAGE_TEST_MARKER();
;;;2064   			}
;;;2065   		}
;;;2066   		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
;;;2067   
;;;2068   		#if ( configUSE_TICK_HOOK == 1 )
;;;2069   		{
;;;2070   			/* Guard against the tick hook being called when the pended tick
;;;2071   			count is being unwound (when the scheduler is being unlocked). */
;;;2072   			if( uxPendedTicks == ( UBaseType_t ) 0U )
;;;2073   			{
;;;2074   				vApplicationTickHook();
;;;2075   			}
;;;2076   			else
;;;2077   			{
;;;2078   				mtCOVERAGE_TEST_MARKER();
;;;2079   			}
;;;2080   		}
;;;2081   		#endif /* configUSE_TICK_HOOK */
;;;2082   	}
;;;2083   	else
;;;2084   	{
;;;2085   		++uxPendedTicks;
0000f6  480f              LDR      r0,|L41.308|
0000f8  6800              LDR      r0,[r0,#0]  ; uxPendedTicks
0000fa  1c40              ADDS     r0,r0,#1
0000fc  490d              LDR      r1,|L41.308|
0000fe  6008              STR      r0,[r1,#0]  ; uxPendedTicks
                  |L41.256|
;;;2086   
;;;2087   		/* The tick hook gets called at regular intervals, even if the
;;;2088   		scheduler is locked. */
;;;2089   		#if ( configUSE_TICK_HOOK == 1 )
;;;2090   		{
;;;2091   			vApplicationTickHook();
;;;2092   		}
;;;2093   		#endif
;;;2094   	}
;;;2095   
;;;2096   	#if ( configUSE_PREEMPTION == 1 )
;;;2097   	{
;;;2098   		if( xYieldPending != pdFALSE )
000100  480d              LDR      r0,|L41.312|
000102  6800              LDR      r0,[r0,#0]  ; xYieldPending
000104  b108              CBZ      r0,|L41.266|
;;;2099   		{
;;;2100   			xSwitchRequired = pdTRUE;
000106  f04f0801          MOV      r8,#1
                  |L41.266|
;;;2101   		}
;;;2102   		else
;;;2103   		{
;;;2104   			mtCOVERAGE_TEST_MARKER();
;;;2105   		}
;;;2106   	}
;;;2107   	#endif /* configUSE_PREEMPTION */
;;;2108   
;;;2109   	return xSwitchRequired;
00010a  4640              MOV      r0,r8
;;;2110   }
00010c  e8bd81f0          POP      {r4-r8,pc}
;;;2111   /*-----------------------------------------------------------*/
                          ENDP

                  |L41.272|
                          DCD      uxSchedulerSuspended
                  |L41.276|
                          DCD      xTickCount
                  |L41.280|
                          DCD      pxDelayedTaskList
                  |L41.284|
                          DCD      pxOverflowDelayedTaskList
                  |L41.288|
                          DCD      xNumOfOverflows
                  |L41.292|
                          DCD      xNextTaskUnblockTime
                  |L41.296|
                          DCD      uxTopReadyPriority
                  |L41.300|
                          DCD      pxReadyTasksLists
                  |L41.304|
                          DCD      pxCurrentTCB
                  |L41.308|
                          DCD      uxPendedTicks
                  |L41.312|
                          DCD      xYieldPending

                          AREA ||i.xTaskNotifyStateClear||, CODE, READONLY, ALIGN=2

                  xTaskNotifyStateClear PROC
;;;4443   
;;;4444   	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
000000  b570              PUSH     {r4-r6,lr}
;;;4445   	{
000002  4604              MOV      r4,r0
;;;4446   	TCB_t *pxTCB;
;;;4447   	BaseType_t xReturn;
;;;4448   
;;;4449   		pxTCB = ( TCB_t * ) xTask;
000004  4626              MOV      r6,r4
;;;4450   
;;;4451   		/* If null is passed in here then it is the calling task that is having
;;;4452   		its notification state cleared. */
;;;4453   		pxTCB = prvGetTCBFromHandle( pxTCB );
000006  b916              CBNZ     r6,|L42.14|
000008  480a              LDR      r0,|L42.52|
00000a  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00000c  e000              B        |L42.16|
                  |L42.14|
00000e  4630              MOV      r0,r6
                  |L42.16|
000010  4606              MOV      r6,r0
;;;4454   
;;;4455   		taskENTER_CRITICAL();
000012  f7fffffe          BL       vPortEnterCritical
;;;4456   		{
;;;4457   			if( pxTCB->eNotifyState == eNotified )
000016  f8960050          LDRB     r0,[r6,#0x50]
00001a  2802              CMP      r0,#2
00001c  d104              BNE      |L42.40|
;;;4458   			{
;;;4459   				pxTCB->eNotifyState = eNotWaitingNotification;
00001e  2000              MOVS     r0,#0
000020  f8860050          STRB     r0,[r6,#0x50]
;;;4460   				xReturn = pdPASS;
000024  2501              MOVS     r5,#1
000026  e000              B        |L42.42|
                  |L42.40|
;;;4461   			}
;;;4462   			else
;;;4463   			{
;;;4464   				xReturn = pdFAIL;
000028  2500              MOVS     r5,#0
                  |L42.42|
;;;4465   			}
;;;4466   		}
;;;4467   		taskEXIT_CRITICAL();
00002a  f7fffffe          BL       vPortExitCritical
;;;4468   
;;;4469   		return xReturn;
00002e  4628              MOV      r0,r5
;;;4470   	}
000030  bd70              POP      {r4-r6,pc}
;;;4471   
                          ENDP

000032  0000              DCW      0x0000
                  |L42.52|
                          DCD      pxCurrentTCB

                          AREA ||i.xTaskNotifyWait||, CODE, READONLY, ALIGN=2

                  xTaskNotifyWait PROC
;;;4013   
;;;4014   	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;4015   	{
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
00000a  461c              MOV      r4,r3
;;;4016   	TickType_t xTimeToWake;
;;;4017   	BaseType_t xReturn;
;;;4018   
;;;4019   		taskENTER_CRITICAL();
00000c  f7fffffe          BL       vPortEnterCritical
;;;4020   		{
;;;4021   			/* Only block if a notification is not already pending. */
;;;4022   			if( pxCurrentTCB->eNotifyState != eNotified )
000010  482c              LDR      r0,|L43.196|
000012  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000014  f8900050          LDRB     r0,[r0,#0x50]
000018  2802              CMP      r0,#2
00001a  d02f              BEQ      |L43.124|
;;;4023   			{
;;;4024   				/* Clear bits in the task's notification value as bits may get
;;;4025   				set	by the notifying task or interrupt.  This can be used to
;;;4026   				clear the value to zero. */
;;;4027   				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
00001c  4929              LDR      r1,|L43.196|
00001e  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000020  f101004c          ADD      r0,r1,#0x4c
000024  6cc9              LDR      r1,[r1,#0x4c]
000026  43b9              BICS     r1,r1,r7
000028  6001              STR      r1,[r0,#0]
;;;4028   
;;;4029   				/* Mark this task as waiting for a notification. */
;;;4030   				pxCurrentTCB->eNotifyState = eWaitingNotification;
00002a  2001              MOVS     r0,#1
00002c  4925              LDR      r1,|L43.196|
00002e  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000030  f8810050          STRB     r0,[r1,#0x50]
;;;4031   
;;;4032   				if( xTicksToWait > ( TickType_t ) 0 )
000034  b314              CBZ      r4,|L43.124|
;;;4033   				{
;;;4034   					/* The task is going to block.  First it must be removed
;;;4035   					from the	ready list. */
;;;4036   					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
000036  4823              LDR      r0,|L43.196|
000038  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00003a  1d00              ADDS     r0,r0,#4
00003c  f7fffffe          BL       uxListRemove
000040  b950              CBNZ     r0,|L43.88|
;;;4037   					{
;;;4038   						/* The current task must be in a ready list, so there is
;;;4039   						no need to check, and the port reset macro can be called
;;;4040   						directly. */
;;;4041   						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
000042  4820              LDR      r0,|L43.196|
000044  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000046  f890102c          LDRB     r1,[r0,#0x2c]
00004a  2001              MOVS     r0,#1
00004c  4088              LSLS     r0,r0,r1
00004e  491e              LDR      r1,|L43.200|
000050  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000052  4381              BICS     r1,r1,r0
000054  481c              LDR      r0,|L43.200|
000056  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L43.88|
;;;4042   					}
;;;4043   					else
;;;4044   					{
;;;4045   						mtCOVERAGE_TEST_MARKER();
;;;4046   					}
;;;4047   
;;;4048   					#if ( INCLUDE_vTaskSuspend == 1 )
;;;4049   					{
;;;4050   						if( xTicksToWait == portMAX_DELAY )
000058  1c60              ADDS     r0,r4,#1
00005a  b930              CBNZ     r0,|L43.106|
;;;4051   						{
;;;4052   							/* Add the task to the suspended task list instead
;;;4053   							of a delayed task list to ensure the task is not
;;;4054   							woken by a timing event.  It will block
;;;4055   							indefinitely. */
;;;4056   							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
00005c  4819              LDR      r0,|L43.196|
00005e  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
000060  1d09              ADDS     r1,r1,#4
000062  481a              LDR      r0,|L43.204|
000064  f7fffffe          BL       vListInsertEnd
000068  e006              B        |L43.120|
                  |L43.106|
;;;4057   						}
;;;4058   						else
;;;4059   						{
;;;4060   							/* Calculate the time at which the task should be
;;;4061   							woken if no notification events occur.  This may
;;;4062   							overflow but this doesn't matter, the scheduler will
;;;4063   							handle it. */
;;;4064   							xTimeToWake = xTickCount + xTicksToWait;
00006a  4819              LDR      r0,|L43.208|
00006c  6800              LDR      r0,[r0,#0]  ; xTickCount
00006e  eb000904          ADD      r9,r0,r4
;;;4065   							prvAddCurrentTaskToDelayedList( xTimeToWake );
000072  4648              MOV      r0,r9
000074  f7fffffe          BL       prvAddCurrentTaskToDelayedList
                  |L43.120|
;;;4066   						}
;;;4067   					}
;;;4068   					#else /* INCLUDE_vTaskSuspend */
;;;4069   					{
;;;4070   							/* Calculate the time at which the task should be
;;;4071   							woken if the event does not occur.  This may
;;;4072   							overflow but this doesn't matter, the scheduler will
;;;4073   							handle it. */
;;;4074   							xTimeToWake = xTickCount + xTicksToWait;
;;;4075   							prvAddCurrentTaskToDelayedList( xTimeToWake );
;;;4076   					}
;;;4077   					#endif /* INCLUDE_vTaskSuspend */
;;;4078   
;;;4079   					traceTASK_NOTIFY_WAIT_BLOCK();
;;;4080   
;;;4081   					/* All ports are written to allow a yield in a critical
;;;4082   					section (some will yield immediately, others wait until the
;;;4083   					critical section exits) - but it is not something that
;;;4084   					application code should ever do. */
;;;4085   					portYIELD_WITHIN_API();
000078  f7fffffe          BL       vPortYield
                  |L43.124|
;;;4086   				}
;;;4087   				else
;;;4088   				{
;;;4089   					mtCOVERAGE_TEST_MARKER();
;;;4090   				}
;;;4091   			}
;;;4092   			else
;;;4093   			{
;;;4094   				mtCOVERAGE_TEST_MARKER();
;;;4095   			}
;;;4096   		}
;;;4097   		taskEXIT_CRITICAL();
00007c  f7fffffe          BL       vPortExitCritical
;;;4098   
;;;4099   		taskENTER_CRITICAL();
000080  f7fffffe          BL       vPortEnterCritical
;;;4100   		{
;;;4101   			traceTASK_NOTIFY_WAIT();
;;;4102   
;;;4103   			if( pulNotificationValue != NULL )
000084  b11d              CBZ      r5,|L43.142|
;;;4104   			{
;;;4105   				/* Output the current notification value, which may or may not
;;;4106   				have changed. */
;;;4107   				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
000086  480f              LDR      r0,|L43.196|
000088  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00008a  6cc0              LDR      r0,[r0,#0x4c]
00008c  6028              STR      r0,[r5,#0]
                  |L43.142|
;;;4108   			}
;;;4109   
;;;4110   			/* If eNotifyValue is set then either the task never entered the
;;;4111   			blocked state (because a notification was already pending) or the
;;;4112   			task unblocked because of a notification.  Otherwise the task
;;;4113   			unblocked because of a timeout. */
;;;4114   			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
00008e  480d              LDR      r0,|L43.196|
000090  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000092  f8900050          LDRB     r0,[r0,#0x50]
000096  2801              CMP      r0,#1
000098  d101              BNE      |L43.158|
;;;4115   			{
;;;4116   				/* A notification was not received. */
;;;4117   				xReturn = pdFALSE;
00009a  2600              MOVS     r6,#0
00009c  e008              B        |L43.176|
                  |L43.158|
;;;4118   			}
;;;4119   			else
;;;4120   			{
;;;4121   				/* A notification was already pending or a notification was
;;;4122   				received while the task was waiting. */
;;;4123   				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
00009e  4909              LDR      r1,|L43.196|
0000a0  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
0000a2  f101004c          ADD      r0,r1,#0x4c
0000a6  6cc9              LDR      r1,[r1,#0x4c]
0000a8  ea210108          BIC      r1,r1,r8
0000ac  6001              STR      r1,[r0,#0]
;;;4124   				xReturn = pdTRUE;
0000ae  2601              MOVS     r6,#1
                  |L43.176|
;;;4125   			}
;;;4126   
;;;4127   			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
0000b0  2000              MOVS     r0,#0
0000b2  4904              LDR      r1,|L43.196|
0000b4  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
0000b6  f8810050          STRB     r0,[r1,#0x50]
;;;4128   		}
;;;4129   		taskEXIT_CRITICAL();
0000ba  f7fffffe          BL       vPortExitCritical
;;;4130   
;;;4131   		return xReturn;
0000be  4630              MOV      r0,r6
;;;4132   	}
0000c0  e8bd87f0          POP      {r4-r10,pc}
;;;4133   
                          ENDP

                  |L43.196|
                          DCD      pxCurrentTCB
                  |L43.200|
                          DCD      uxTopReadyPriority
                  |L43.204|
                          DCD      xSuspendedTaskList
                  |L43.208|
                          DCD      xTickCount

                          AREA ||i.xTaskPriorityDisinherit||, CODE, READONLY, ALIGN=2

                  xTaskPriorityDisinherit PROC
;;;3483   
;;;3484   	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
000000  b570              PUSH     {r4-r6,lr}
;;;3485   	{
000002  4605              MOV      r5,r0
;;;3486   	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
000004  462c              MOV      r4,r5
;;;3487   	BaseType_t xReturn = pdFALSE;
000006  2600              MOVS     r6,#0
;;;3488   
;;;3489   		if( pxMutexHolder != NULL )
000008  2d00              CMP      r5,#0
00000a  d047              BEQ      |L44.156|
;;;3490   		{
;;;3491   			/* A task can only have an inherited priority if it holds the mutex.
;;;3492   			If the mutex is held by a task then it cannot be given from an
;;;3493   			interrupt, and if a mutex is given by the holding task then it must
;;;3494   			be the running state task. */
;;;3495   			configASSERT( pxTCB == pxCurrentTCB );
00000c  4824              LDR      r0,|L44.160|
00000e  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000010  4284              CMP      r4,r0
000012  d101              BNE      |L44.24|
000014  2001              MOVS     r0,#1
000016  e000              B        |L44.26|
                  |L44.24|
000018  2000              MOVS     r0,#0
                  |L44.26|
00001a  b918              CBNZ     r0,|L44.36|
00001c  f7fffffe          BL       ulPortSetInterruptMask
000020  bf00              NOP      
                  |L44.34|
000022  e7fe              B        |L44.34|
                  |L44.36|
;;;3496   
;;;3497   			configASSERT( pxTCB->uxMutexesHeld );
000024  6ca0              LDR      r0,[r4,#0x48]
000026  b918              CBNZ     r0,|L44.48|
000028  f7fffffe          BL       ulPortSetInterruptMask
00002c  bf00              NOP      
                  |L44.46|
00002e  e7fe              B        |L44.46|
                  |L44.48|
;;;3498   			( pxTCB->uxMutexesHeld )--;
000030  6ca0              LDR      r0,[r4,#0x48]
000032  1e40              SUBS     r0,r0,#1
000034  64a0              STR      r0,[r4,#0x48]
;;;3499   
;;;3500   			/* Has the holder of the mutex inherited the priority of another
;;;3501   			task? */
;;;3502   			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
000036  6c61              LDR      r1,[r4,#0x44]
000038  6ae0              LDR      r0,[r4,#0x2c]
00003a  4288              CMP      r0,r1
00003c  d02e              BEQ      |L44.156|
;;;3503   			{
;;;3504   				/* Only disinherit if no other mutexes are held. */
;;;3505   				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
00003e  6ca0              LDR      r0,[r4,#0x48]
000040  bb60              CBNZ     r0,|L44.156|
;;;3506   				{
;;;3507   					/* A task can only have an inherited priority if it holds
;;;3508   					the mutex.  If the mutex is held by a task then it cannot be
;;;3509   					given from an interrupt, and if a mutex is given by the
;;;3510   					holding	task then it must be the running state task.  Remove
;;;3511   					the	holding task from the ready	list. */
;;;3512   					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
000042  1d20              ADDS     r0,r4,#4
000044  f7fffffe          BL       uxListRemove
000048  b978              CBNZ     r0,|L44.106|
;;;3513   					{
;;;3514   						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
00004a  6ae0              LDR      r0,[r4,#0x2c]
00004c  eb000080          ADD      r0,r0,r0,LSL #2
000050  4914              LDR      r1,|L44.164|
000052  f8510020          LDR      r0,[r1,r0,LSL #2]
000056  b940              CBNZ     r0,|L44.106|
000058  f894102c          LDRB     r1,[r4,#0x2c]
00005c  2001              MOVS     r0,#1
00005e  4088              LSLS     r0,r0,r1
000060  4911              LDR      r1,|L44.168|
000062  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000064  4381              BICS     r1,r1,r0
000066  4810              LDR      r0,|L44.168|
000068  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L44.106|
;;;3515   					}
;;;3516   					else
;;;3517   					{
;;;3518   						mtCOVERAGE_TEST_MARKER();
;;;3519   					}
;;;3520   
;;;3521   					/* Disinherit the priority before adding the task into the
;;;3522   					new	ready list. */
;;;3523   					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
;;;3524   					pxTCB->uxPriority = pxTCB->uxBasePriority;
00006a  6c60              LDR      r0,[r4,#0x44]
00006c  62e0              STR      r0,[r4,#0x2c]
;;;3525   
;;;3526   					/* Reset the event list item value.  It cannot be in use for
;;;3527   					any other purpose if this task is running, and it must be
;;;3528   					running to give back the mutex. */
;;;3529   					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
00006e  6ae0              LDR      r0,[r4,#0x2c]
000070  f1c00006          RSB      r0,r0,#6
000074  61a0              STR      r0,[r4,#0x18]
;;;3530   					prvAddTaskToReadyList( pxTCB );
000076  f894102c          LDRB     r1,[r4,#0x2c]
00007a  2001              MOVS     r0,#1
00007c  4088              LSLS     r0,r0,r1
00007e  490a              LDR      r1,|L44.168|
000080  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000082  4308              ORRS     r0,r0,r1
000084  4908              LDR      r1,|L44.168|
000086  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000088  6ae1              LDR      r1,[r4,#0x2c]
00008a  eb010181          ADD      r1,r1,r1,LSL #2
00008e  4a05              LDR      r2,|L44.164|
000090  eb020081          ADD      r0,r2,r1,LSL #2
000094  1d21              ADDS     r1,r4,#4
000096  f7fffffe          BL       vListInsertEnd
;;;3531   
;;;3532   					/* Return true to indicate that a context switch is required.
;;;3533   					This is only actually required in the corner case whereby
;;;3534   					multiple mutexes were held and the mutexes were given back
;;;3535   					in an order different to that in which they were taken.
;;;3536   					If a context switch did not occur when the first mutex was
;;;3537   					returned, even if a task was waiting on it, then a context
;;;3538   					switch should occur when the last mutex is returned whether
;;;3539   					a task is waiting on it or not. */
;;;3540   					xReturn = pdTRUE;
00009a  2601              MOVS     r6,#1
                  |L44.156|
;;;3541   				}
;;;3542   				else
;;;3543   				{
;;;3544   					mtCOVERAGE_TEST_MARKER();
;;;3545   				}
;;;3546   			}
;;;3547   			else
;;;3548   			{
;;;3549   				mtCOVERAGE_TEST_MARKER();
;;;3550   			}
;;;3551   		}
;;;3552   		else
;;;3553   		{
;;;3554   			mtCOVERAGE_TEST_MARKER();
;;;3555   		}
;;;3556   
;;;3557   		return xReturn;
00009c  4630              MOV      r0,r6
;;;3558   	}
00009e  bd70              POP      {r4-r6,pc}
;;;3559   
                          ENDP

                  |L44.160|
                          DCD      pxCurrentTCB
                  |L44.164|
                          DCD      pxReadyTasksLists
                  |L44.168|
                          DCD      uxTopReadyPriority

                          AREA ||i.xTaskRemoveFromEventList||, CODE, READONLY, ALIGN=2

                  xTaskRemoveFromEventList PROC
;;;2464   
;;;2465   BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
000000  b570              PUSH     {r4-r6,lr}
;;;2466   {
000002  4606              MOV      r6,r0
;;;2467   TCB_t *pxUnblockedTCB;
;;;2468   BaseType_t xReturn;
;;;2469   
;;;2470   	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
;;;2471   	called from a critical section within an ISR. */
;;;2472   
;;;2473   	/* The event list is sorted in priority order, so the first in the list can
;;;2474   	be removed as it is known to be the highest priority.  Remove the TCB from
;;;2475   	the delayed list, and add it to the ready list.
;;;2476   
;;;2477   	If an event is for a queue that is locked then this function will never
;;;2478   	get called - the lock count on the queue will get modified instead.  This
;;;2479   	means exclusive access to the event list is guaranteed here.
;;;2480   
;;;2481   	This function assumes that a check has already been made to ensure that
;;;2482   	pxEventList is not empty. */
;;;2483   	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
000004  68f0              LDR      r0,[r6,#0xc]
000006  68c4              LDR      r4,[r0,#0xc]
;;;2484   	configASSERT( pxUnblockedTCB );
000008  b91c              CBNZ     r4,|L45.18|
00000a  f7fffffe          BL       ulPortSetInterruptMask
00000e  bf00              NOP      
                  |L45.16|
000010  e7fe              B        |L45.16|
                  |L45.18|
;;;2485   	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
000012  f1040018          ADD      r0,r4,#0x18
000016  f7fffffe          BL       uxListRemove
;;;2486   
;;;2487   	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
00001a  4816              LDR      r0,|L45.116|
00001c  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00001e  b9a8              CBNZ     r0,|L45.76|
;;;2488   	{
;;;2489   		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
000020  1d20              ADDS     r0,r4,#4
000022  f7fffffe          BL       uxListRemove
;;;2490   		prvAddTaskToReadyList( pxUnblockedTCB );
000026  f894102c          LDRB     r1,[r4,#0x2c]
00002a  2001              MOVS     r0,#1
00002c  4088              LSLS     r0,r0,r1
00002e  4912              LDR      r1,|L45.120|
000030  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000032  4308              ORRS     r0,r0,r1
000034  4910              LDR      r1,|L45.120|
000036  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000038  6ae1              LDR      r1,[r4,#0x2c]
00003a  eb010181          ADD      r1,r1,r1,LSL #2
00003e  4a0f              LDR      r2,|L45.124|
000040  eb020081          ADD      r0,r2,r1,LSL #2
000044  1d21              ADDS     r1,r4,#4
000046  f7fffffe          BL       vListInsertEnd
00004a  e004              B        |L45.86|
                  |L45.76|
;;;2491   	}
;;;2492   	else
;;;2493   	{
;;;2494   		/* The delayed and ready lists cannot be accessed, so hold this task
;;;2495   		pending until the scheduler is resumed. */
;;;2496   		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
00004c  f1040118          ADD      r1,r4,#0x18
000050  480b              LDR      r0,|L45.128|
000052  f7fffffe          BL       vListInsertEnd
                  |L45.86|
;;;2497   	}
;;;2498   
;;;2499   	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
000056  490b              LDR      r1,|L45.132|
000058  6ae0              LDR      r0,[r4,#0x2c]
00005a  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
00005c  6ac9              LDR      r1,[r1,#0x2c]
00005e  4288              CMP      r0,r1
000060  d904              BLS      |L45.108|
;;;2500   	{
;;;2501   		/* Return true if the task removed from the event list has a higher
;;;2502   		priority than the calling task.  This allows the calling task to know if
;;;2503   		it should force a context switch now. */
;;;2504   		xReturn = pdTRUE;
000062  2501              MOVS     r5,#1
;;;2505   
;;;2506   		/* Mark that a yield is pending in case the user is not using the
;;;2507   		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
;;;2508   		xYieldPending = pdTRUE;
000064  2001              MOVS     r0,#1
000066  4908              LDR      r1,|L45.136|
000068  6008              STR      r0,[r1,#0]  ; xYieldPending
00006a  e000              B        |L45.110|
                  |L45.108|
;;;2509   	}
;;;2510   	else
;;;2511   	{
;;;2512   		xReturn = pdFALSE;
00006c  2500              MOVS     r5,#0
                  |L45.110|
;;;2513   	}
;;;2514   
;;;2515   	#if( configUSE_TICKLESS_IDLE != 0 )
;;;2516   	{
;;;2517   		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
;;;2518   		might be set to the blocked task's time out time.  If the task is
;;;2519   		unblocked for a reason other than a timeout xNextTaskUnblockTime is
;;;2520   		normally left unchanged, because it is automatically reset to a new
;;;2521   		value when the tick count equals xNextTaskUnblockTime.  However if
;;;2522   		tickless idling is used it might be more important to enter sleep mode
;;;2523   		at the earliest possible time - so reset xNextTaskUnblockTime here to
;;;2524   		ensure it is updated at the earliest possible time. */
;;;2525   		prvResetNextTaskUnblockTime();
;;;2526   	}
;;;2527   	#endif
;;;2528   
;;;2529   	return xReturn;
00006e  4628              MOV      r0,r5
;;;2530   }
000070  bd70              POP      {r4-r6,pc}
;;;2531   /*-----------------------------------------------------------*/
                          ENDP

000072  0000              DCW      0x0000
                  |L45.116|
                          DCD      uxSchedulerSuspended
                  |L45.120|
                          DCD      uxTopReadyPriority
                  |L45.124|
                          DCD      pxReadyTasksLists
                  |L45.128|
                          DCD      xPendingReadyList
                  |L45.132|
                          DCD      pxCurrentTCB
                  |L45.136|
                          DCD      xYieldPending

                          AREA ||i.xTaskRemoveFromUnorderedEventList||, CODE, READONLY, ALIGN=2

                  xTaskRemoveFromUnorderedEventList PROC
;;;2532   
;;;2533   BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2534   {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
;;;2535   TCB_t *pxUnblockedTCB;
;;;2536   BaseType_t xReturn;
;;;2537   
;;;2538   	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
;;;2539   	the event flags implementation. */
;;;2540   	configASSERT( uxSchedulerSuspended != pdFALSE );
000008  481d              LDR      r0,|L46.128|
00000a  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00000c  b108              CBZ      r0,|L46.18|
00000e  2001              MOVS     r0,#1
000010  e000              B        |L46.20|
                  |L46.18|
000012  2000              MOVS     r0,#0
                  |L46.20|
000014  b918              CBNZ     r0,|L46.30|
000016  f7fffffe          BL       ulPortSetInterruptMask
00001a  bf00              NOP      
                  |L46.28|
00001c  e7fe              B        |L46.28|
                  |L46.30|
;;;2541   
;;;2542   	/* Store the new item value in the event list. */
;;;2543   	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
00001e  f0474000          ORR      r0,r7,#0x80000000
000022  6028              STR      r0,[r5,#0]
;;;2544   
;;;2545   	/* Remove the event list form the event flag.  Interrupts do not access
;;;2546   	event flags. */
;;;2547   	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
000024  68ec              LDR      r4,[r5,#0xc]
;;;2548   	configASSERT( pxUnblockedTCB );
000026  b91c              CBNZ     r4,|L46.48|
000028  f7fffffe          BL       ulPortSetInterruptMask
00002c  bf00              NOP      
                  |L46.46|
00002e  e7fe              B        |L46.46|
                  |L46.48|
;;;2549   	( void ) uxListRemove( pxEventListItem );
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       uxListRemove
;;;2550   
;;;2551   	/* Remove the task from the delayed list and add it to the ready list.  The
;;;2552   	scheduler is suspended so interrupts will not be accessing the ready
;;;2553   	lists. */
;;;2554   	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
000036  1d20              ADDS     r0,r4,#4
000038  f7fffffe          BL       uxListRemove
;;;2555   	prvAddTaskToReadyList( pxUnblockedTCB );
00003c  f894102c          LDRB     r1,[r4,#0x2c]
000040  2001              MOVS     r0,#1
000042  4088              LSLS     r0,r0,r1
000044  490f              LDR      r1,|L46.132|
000046  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000048  4308              ORRS     r0,r0,r1
00004a  490e              LDR      r1,|L46.132|
00004c  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
00004e  6ae1              LDR      r1,[r4,#0x2c]
000050  eb010181          ADD      r1,r1,r1,LSL #2
000054  4a0c              LDR      r2,|L46.136|
000056  eb020081          ADD      r0,r2,r1,LSL #2
00005a  1d21              ADDS     r1,r4,#4
00005c  f7fffffe          BL       vListInsertEnd
;;;2556   
;;;2557   	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
000060  490a              LDR      r1,|L46.140|
000062  6ae0              LDR      r0,[r4,#0x2c]
000064  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000066  6ac9              LDR      r1,[r1,#0x2c]
000068  4288              CMP      r0,r1
00006a  d904              BLS      |L46.118|
;;;2558   	{
;;;2559   		/* Return true if the task removed from the event list has
;;;2560   		a higher priority than the calling task.  This allows
;;;2561   		the calling task to know if it should force a context
;;;2562   		switch now. */
;;;2563   		xReturn = pdTRUE;
00006c  2601              MOVS     r6,#1
;;;2564   
;;;2565   		/* Mark that a yield is pending in case the user is not using the
;;;2566   		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
;;;2567   		xYieldPending = pdTRUE;
00006e  2001              MOVS     r0,#1
000070  4907              LDR      r1,|L46.144|
000072  6008              STR      r0,[r1,#0]  ; xYieldPending
000074  e000              B        |L46.120|
                  |L46.118|
;;;2568   	}
;;;2569   	else
;;;2570   	{
;;;2571   		xReturn = pdFALSE;
000076  2600              MOVS     r6,#0
                  |L46.120|
;;;2572   	}
;;;2573   
;;;2574   	return xReturn;
000078  4630              MOV      r0,r6
;;;2575   }
00007a  e8bd81f0          POP      {r4-r8,pc}
;;;2576   /*-----------------------------------------------------------*/
                          ENDP

00007e  0000              DCW      0x0000
                  |L46.128|
                          DCD      uxSchedulerSuspended
                  |L46.132|
                          DCD      uxTopReadyPriority
                  |L46.136|
                          DCD      pxReadyTasksLists
                  |L46.140|
                          DCD      pxCurrentTCB
                  |L46.144|
                          DCD      xYieldPending

                          AREA ||i.xTaskResumeAll||, CODE, READONLY, ALIGN=2

                  xTaskResumeAll PROC
;;;1670   
;;;1671   BaseType_t xTaskResumeAll( void )
000000  b570              PUSH     {r4-r6,lr}
;;;1672   {
;;;1673   TCB_t *pxTCB;
;;;1674   BaseType_t xAlreadyYielded = pdFALSE;
000002  2500              MOVS     r5,#0
;;;1675   
;;;1676   	/* If uxSchedulerSuspended is zero then this function does not match a
;;;1677   	previous call to vTaskSuspendAll(). */
;;;1678   	configASSERT( uxSchedulerSuspended );
000004  4830              LDR      r0,|L47.200|
000006  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000008  b918              CBNZ     r0,|L47.18|
00000a  f7fffffe          BL       ulPortSetInterruptMask
00000e  bf00              NOP      
                  |L47.16|
000010  e7fe              B        |L47.16|
                  |L47.18|
;;;1679   
;;;1680   	/* It is possible that an ISR caused a task to be removed from an event
;;;1681   	list while the scheduler was suspended.  If this was the case then the
;;;1682   	removed task will have been added to the xPendingReadyList.  Once the
;;;1683   	scheduler has been resumed it is safe to move all the pending ready
;;;1684   	tasks from this list into their appropriate ready list. */
;;;1685   	taskENTER_CRITICAL();
000012  f7fffffe          BL       vPortEnterCritical
;;;1686   	{
;;;1687   		--uxSchedulerSuspended;
000016  482c              LDR      r0,|L47.200|
000018  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00001a  1e40              SUBS     r0,r0,#1
00001c  492a              LDR      r1,|L47.200|
00001e  6008              STR      r0,[r1,#0]  ; uxSchedulerSuspended
;;;1688   
;;;1689   		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000020  4608              MOV      r0,r1
000022  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000024  2800              CMP      r0,#0
000026  d14b              BNE      |L47.192|
;;;1690   		{
;;;1691   			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
000028  4828              LDR      r0,|L47.204|
00002a  6800              LDR      r0,[r0,#0]  ; uxCurrentNumberOfTasks
00002c  2800              CMP      r0,#0
00002e  d047              BEQ      |L47.192|
;;;1692   			{
;;;1693   				/* Move any readied tasks from the pending list into the
;;;1694   				appropriate ready list. */
;;;1695   				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
000030  e024              B        |L47.124|
                  |L47.50|
;;;1696   				{
;;;1697   					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
000032  4827              LDR      r0,|L47.208|
000034  68c0              LDR      r0,[r0,#0xc]
000036  68c4              LDR      r4,[r0,#0xc]
;;;1698   					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
000038  f1040018          ADD      r0,r4,#0x18
00003c  f7fffffe          BL       uxListRemove
;;;1699   					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
000040  1d20              ADDS     r0,r4,#4
000042  f7fffffe          BL       uxListRemove
;;;1700   					prvAddTaskToReadyList( pxTCB );
000046  f894102c          LDRB     r1,[r4,#0x2c]
00004a  2001              MOVS     r0,#1
00004c  4088              LSLS     r0,r0,r1
00004e  4921              LDR      r1,|L47.212|
000050  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000052  4308              ORRS     r0,r0,r1
000054  491f              LDR      r1,|L47.212|
000056  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000058  6ae1              LDR      r1,[r4,#0x2c]
00005a  eb010181          ADD      r1,r1,r1,LSL #2
00005e  4a1e              LDR      r2,|L47.216|
000060  eb020081          ADD      r0,r2,r1,LSL #2
000064  1d21              ADDS     r1,r4,#4
000066  f7fffffe          BL       vListInsertEnd
;;;1701   
;;;1702   					/* If the moved task has a priority higher than the current
;;;1703   					task then a yield must be performed. */
;;;1704   					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
00006a  491c              LDR      r1,|L47.220|
00006c  6ae0              LDR      r0,[r4,#0x2c]
00006e  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000070  6ac9              LDR      r1,[r1,#0x2c]
000072  4288              CMP      r0,r1
000074  d302              BCC      |L47.124|
;;;1705   					{
;;;1706   						xYieldPending = pdTRUE;
000076  2001              MOVS     r0,#1
000078  4919              LDR      r1,|L47.224|
00007a  6008              STR      r0,[r1,#0]  ; xYieldPending
                  |L47.124|
00007c  4814              LDR      r0,|L47.208|
00007e  6800              LDR      r0,[r0,#0]            ;1695  ; xPendingReadyList
000080  b908              CBNZ     r0,|L47.134|
000082  2001              MOVS     r0,#1                 ;1695
000084  e000              B        |L47.136|
                  |L47.134|
000086  2000              MOVS     r0,#0                 ;1695
                  |L47.136|
000088  2800              CMP      r0,#0                 ;1695
00008a  d0d2              BEQ      |L47.50|
;;;1707   					}
;;;1708   					else
;;;1709   					{
;;;1710   						mtCOVERAGE_TEST_MARKER();
;;;1711   					}
;;;1712   				}
;;;1713   
;;;1714   				/* If any ticks occurred while the scheduler was suspended then
;;;1715   				they should be processed now.  This ensures the tick count does
;;;1716   				not	slip, and that any delayed tasks are resumed at the correct
;;;1717   				time. */
;;;1718   				if( uxPendedTicks > ( UBaseType_t ) 0U )
00008c  4815              LDR      r0,|L47.228|
00008e  6800              LDR      r0,[r0,#0]  ; uxPendedTicks
000090  b178              CBZ      r0,|L47.178|
;;;1719   				{
;;;1720   					while( uxPendedTicks > ( UBaseType_t ) 0U )
000092  e00a              B        |L47.170|
                  |L47.148|
;;;1721   					{
;;;1722   						if( xTaskIncrementTick() != pdFALSE )
000094  f7fffffe          BL       xTaskIncrementTick
000098  b110              CBZ      r0,|L47.160|
;;;1723   						{
;;;1724   							xYieldPending = pdTRUE;
00009a  2001              MOVS     r0,#1
00009c  4910              LDR      r1,|L47.224|
00009e  6008              STR      r0,[r1,#0]  ; xYieldPending
                  |L47.160|
;;;1725   						}
;;;1726   						else
;;;1727   						{
;;;1728   							mtCOVERAGE_TEST_MARKER();
;;;1729   						}
;;;1730   						--uxPendedTicks;
0000a0  4810              LDR      r0,|L47.228|
0000a2  6800              LDR      r0,[r0,#0]  ; uxPendedTicks
0000a4  1e40              SUBS     r0,r0,#1
0000a6  490f              LDR      r1,|L47.228|
0000a8  6008              STR      r0,[r1,#0]  ; uxPendedTicks
                  |L47.170|
0000aa  480e              LDR      r0,|L47.228|
0000ac  6800              LDR      r0,[r0,#0]            ;1720  ; uxPendedTicks
0000ae  2800              CMP      r0,#0                 ;1720
0000b0  d1f0              BNE      |L47.148|
                  |L47.178|
;;;1731   					}
;;;1732   				}
;;;1733   				else
;;;1734   				{
;;;1735   					mtCOVERAGE_TEST_MARKER();
;;;1736   				}
;;;1737   
;;;1738   				if( xYieldPending == pdTRUE )
0000b2  480b              LDR      r0,|L47.224|
0000b4  6800              LDR      r0,[r0,#0]  ; xYieldPending
0000b6  2801              CMP      r0,#1
0000b8  d102              BNE      |L47.192|
;;;1739   				{
;;;1740   					#if( configUSE_PREEMPTION != 0 )
;;;1741   					{
;;;1742   						xAlreadyYielded = pdTRUE;
0000ba  2501              MOVS     r5,#1
;;;1743   					}
;;;1744   					#endif
;;;1745   					taskYIELD_IF_USING_PREEMPTION();
0000bc  f7fffffe          BL       vPortYield
                  |L47.192|
;;;1746   				}
;;;1747   				else
;;;1748   				{
;;;1749   					mtCOVERAGE_TEST_MARKER();
;;;1750   				}
;;;1751   			}
;;;1752   		}
;;;1753   		else
;;;1754   		{
;;;1755   			mtCOVERAGE_TEST_MARKER();
;;;1756   		}
;;;1757   	}
;;;1758   	taskEXIT_CRITICAL();
0000c0  f7fffffe          BL       vPortExitCritical
;;;1759   
;;;1760   	return xAlreadyYielded;
0000c4  4628              MOV      r0,r5
;;;1761   }
0000c6  bd70              POP      {r4-r6,pc}
;;;1762   /*-----------------------------------------------------------*/
                          ENDP

                  |L47.200|
                          DCD      uxSchedulerSuspended
                  |L47.204|
                          DCD      uxCurrentNumberOfTasks
                  |L47.208|
                          DCD      xPendingReadyList
                  |L47.212|
                          DCD      uxTopReadyPriority
                  |L47.216|
                          DCD      pxReadyTasksLists
                  |L47.220|
                          DCD      pxCurrentTCB
                  |L47.224|
                          DCD      xYieldPending
                  |L47.228|
                          DCD      uxPendedTicks

                          AREA ||i.xTaskResumeFromISR||, CODE, READONLY, ALIGN=2

                  xTaskResumeFromISR PROC
;;;1472   
;;;1473   	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1474   	{
000004  4605              MOV      r5,r0
;;;1475   	BaseType_t xYieldRequired = pdFALSE;
000006  2600              MOVS     r6,#0
;;;1476   	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
000008  462c              MOV      r4,r5
;;;1477   	UBaseType_t uxSavedInterruptStatus;
;;;1478   
;;;1479   		configASSERT( xTaskToResume );
00000a  b91d              CBNZ     r5,|L48.20|
00000c  f7fffffe          BL       ulPortSetInterruptMask
000010  bf00              NOP      
                  |L48.18|
000012  e7fe              B        |L48.18|
                  |L48.20|
;;;1480   
;;;1481   		/* RTOS ports that support interrupt nesting have the concept of a
;;;1482   		maximum	system call (or maximum API call) interrupt priority.
;;;1483   		Interrupts that are	above the maximum system call priority are keep
;;;1484   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;1485   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;1486   		is defined in FreeRTOSConfig.h then
;;;1487   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1488   		failure if a FreeRTOS API function is called from an interrupt that has
;;;1489   		been assigned a priority above the configured maximum system call
;;;1490   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;1491   		from interrupts	that have been assigned a priority at or (logically)
;;;1492   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;1493   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;1494   		simple as possible.  More information (albeit Cortex-M specific) is
;;;1495   		provided on the following link:
;;;1496   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1497   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
000014  f7fffffe          BL       vPortValidateInterruptPriority
;;;1498   
;;;1499   		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
000018  f7fffffe          BL       ulPortSetInterruptMask
00001c  4607              MOV      r7,r0
;;;1500   		{
;;;1501   			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       prvTaskIsTaskSuspended
000024  2801              CMP      r0,#1
000026  d124              BNE      |L48.114|
;;;1502   			{
;;;1503   				traceTASK_RESUME_FROM_ISR( pxTCB );
;;;1504   
;;;1505   				/* Check the ready lists can be accessed. */
;;;1506   				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000028  4815              LDR      r0,|L48.128|
00002a  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00002c  b9e0              CBNZ     r0,|L48.104|
;;;1507   				{
;;;1508   					/* Ready lists can be accessed so move the task from the
;;;1509   					suspended list to the ready list directly. */
;;;1510   					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
00002e  4915              LDR      r1,|L48.132|
000030  6ae0              LDR      r0,[r4,#0x2c]
000032  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000034  6ac9              LDR      r1,[r1,#0x2c]
000036  4288              CMP      r0,r1
000038  d300              BCC      |L48.60|
;;;1511   					{
;;;1512   						xYieldRequired = pdTRUE;
00003a  2601              MOVS     r6,#1
                  |L48.60|
;;;1513   					}
;;;1514   					else
;;;1515   					{
;;;1516   						mtCOVERAGE_TEST_MARKER();
;;;1517   					}
;;;1518   
;;;1519   					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
00003c  1d20              ADDS     r0,r4,#4
00003e  f7fffffe          BL       uxListRemove
;;;1520   					prvAddTaskToReadyList( pxTCB );
000042  f894102c          LDRB     r1,[r4,#0x2c]
000046  2001              MOVS     r0,#1
000048  4088              LSLS     r0,r0,r1
00004a  490f              LDR      r1,|L48.136|
00004c  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
00004e  4308              ORRS     r0,r0,r1
000050  490d              LDR      r1,|L48.136|
000052  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000054  6ae1              LDR      r1,[r4,#0x2c]
000056  eb010181          ADD      r1,r1,r1,LSL #2
00005a  4a0c              LDR      r2,|L48.140|
00005c  eb020081          ADD      r0,r2,r1,LSL #2
000060  1d21              ADDS     r1,r4,#4
000062  f7fffffe          BL       vListInsertEnd
000066  e004              B        |L48.114|
                  |L48.104|
;;;1521   				}
;;;1522   				else
;;;1523   				{
;;;1524   					/* The delayed or ready lists cannot be accessed so the task
;;;1525   					is held in the pending ready list until the scheduler is
;;;1526   					unsuspended. */
;;;1527   					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
000068  f1040118          ADD      r1,r4,#0x18
00006c  4808              LDR      r0,|L48.144|
00006e  f7fffffe          BL       vListInsertEnd
                  |L48.114|
;;;1528   				}
;;;1529   			}
;;;1530   			else
;;;1531   			{
;;;1532   				mtCOVERAGE_TEST_MARKER();
;;;1533   			}
;;;1534   		}
;;;1535   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
000072  4638              MOV      r0,r7
000074  f7fffffe          BL       vPortClearInterruptMask
;;;1536   
;;;1537   		return xYieldRequired;
000078  4630              MOV      r0,r6
;;;1538   	}
00007a  e8bd81f0          POP      {r4-r8,pc}
;;;1539   
                          ENDP

00007e  0000              DCW      0x0000
                  |L48.128|
                          DCD      uxSchedulerSuspended
                  |L48.132|
                          DCD      pxCurrentTCB
                  |L48.136|
                          DCD      uxTopReadyPriority
                  |L48.140|
                          DCD      pxReadyTasksLists
                  |L48.144|
                          DCD      xPendingReadyList

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pxReadyTasksLists
                          %        120
                  xDelayedTaskList1
                          %        20
                  xDelayedTaskList2
                          %        20
                  xPendingReadyList
                          %        20
                  xTasksWaitingTermination
                          %        20
                  xSuspendedTaskList
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  pxCurrentTCB
                          DCD      0x00000000
                  pxDelayedTaskList
                          DCD      0x00000000
                  pxOverflowDelayedTaskList
                          DCD      0x00000000
                  uxTasksDeleted
                          DCD      0x00000000
                  uxCurrentNumberOfTasks
                          DCD      0x00000000
                  xTickCount
                          DCD      0x00000000
                  uxTopReadyPriority
                          DCD      0x00000000
                  xSchedulerRunning
                          DCD      0x00000000
                  uxPendedTicks
                          DCD      0x00000000
                  xYieldPending
                          DCD      0x00000000
                  xNumOfOverflows
                          DCD      0x00000000
                  uxTaskNumber
                          DCD      0x00000000
                  xNextTaskUnblockTime
                          DCD      0x00000000
                  uxSchedulerSuspended
                          DCD      0x00000000
