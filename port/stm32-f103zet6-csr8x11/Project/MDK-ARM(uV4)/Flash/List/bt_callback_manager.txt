; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bt_callback_manager.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bt_callback_manager.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\Middleware\blue_angel\inc -I..\..\Middleware\bt_callback_manager -I..\..\Middleware\blue_angel\btif -I..\..\Middleware\blue_angel\common -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\src\common -I..\..\Middleware\blue_angel\src\inc -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\platform\rtos -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\ut_manager\Cunit\Headers -I..\..\Middleware\ut_manager\Cunit\interface -I..\..\Middleware\blue_angel\platform\test -I..\..\Middleware\blue_angel\driver -I..\..\Middleware\blue_angel\src\core\hci -I..\..\User\bt\inc -I..\..\Middleware\bt_callback_manager -I..\..\Middleware\at_command -I..\..\Middleware\blue_angel\src\core\gap -I..\..\Middleware\blue_angel\src\core\l2cap -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=522 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DNDEBUG --omf_browse=.\flash\obj\bt_callback_manager.crf ..\..\Middleware\bt_callback_manager\bt_callback_manager.c]
                          THUMB

                          AREA ||i.bt_app_event_callback||, CODE, READONLY, ALIGN=2

                  bt_app_event_callback PROC
;;;64     
;;;65     void bt_app_event_callback(bt_msg_type_t msg, bt_status_t status, void *buf)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;66     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;67     	uint32_t i = 0;	
00000a  2400              MOVS     r4,#0
;;;68     	uint32_t module_mask = BT_MODULE_MASK(msg);
00000c  0ee9              LSRS     r1,r5,#27
00000e  2001              MOVS     r0,#1
000010  fa00f801          LSL      r8,r0,r1
;;;69     	switch (msg) {
000014  bb2d              CBNZ     r5,|L1.98|
;;;70     		case BT_CALLBACK_TYPE_APP_EVENT:
;;;71     			for (i = 0; i < BT_CALLBACK_TYPE_MAX; i++) {
000016  bf00              NOP      
000018  e01f              B        |L1.90|
                  |L1.26|
;;;72     				if (callback_table[i].in_use && callback_table[i].callback && callback_table[i].mask & module_mask) {
00001a  eb040044          ADD      r0,r4,r4,LSL #1
00001e  4913              LDR      r1,|L1.108|
000020  f8110020          LDRB     r0,[r1,r0,LSL #2]
000024  b1c0              CBZ      r0,|L1.88|
000026  eb040044          ADD      r0,r4,r4,LSL #1
00002a  eb010080          ADD      r0,r1,r0,LSL #2
00002e  6880              LDR      r0,[r0,#8]
000030  b190              CBZ      r0,|L1.88|
000032  eb040044          ADD      r0,r4,r4,LSL #1
000036  eb010080          ADD      r0,r1,r0,LSL #2
00003a  6840              LDR      r0,[r0,#4]
00003c  ea000008          AND      r0,r0,r8
000040  b150              CBZ      r0,|L1.88|
;;;73     					status = callback_table[i].callback(msg, status, buf);
000042  eb040044          ADD      r0,r4,r4,LSL #1
000046  eb010080          ADD      r0,r1,r0,LSL #2
00004a  463a              MOV      r2,r7
00004c  4631              MOV      r1,r6
00004e  6883              LDR      r3,[r0,#8]
000050  4628              MOV      r0,r5
000052  4798              BLX      r3
000054  4606              MOV      r6,r0
;;;74     					break;
000056  e002              B        |L1.94|
                  |L1.88|
000058  1c64              ADDS     r4,r4,#1              ;71
                  |L1.90|
00005a  2c1f              CMP      r4,#0x1f              ;71
00005c  d3dd              BCC      |L1.26|
                  |L1.94|
00005e  bf00              NOP      
;;;75     				}
;;;76     			}
;;;77     			break;
000060  e000              B        |L1.100|
                  |L1.98|
;;;78     		default:
;;;79     			break;
000062  bf00              NOP      
                  |L1.100|
000064  bf00              NOP                            ;77
;;;80     	}
;;;81     }
000066  e8bd81f0          POP      {r4-r8,pc}
;;;82     
                          ENDP

00006a  0000              DCW      0x0000
                  |L1.108|
                          DCD      callback_table

                          AREA ||i.bt_callback_manager_deregister_callback||, CODE, READONLY, ALIGN=2

                  bt_callback_manager_deregister_callback PROC
;;;40     
;;;41     bt_status_t bt_callback_manager_deregister_callback(bt_callback_type_t type, bt_callback_module_mask_t module_mask, bt_callback_manager_cb_t callback)
000000  b5f0              PUSH     {r4-r7,lr}
;;;42     {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;43     	bt_status_t status = BT_STATUS_FAIL;
000006  2002              MOVS     r0,#2
;;;44     	uint32_t i = 0;
000008  2100              MOVS     r1,#0
;;;45     	switch (type) {
00000a  bb2b              CBNZ     r3,|L2.88|
;;;46     		case BT_CALLBACK_TYPE_APP_EVENT:
;;;47     			for (i = 0; i < BT_CALLBACK_TYPE_MAX; i++) {
00000c  bf00              NOP      
00000e  e01f              B        |L2.80|
                  |L2.16|
;;;48     				if (callback_table[i].in_use && callback_table[i].callback && callback) {
000010  eb010541          ADD      r5,r1,r1,LSL #1
000014  4e12              LDR      r6,|L2.96|
000016  f8165025          LDRB     r5,[r6,r5,LSL #2]
00001a  b1c5              CBZ      r5,|L2.78|
00001c  eb010541          ADD      r5,r1,r1,LSL #1
000020  eb060585          ADD      r5,r6,r5,LSL #2
000024  68ad              LDR      r5,[r5,#8]
000026  b195              CBZ      r5,|L2.78|
000028  b18a              CBZ      r2,|L2.78|
;;;49     					callback_table[i].in_use = false;
00002a  2500              MOVS     r5,#0
00002c  eb010641          ADD      r6,r1,r1,LSL #1
000030  4f0b              LDR      r7,|L2.96|
000032  f8075026          STRB     r5,[r7,r6,LSL #2]
;;;50     					callback_table[i].mask = 0;
000036  eb010641          ADD      r6,r1,r1,LSL #1
00003a  eb070686          ADD      r6,r7,r6,LSL #2
00003e  6075              STR      r5,[r6,#4]
;;;51     					callback_table[i].callback = NULL;
000040  eb010641          ADD      r6,r1,r1,LSL #1
000044  eb070686          ADD      r6,r7,r6,LSL #2
000048  60b5              STR      r5,[r6,#8]
;;;52     					status = BT_STATUS_SUCCESS;
00004a  2001              MOVS     r0,#1
;;;53     					break;
00004c  e002              B        |L2.84|
                  |L2.78|
00004e  1c49              ADDS     r1,r1,#1              ;47
                  |L2.80|
000050  291f              CMP      r1,#0x1f              ;47
000052  d3dd              BCC      |L2.16|
                  |L2.84|
000054  bf00              NOP      
;;;54     				}
;;;55     			}
;;;56     			break;
000056  e000              B        |L2.90|
                  |L2.88|
;;;57     		default:
;;;58     			break;
000058  bf00              NOP      
                  |L2.90|
00005a  bf00              NOP                            ;56
;;;59     	}
;;;60     
;;;61     	return status;
;;;62     
;;;63     }
00005c  bdf0              POP      {r4-r7,pc}
;;;64     
                          ENDP

00005e  0000              DCW      0x0000
                  |L2.96|
                          DCD      callback_table

                          AREA ||i.bt_callback_manager_register_callback||, CODE, READONLY, ALIGN=2

                  bt_callback_manager_register_callback PROC
;;;17     
;;;18     bt_status_t bt_callback_manager_register_callback(bt_callback_type_t type, bt_callback_module_mask_t module_mask, bt_callback_manager_cb_t callback)
000000  b5f0              PUSH     {r4-r7,lr}
;;;19     {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;20     	bt_status_t status = BT_STATUS_FAIL;
000006  2002              MOVS     r0,#2
;;;21     	uint32_t i = 0;
000008  2100              MOVS     r1,#0
;;;22     	switch (type) {
00000a  bb63              CBNZ     r3,|L3.102|
;;;23     		case BT_CALLBACK_TYPE_APP_EVENT:
;;;24     			for (i = 0; i < BT_CALLBACK_TYPE_MAX; i++) {
00000c  bf00              NOP      
00000e  e026              B        |L3.94|
                  |L3.16|
;;;25     				if (!callback_table[i].in_use && callback_table[i].callback == NULL && callback_table[i].mask == 0 && callback) {
000010  eb010541          ADD      r5,r1,r1,LSL #1
000014  4e15              LDR      r6,|L3.108|
000016  f8165025          LDRB     r5,[r6,r5,LSL #2]
00001a  b9fd              CBNZ     r5,|L3.92|
00001c  eb010541          ADD      r5,r1,r1,LSL #1
000020  eb060585          ADD      r5,r6,r5,LSL #2
000024  68ad              LDR      r5,[r5,#8]
000026  b9cd              CBNZ     r5,|L3.92|
000028  eb010541          ADD      r5,r1,r1,LSL #1
00002c  eb060585          ADD      r5,r6,r5,LSL #2
000030  686d              LDR      r5,[r5,#4]
000032  b99d              CBNZ     r5,|L3.92|
000034  b192              CBZ      r2,|L3.92|
;;;26     					callback_table[i].in_use = true;
000036  2501              MOVS     r5,#1
000038  eb010641          ADD      r6,r1,r1,LSL #1
00003c  4f0b              LDR      r7,|L3.108|
00003e  f8075026          STRB     r5,[r7,r6,LSL #2]
;;;27     					callback_table[i].mask = module_mask;
000042  eb010541          ADD      r5,r1,r1,LSL #1
000046  463e              MOV      r6,r7
000048  eb060585          ADD      r5,r6,r5,LSL #2
00004c  606c              STR      r4,[r5,#4]
;;;28     					callback_table[i].callback = callback;
00004e  eb010541          ADD      r5,r1,r1,LSL #1
000052  eb060585          ADD      r5,r6,r5,LSL #2
000056  60aa              STR      r2,[r5,#8]
;;;29     					status = BT_STATUS_SUCCESS;
000058  2001              MOVS     r0,#1
;;;30     					break;
00005a  e002              B        |L3.98|
                  |L3.92|
00005c  1c49              ADDS     r1,r1,#1              ;24
                  |L3.94|
00005e  291f              CMP      r1,#0x1f              ;24
000060  d3d6              BCC      |L3.16|
                  |L3.98|
000062  bf00              NOP      
;;;31     				}
;;;32     			}
;;;33     			break;
000064  e000              B        |L3.104|
                  |L3.102|
;;;34     		default:
;;;35     			break;
000066  bf00              NOP      
                  |L3.104|
000068  bf00              NOP                            ;33
;;;36     	}
;;;37     
;;;38     	return status;
;;;39     }
00006a  bdf0              POP      {r4-r7,pc}
;;;40     
                          ENDP

                  |L3.108|
                          DCD      callback_table

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  callback_table
                          %        372

;*** Start embedded assembler ***

#line 1 "..\\..\\Middleware\\bt_callback_manager\\bt_callback_manager.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_bt_callback_manager_c_7c6fc1aa____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___21_bt_callback_manager_c_7c6fc1aa____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_bt_callback_manager_c_7c6fc1aa____REVSH|
#line 128
|__asm___21_bt_callback_manager_c_7c6fc1aa____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
