L 1 "..\..\FreeRTOS\tasks.c"
N/*
N    FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
N    All rights reserved
N
N    VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
N
N    ***************************************************************************
N    >>!   NOTE: The modification to the GPL is included to allow you to     !<<
N    >>!   distribute a combined work that includes FreeRTOS without being   !<<
N    >>!   obliged to provide the source code for proprietary components     !<<
N    >>!   outside of the FreeRTOS kernel.                                   !<<
N    ***************************************************************************
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  Full license text is available on the following
N    link: http://www.freertos.org/a00114.html
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS provides completely free yet professionally developed,    *
N     *    robust, strictly quality controlled, supported, and cross          *
N     *    platform software that is more than just the market leader, it     *
N     *    is the industry's de facto standard.                               *
N     *                                                                       *
N     *    Help yourself get started quickly while simultaneously helping     *
N     *    to support the FreeRTOS project by purchasing a FreeRTOS           *
N     *    tutorial book, reference manual, or both:                          *
N     *    http://www.FreeRTOS.org/Documentation                              *
N     *                                                                       *
N    ***************************************************************************
N
N    http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
N    the FAQ page "My application does not run, what could be wrong?".  Have you
N    defined configASSERT()?
N
N    http://www.FreeRTOS.org/support - In return for receiving this top quality
N    embedded software for free we request you assist our global community by
N    participating in the support forum.
N
N    http://www.FreeRTOS.org/training - Investing in training allows your team to
N    be as productive as possible as early as possible.  Now you can receive
N    FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
N    Ltd, and the world's leading authority on the world's leading RTOS.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, a DOS
N    compatible FAT file system, and our tiny thread aware UDP/IP stack.
N
N    http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
N    Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
N    Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
N    licenses offer ticketed support, indemnification and commercial middleware.
N
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety
N    engineered and independently SIL3 certified version for use in safety and
N    mission critical applications that require provable dependability.
N
N    1 tab == 4 spaces!
N*/
N
N/* Standard includes. */
N#include <stdlib.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdlib.h" 1
N/* stdlib.h: ANSI draft (X3J11 May 88) library header, section 4.10 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                          */
N/* Copyright 1991-1998,2014 ARM Limited. All rights reserved.       */
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N 
N/*
N * stdlib.h declares four types, several general purpose functions,
N * and defines several macros.
N */
N
N#ifndef __stdlib_h
N#define __stdlib_h
N#define __ARMCLIB_VERSION 5060019
N
N#if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X#if 0L || (1L && !0L)
N  /* armclang and non-strict armcc allow 'long long' in system headers */
N  #define __LONGLONG long long
N#else
S  /* strict armcc has '__int64' */
S  #define __LONGLONG __int64
N#endif
N
N#define _ARMABI __declspec(__nothrow)
N#define _ARMABI_PURE __declspec(__nothrow) __attribute__((const))
N#define _ARMABI_NORETURN __declspec(__nothrow) __declspec(__noreturn)
N#define _ARMABI_THROW
N
N  #ifndef __STDLIB_DECLS
N  #define __STDLIB_DECLS
N
N  /*
N   * Some of these declarations are new in C99.  To access them in C++
N   * you can use -D__USE_C99_STDLIB (or -D__USE_C99ALL).
N   */
N  #ifndef __USE_C99_STDLIB
N    #if defined(__USE_C99_ALL) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X    #if 0L || (1L && 199901L <= 199409L) || (0L && 201103L <= __cplusplus)
S      #define __USE_C99_STDLIB 1
N    #endif
N  #endif
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS ::std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
N  #if !defined(__STRICT_ANSI__)
X  #if !0L
N   /* unconditional in non-strict C for consistency of debug info */
N   #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X   #if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S    typedef unsigned int wchar_t; /* see <stddef.h> */
N   #else
N    typedef unsigned short wchar_t; /* see <stddef.h> */
N   #endif
N  #elif !defined(__wchar_t)
S    #define __wchar_t 1
S   #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S    typedef unsigned int wchar_t; /* see <stddef.h> */
S   #else
S    typedef unsigned short wchar_t; /* see <stddef.h> */
S   #endif
N  #endif
N#endif
N
Ntypedef struct div_t { int quot, rem; } div_t;
N   /* type of the value returned by the div function. */
Ntypedef struct ldiv_t { long int quot, rem; } ldiv_t;
N   /* type of the value returned by the ldiv function. */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || __USE_C99_STDLIB
Ntypedef struct lldiv_t { __LONGLONG quot, rem; } lldiv_t;
Xtypedef struct lldiv_t { long long quot, rem; } lldiv_t;
N   /* type of the value returned by the lldiv function. */
N#endif
N
N#ifdef __EXIT_FAILURE
S#  define EXIT_FAILURE __EXIT_FAILURE
S   /*
S    * an integral expression which may be used as an argument to the exit
S    * function to return unsuccessful termination status to the host
S    * environment.
S    */
N#else
N#  define EXIT_FAILURE 1  /* unixoid */
N#endif
N#define EXIT_SUCCESS 0
N   /*
N    * an integral expression which may be used as an argument to the exit
N    * function to return successful termination status to the host
N    * environment.
N    */
N
N   /*
N    * Defining __USE_ANSI_EXAMPLE_RAND at compile time switches to
N    * the example implementation of rand() and srand() provided in
N    * the ANSI C standard. This implementation is very poor, but is
N    * provided for completeness.
N    */
N#ifdef __USE_ANSI_EXAMPLE_RAND
S#define srand _ANSI_srand
S#define rand _ANSI_rand
S#define RAND_MAX 0x7fff
N#else
N#define RAND_MAX 0x7fffffff
N#endif
N   /*
N    * RAND_MAX: an integral constant expression, the value of which
N    * is the maximum value returned by the rand function.
N    */
Nextern _ARMABI int __aeabi_MB_CUR_MAX(void);
Xextern __declspec(__nothrow) int __aeabi_MB_CUR_MAX(void);
N#define MB_CUR_MAX ( __aeabi_MB_CUR_MAX() )
N   /*
N    * a positive integer expression whose value is the maximum number of bytes
N    * in a multibyte character for the extended character set specified by the
N    * current locale (category LC_CTYPE), and whose value is never greater
N    * than MB_LEN_MAX.
N    */
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain a compliant version of the strtod
N    * family of functions.
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Nextern _ARMABI double atof(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) double atof(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to double
N    * representation.
N    * Returns: the converted value.
N    */
Nextern _ARMABI int atoi(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int atoi(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to int
N    * representation.
N    * Returns: the converted value.
N    */
Nextern _ARMABI long int atol(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int atol(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to long int
N    * representation.
N    * Returns: the converted value.
N    */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || __USE_C99_STDLIB
Nextern _ARMABI __LONGLONG atoll(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long long atoll(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to
N    * long long int representation.
N    * Returns: the converted value.
N    */
N#endif
N
Nextern _ARMABI double strtod(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) double strtod(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to double
N    * representation. First it decomposes the input string into three parts:
N    * an initial, possibly empty, sequence of white-space characters (as
N    * specified by the isspace function), a subject sequence resembling a
N    * floating point constant; and a final string of one or more unrecognised
N    * characters, including the terminating null character of the input string.
N    * Then it attempts to convert the subject sequence to a floating point
N    * number, and returns the result. A pointer to the final string is stored
N    * in the object pointed to by endptr, provided that endptr is not a null
N    * pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned. If the correct value is outside the range of
N    *          representable values, plus or minus HUGE_VAL is returned
N    *          (according to the sign of the value), and the value of the macro
N    *          ERANGE is stored in errno. If the correct value would cause
N    *          underflow, zero is returned and the value of the macro ERANGE is
N    *          stored in errno.
N    */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || __USE_C99_STDLIB
Nextern _ARMABI float strtof(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) float strtof(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
Nextern _ARMABI long double strtold(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long double strtold(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
N   /*
N    * same as strtod, but return float and long double respectively.
N    */
N#endif
Nextern _ARMABI long int strtol(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) long int strtol(const char * __restrict  ,
N                        char ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to long int
N    * representation. First it decomposes the input string into three parts:
N    * an initial, possibly empty, sequence of white-space characters (as
N    * specified by the isspace function), a subject sequence resembling an
N    * integer represented in some radix determined by the value of base, and a
N    * final string of one or more unrecognised characters, including the
N    * terminating null character of the input string. Then it attempts to
N    * convert the subject sequence to an integer, and returns the result.
N    * If the value of base is 0, the expected form of the subject sequence is
N    * that of an integer constant (described in ANSI Draft, section 3.1.3.2),
N    * optionally preceded by a '+' or '-' sign, but not including an integer
N    * suffix. If the value of base is between 2 and 36, the expected form of
N    * the subject sequence is a sequence of letters and digits representing an
N    * integer with the radix specified by base, optionally preceded by a plus
N    * or minus sign, but not including an integer suffix. The letters from a
N    * (or A) through z (or Z) are ascribed the values 10 to 35; only letters
N    * whose ascribed values are less than that of the base are permitted. If
N    * the value of base is 16, the characters 0x or 0X may optionally precede
N    * the sequence of letters and digits following the sign if present.
N    * A pointer to the final string is stored in the object
N    * pointed to by endptr, provided that endptr is not a null pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned and nptr is stored in *endptr.
N    *          If the correct value is outside the range of
N    *          representable values, LONG_MAX or LONG_MIN is returned
N    *          (according to the sign of the value), and the value of the
N    *          macro ERANGE is stored in errno.
N    */
Nextern _ARMABI unsigned long int strtoul(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) unsigned long int strtoul(const char * __restrict  ,
N                                       char ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to unsigned
N    * long int representation. First it decomposes the input string into three
N    * parts: an initial, possibly empty, sequence of white-space characters (as
N    * determined by the isspace function), a subject sequence resembling an
N    * unsigned integer represented in some radix determined by the value of
N    * base, and a final string of one or more unrecognised characters,
N    * including the terminating null character of the input string. Then it
N    * attempts to convert the subject sequence to an unsigned integer, and
N    * returns the result. If the value of base is zero, the expected form of
N    * the subject sequence is that of an integer constant (described in ANSI
N    * Draft, section 3.1.3.2), optionally preceded by a '+' or '-' sign, but
N    * not including an integer suffix. If the value of base is between 2 and
N    * 36, the expected form of the subject sequence is a sequence of letters
N    * and digits representing an integer with the radix specified by base,
N    * optionally preceded by a '+' or '-' sign, but not including an integer
N    * suffix. The letters from a (or A) through z (or Z) stand for the values
N    * 10 to 35; only letters whose ascribed values are less than that of the
N    * base are permitted. If the value of base is 16, the characters 0x or 0X
N    * may optionally precede the sequence of letters and digits following the
N    * sign, if present. A pointer to the final string is stored in the object
N    * pointed to by endptr, provided that endptr is not a null pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned and nptr is stored in *endptr.
N    *          If the correct value is outside the range of
N    *          representable values, ULONG_MAX is returned, and the value of
N    *          the macro ERANGE is stored in errno.
N    */
N
N/* C90 reserves all names beginning with 'str' */
Nextern _ARMABI __LONGLONG strtoll(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) long long strtoll(const char * __restrict  ,
N                                  char ** __restrict /*endptr*/, int /*base*/)
N                          __attribute__((__nonnull__(1)));
N   /*
N    * as strtol but returns a long long int value.  If the correct value is
N    * outside the range of representable values,  LLONG_MAX or LLONG_MIN is
N    * returned (according to the sign of the value), and the value of the
N    * macro ERANGE is stored in errno.
N    */
Nextern _ARMABI unsigned __LONGLONG strtoull(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) unsigned long long strtoull(const char * __restrict  ,
N                                            char ** __restrict /*endptr*/, int /*base*/)
N                                   __attribute__((__nonnull__(1)));
N   /*
N    * as strtoul but returns an unsigned long long int value.  If the correct
N    * value is outside the range of representable values, ULLONG_MAX is returned,
N    * and the value of the macro ERANGE is stored in errno.
N    */
N
Nextern _ARMABI int rand(void);
Xextern __declspec(__nothrow) int rand(void);
N   /*
N    * Computes a sequence of pseudo-random integers in the range 0 to RAND_MAX.
N    * Uses an additive generator (Mitchell & Moore) of the form:
N    *   Xn = (X[n-24] + X[n-55]) MOD 2^31
N    * This is described in section 3.2.2 of Knuth, vol 2. It's period is
N    * in excess of 2^55 and its randomness properties, though unproven, are
N    * conjectured to be good. Empirical testing since 1958 has shown no flaws.
N    * Returns: a pseudo-random integer.
N    */
Nextern _ARMABI void srand(unsigned int /*seed*/);
Xextern __declspec(__nothrow) void srand(unsigned int  );
N   /*
N    * uses its argument as a seed for a new sequence of pseudo-random numbers
N    * to be returned by subsequent calls to rand. If srand is then called with
N    * the same seed value, the sequence of pseudo-random numbers is repeated.
N    * If rand is called before any calls to srand have been made, the same
N    * sequence is generated as when srand is first called with a seed value
N    * of 1.
N    */
N
Nstruct _rand_state { int __x[57]; };
Nextern _ARMABI int _rand_r(struct _rand_state *);
Xextern __declspec(__nothrow) int _rand_r(struct _rand_state *);
Nextern _ARMABI void _srand_r(struct _rand_state *, unsigned int);
Xextern __declspec(__nothrow) void _srand_r(struct _rand_state *, unsigned int);
Nstruct _ANSI_rand_state { int __x[1]; };
Nextern _ARMABI int _ANSI_rand_r(struct _ANSI_rand_state *);
Xextern __declspec(__nothrow) int _ANSI_rand_r(struct _ANSI_rand_state *);
Nextern _ARMABI void _ANSI_srand_r(struct _ANSI_rand_state *, unsigned int);
Xextern __declspec(__nothrow) void _ANSI_srand_r(struct _ANSI_rand_state *, unsigned int);
N   /*
N    * Re-entrant variants of both flavours of rand, which operate on
N    * an explicitly supplied state buffer.
N    */
N
Nextern _ARMABI void *calloc(size_t /*nmemb*/, size_t /*size*/);
Xextern __declspec(__nothrow) void *calloc(size_t  , size_t  );
N   /*
N    * allocates space for an array of nmemb objects, each of whose size is
N    * 'size'. The space is initialised to all bits zero.
N    * Returns: either a null pointer or a pointer to the allocated space.
N    */
Nextern _ARMABI void free(void * /*ptr*/);
Xextern __declspec(__nothrow) void free(void *  );
N   /*
N    * causes the space pointed to by ptr to be deallocated (i.e., made
N    * available for further allocation). If ptr is a null pointer, no action
N    * occurs. Otherwise, if ptr does not match a pointer earlier returned by
N    * calloc, malloc or realloc or if the space has been deallocated by a call
N    * to free or realloc, the behaviour is undefined.
N    */
Nextern _ARMABI void *malloc(size_t /*size*/);
Xextern __declspec(__nothrow) void *malloc(size_t  );
N   /*
N    * allocates space for an object whose size is specified by 'size' and whose
N    * value is indeterminate.
N    * Returns: either a null pointer or a pointer to the allocated space.
N    */
Nextern _ARMABI void *realloc(void * /*ptr*/, size_t /*size*/);
Xextern __declspec(__nothrow) void *realloc(void *  , size_t  );
N   /*
N    * changes the size of the object pointed to by ptr to the size specified by
N    * size. The contents of the object shall be unchanged up to the lesser of
N    * the new and old sizes. If the new size is larger, the value of the newly
N    * allocated portion of the object is indeterminate. If ptr is a null
N    * pointer, the realloc function behaves like a call to malloc for the
N    * specified size. Otherwise, if ptr does not match a pointer earlier
N    * returned by calloc, malloc or realloc, or if the space has been
N    * deallocated by a call to free or realloc, the behaviour is undefined.
N    * If the space cannot be allocated, the object pointed to by ptr is
N    * unchanged. If size is zero and ptr is not a null pointer, the object it
N    * points to is freed.
N    * Returns: either a null pointer or a pointer to the possibly moved
N    *          allocated space.
N    */
N#if !defined(__STRICT_ANSI__)
X#if !0L
Nextern _ARMABI int posix_memalign(void ** /*ret*/, size_t /*alignment*/, size_t /*size*/);
Xextern __declspec(__nothrow) int posix_memalign(void **  , size_t  , size_t  );
N   /*
N    * allocates space for an object of size 'size', aligned to a
N    * multiple of 'alignment' (which must be a power of two and at
N    * least 4).
N    *
N    * On success, a pointer to the allocated object is stored in
N    * *ret, and zero is returned. On failure, the return value is
N    * either ENOMEM (allocation failed because no suitable piece of
N    * memory was available) or EINVAL (the 'alignment' parameter was
N    * invalid).
N    */
N#endif
Ntypedef int (*__heapprt)(void *, char const *, ...);
Nextern _ARMABI void __heapstats(int (* /*dprint*/)(void * /*param*/,
Xextern __declspec(__nothrow) void __heapstats(int (*  )(void *  ,
N                                           char const * /*format*/, ...),
N                        void * /*param*/) __attribute__((__nonnull__(1)));
N   /*
N    * reports current heap statistics (eg. number of free blocks in
N    * the free-list). Output is as implementation-defined free-form
N    * text, provided via the dprint function. `param' gives an
N    * extra data word to pass to dprint. You can call
N    * __heapstats(fprintf,stdout) by casting fprintf to the above
N    * function type; the typedef `__heapprt' is provided for this
N    * purpose.
N    *
N    * `dprint' will not be called while the heap is being examined,
N    * so it can allocate memory itself without trouble.
N    */
Nextern _ARMABI int __heapvalid(int (* /*dprint*/)(void * /*param*/,
Xextern __declspec(__nothrow) int __heapvalid(int (*  )(void *  ,
N                                           char const * /*format*/, ...),
N                       void * /*param*/, int /*verbose*/) __attribute__((__nonnull__(1)));
N   /*
N    * performs a consistency check on the heap. Errors are reported
N    * through dprint, like __heapstats. If `verbose' is nonzero,
N    * full diagnostic information on the heap state is printed out.
N    *
N    * This routine probably won't work if the heap isn't a
N    * contiguous chunk (for example, if __user_heap_extend has been
N    * overridden).
N    *
N    * `dprint' may be called while the heap is being examined or
N    * even in an invalid state, so it must perform no memory
N    * allocation. In particular, if `dprint' calls (or is) a stdio
N    * function, the stream it outputs to must already have either
N    * been written to or been setvbuf'ed, or else the system will
N    * allocate buffer space for it on the first call to dprint.
N    */
Nextern _ARMABI_NORETURN void abort(void);
Xextern __declspec(__nothrow) __declspec(__noreturn) void abort(void);
N   /*
N    * causes abnormal program termination to occur, unless the signal SIGABRT
N    * is being caught and the signal handler does not return. Whether open
N    * output streams are flushed or open streams are closed or temporary
N    * files removed is implementation-defined.
N    * An implementation-defined form of the status 'unsuccessful termination'
N    * is returned to the host environment by means of a call to
N    * raise(SIGABRT).
N    */
N
Nextern _ARMABI int atexit(void (* /*func*/)(void)) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int atexit(void (*  )(void)) __attribute__((__nonnull__(1)));
N   /*
N    * registers the function pointed to by func, to be called without its
N    * arguments at normal program termination. It is possible to register at
N    * least 32 functions.
N    * Returns: zero if the registration succeeds, nonzero if it fails.
N    */
N#if defined(__EDG__) && !defined(__GNUC__)
X#if 1L && !0L
N#define __LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE
N#endif
N#if defined(__cplusplus) && defined(__LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE) 
X#if 0L && 1L 
S    /* atexit that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode  
S     */
S    typedef void (* __C_exitfuncptr)();
S    extern "C++"
S    inline int atexit(void (* __func)()) {
S      return atexit((__C_exitfuncptr)__func);
S    }
N#endif
N
N
Nextern _ARMABI_NORETURN void exit(int /*status*/);
Xextern __declspec(__nothrow) __declspec(__noreturn) void exit(int  );
N   /*
N    * causes normal program termination to occur. If more than one call to the
N    * exit function is executed by a program, the behaviour is undefined.
N    * First, all functions registered by the atexit function are called, in the
N    * reverse order of their registration.
N    * Next, all open output streams are flushed, all open streams are closed,
N    * and all files created by the tmpfile function are removed.
N    * Finally, control is returned to the host environment. If the value of
N    * status is zero or EXIT_SUCCESS, an implementation-defined form of the
N    * status 'successful termination' is returned. If the value of status is
N    * EXIT_FAILURE, an implementation-defined form of the status
N    * 'unsuccessful termination' is returned. Otherwise the status returned
N    * is implementation-defined.
N    */
N
Nextern _ARMABI_NORETURN void _Exit(int /*status*/);
Xextern __declspec(__nothrow) __declspec(__noreturn) void _Exit(int  );
N   /*
N    * causes normal program termination to occur. No functions registered
N    * by the atexit function are called.
N    * In this implementation, all open output streams are flushed, all
N    * open streams are closed, and all files created by the tmpfile function
N    * are removed.
N    * Control is returned to the host environment. The status returned to
N    * the host environment is determined in the same way as for 'exit'.
N    */     
N
Nextern _ARMABI char *getenv(const char * /*name*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *getenv(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * searches the environment list, provided by the host environment, for a
N    * string that matches the string pointed to by name. The set of environment
N    * names and the method for altering the environment list are
N    * implementation-defined.
N    * Returns: a pointer to a string associated with the matched list member.
N    *          The array pointed to shall not be modified by the program, but
N    *          may be overwritten by a subsequent call to the getenv function.
N    *          If the specified name cannot be found, a null pointer is
N    *          returned.
N    */
N
Nextern _ARMABI int  system(const char * /*string*/);
Xextern __declspec(__nothrow) int  system(const char *  );
N   /*
N    * passes the string pointed to by string to the host environment to be
N    * executed by a command processor in an implementation-defined manner.
N    * A null pointer may be used for string, to inquire whether a command
N    * processor exists.
N    *
N    * Returns: If the argument is a null pointer, the system function returns
N    *          non-zero only if a command processor is available. If the
N    *          argument is not a null pointer, the system function returns an
N    *          implementation-defined value.
N    */
N
Nextern _ARMABI_THROW void *bsearch(const void * /*key*/, const void * /*base*/,
Xextern  void *bsearch(const void *  , const void *  ,
N              size_t /*nmemb*/, size_t /*size*/,
N              int (* /*compar*/)(const void *, const void *)) __attribute__((__nonnull__(1,2,5)));
N   /*
N    * searches an array of nmemb objects, the initial member of which is
N    * pointed to by base, for a member that matches the object pointed to by
N    * key. The size of each member of the array is specified by size.
N    * The contents of the array shall be in ascending sorted order according to
N    * a comparison function pointed to by compar, which is called with two
N    * arguments that point to the key object and to an array member, in that
N    * order. The function shall return an integer less than, equal to, or
N    * greater than zero if the key object is considered, respectively, to be
N    * less than, to match, or to be greater than the array member.
N    * Returns: a pointer to a matching member of the array, or a null pointer
N    *          if no match is found. If two members compare as equal, which
N    *          member is matched is unspecified.
N    */
N#if defined(__cplusplus) && defined(__LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE)
X#if 0L && 1L
S    /* bsearch that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode
S     */
S    typedef int (* __C_compareprocptr)(const void *, const void *);
S    extern "C++"
S    void *bsearch(const void * __key, const void * __base,
S              size_t __nmemb, size_t __size,
S              int (* __compar)(const void *, const void *)) __attribute__((__nonnull__(1,2,5)));
S    extern "C++"
S    inline void *bsearch(const void * __key, const void * __base,
S              size_t __nmemb, size_t __size,
S              int (* __compar)(const void *, const void *)) {
S      return bsearch(__key, __base, __nmemb, __size, (__C_compareprocptr)__compar);
S    }
N#endif
N
N
Nextern _ARMABI_THROW void qsort(void * /*base*/, size_t /*nmemb*/, size_t /*size*/,
Xextern  void qsort(void *  , size_t  , size_t  ,
N           int (* /*compar*/)(const void *, const void *)) __attribute__((__nonnull__(1,4)));
N   /*
N    * sorts an array of nmemb objects, the initial member of which is pointed
N    * to by base. The size of each object is specified by size.
N    * The contents of the array shall be in ascending order according to a
N    * comparison function pointed to by compar, which is called with two
N    * arguments that point to the objects being compared. The function shall
N    * return an integer less than, equal to, or greater than zero if the first
N    * argument is considered to be respectively less than, equal to, or greater
N    * than the second. If two members compare as equal, their order in the
N    * sorted array is unspecified.
N    */
N
N#if defined(__cplusplus) && defined(__LANGUAGE_LINKAGE_CHANGES_FUNCTION_TYPE)
X#if 0L && 1L
S    /* qsort that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode
S     */    
S    extern "C++"
S    void qsort(void * __base, size_t __nmemb, size_t __size,
S               int (* __compar)(const void *, const void *)) __attribute__((__nonnull__(1,4)));
S    extern "C++"
S    inline void qsort(void * __base, size_t __nmemb, size_t __size,
S                      int (* __compar)(const void *, const void *)) {
S      qsort(__base, __nmemb, __size, (__C_compareprocptr)__compar);
S    }
N#endif
N
Nextern _ARMABI_PURE int abs(int /*j*/);
Xextern __declspec(__nothrow) __attribute__((const)) int abs(int  );
N   /*
N    * computes the absolute value of an integer j. If the result cannot be
N    * represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N
Nextern _ARMABI_PURE div_t div(int /*numer*/, int /*denom*/);
Xextern __declspec(__nothrow) __attribute__((const)) div_t div(int  , int  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the resulting
N    * quotient is the integer of lesser magnitude that is the nearest to the
N    * algebraic quotient. If the result cannot be represented, the behaviour is
N    * undefined; otherwise, quot * denom + rem shall equal numer.
N    * Returns: a structure of type div_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          int quot; int rem;
N    */
Nextern _ARMABI_PURE long int labs(long int /*j*/);
Xextern __declspec(__nothrow) __attribute__((const)) long int labs(long int  );
N   /*
N    * computes the absolute value of an long integer j. If the result cannot be
N    * represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE long abs(long int x) { return labs(x); }
N#endif
N
Nextern _ARMABI_PURE ldiv_t ldiv(long int /*numer*/, long int /*denom*/);
Xextern __declspec(__nothrow) __attribute__((const)) ldiv_t ldiv(long int  , long int  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the sign of
N    * the resulting quotient is that of the algebraic quotient, and the
N    * magnitude of the resulting quotient is the largest integer less than the
N    * magnitude of the algebraic quotient. If the result cannot be represented,
N    * the behaviour is undefined; otherwise, quot * denom + rem shall equal
N    * numer.
N    * Returns: a structure of type ldiv_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          long int quot; long int rem;
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE ldiv_t div(long int __numer, long int __denom) {
S       return ldiv(__numer, __denom);
S   }
N#endif
N
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || __USE_C99_STDLIB
Nextern _ARMABI_PURE __LONGLONG llabs(__LONGLONG /*j*/);
Xextern __declspec(__nothrow) __attribute__((const)) long long llabs(long long  );
N   /*
N    * computes the absolute value of a long long integer j. If the
N    * result cannot be represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE __LONGLONG abs(__LONGLONG x) { return llabs(x); }
N#endif
N
Nextern _ARMABI_PURE lldiv_t lldiv(__LONGLONG /*numer*/, __LONGLONG /*denom*/);
Xextern __declspec(__nothrow) __attribute__((const)) lldiv_t lldiv(long long  , long long  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the sign of
N    * the resulting quotient is that of the algebraic quotient, and the
N    * magnitude of the resulting quotient is the largest integer less than the
N    * magnitude of the algebraic quotient. If the result cannot be represented,
N    * the behaviour is undefined; otherwise, quot * denom + rem shall equal
N    * numer.
N    * Returns: a structure of type lldiv_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          long long quot; long long rem;
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE lldiv_t div(__LONGLONG __numer, __LONGLONG __denom) {
S       return lldiv(__numer, __denom);
S   }
N#endif
N#endif
N
N#if !(__ARM_NO_DEPRECATED_FUNCTIONS)
N/*
N * ARM real-time divide functions for guaranteed performance
N */
Ntypedef struct __sdiv32by16 { int quot, rem; } __sdiv32by16;
Ntypedef struct __udiv32by16 { unsigned int quot, rem; } __udiv32by16;
N   /* used int so that values return in separate regs, although 16-bit */
Ntypedef struct __sdiv64by32 { int rem, quot; } __sdiv64by32;
N
N__value_in_regs extern _ARMABI_PURE __sdiv32by16 __rt_sdiv32by16(
X__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __sdiv32by16 __rt_sdiv32by16(
N     int /*numer*/,
N     short int /*denom*/);
N   /*
N    * Signed divide: (16-bit quot), (16-bit rem) = (32-bit) / (16-bit)
N    */
N__value_in_regs extern _ARMABI_PURE __udiv32by16 __rt_udiv32by16(
X__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __udiv32by16 __rt_udiv32by16(
N     unsigned int /*numer*/,
N     unsigned short /*denom*/);
N   /*
N    * Unsigned divide: (16-bit quot), (16-bit rem) = (32-bit) / (16-bit)
N    */
N__value_in_regs extern _ARMABI_PURE __sdiv64by32 __rt_sdiv64by32(
X__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __sdiv64by32 __rt_sdiv64by32(
N     int /*numer_h*/, unsigned int /*numer_l*/,
N     int /*denom*/);
N   /*
N    * Signed divide: (32-bit quot), (32-bit rem) = (64-bit) / (32-bit)
N    */
N#endif
N
N/*
N * ARM floating-point mask/status function (for both hardfp and softfp)
N */
Nextern _ARMABI unsigned int __fp_status(unsigned int /*mask*/, unsigned int /*flags*/);
Xextern __declspec(__nothrow) unsigned int __fp_status(unsigned int  , unsigned int  );
N   /*
N    * mask and flags are bit-fields which correspond directly to the
N    * floating point status register in the FPE/FPA and fplib.  
N    * __fp_status returns the current value of the status register,
N    * and also sets the writable bits of the word
N    * (the exception control and flag bytes) to:
N    *
N    *     new = (old & ~mask) ^ flags;
N    */
N#define __fpsr_IXE  0x100000
N#define __fpsr_UFE  0x80000
N#define __fpsr_OFE  0x40000
N#define __fpsr_DZE  0x20000
N#define __fpsr_IOE  0x10000
N
N#define __fpsr_IXC  0x10
N#define __fpsr_UFC  0x8
N#define __fpsr_OFC  0x4
N#define __fpsr_DZC  0x2
N#define __fpsr_IOC  0x1
N
N/*
N * Multibyte Character Functions.
N * The behaviour of the multibyte character functions is affected by the
N * LC_CTYPE category of the current locale. For a state-dependent encoding,
N * each function is placed into its initial state by a call for which its
N * character pointer argument, s, is a null pointer. Subsequent calls with s
N * as other than a null pointer cause the internal state of the function to be
N * altered as necessary. A call with s as a null pointer causes these functions
N * to return a nonzero value if encodings have state dependency, and a zero
N * otherwise. After the LC_CTYPE category is changed, the shift state of these
N * functions is indeterminate.
N */
Nextern _ARMABI int mblen(const char * /*s*/, size_t /*n*/);
Xextern __declspec(__nothrow) int mblen(const char *  , size_t  );
N   /*
N    * If s is not a null pointer, the mblen function determines the number of
N    * bytes compromising the multibyte character pointed to by s. Except that
N    * the shift state of the mbtowc function is not affected, it is equivalent
N    * to   mbtowc((wchar_t *)0, s, n);
N    * Returns: If s is a null pointer, the mblen function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the mblen function either returns a 0 (if s points to a
N    *          null character), or returns the number of bytes that compromise
N    *          the multibyte character (if the next n of fewer bytes form a
N    *          valid multibyte character), or returns -1 (they do not form a
N    *          valid multibyte character).
N    */
Nextern _ARMABI int mbtowc(wchar_t * __restrict /*pwc*/,
Xextern __declspec(__nothrow) int mbtowc(wchar_t * __restrict  ,
N                   const char * __restrict /*s*/, size_t /*n*/);
N   /*
N    * If s is not a null pointer, the mbtowc function determines the number of
N    * bytes that compromise the multibyte character pointed to by s. It then
N    * determines the code for value of type wchar_t that corresponds to that
N    * multibyte character. (The value of the code corresponding to the null
N    * character is zero). If the multibyte character is valid and pwc is not a
N    * null pointer, the mbtowc function stores the code in the object pointed
N    * to by pwc. At most n bytes of the array pointed to by s will be examined.
N    * Returns: If s is a null pointer, the mbtowc function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the mbtowc function either returns a 0 (if s points to
N    *          a null character), or returns the number of bytes that
N    *          compromise the converted multibyte character (if the next n of
N    *          fewer bytes form a valid multibyte character), or returns -1
N    *          (they do not form a valid multibyte character).
N    */
Nextern _ARMABI int wctomb(char * /*s*/, wchar_t /*wchar*/);
Xextern __declspec(__nothrow) int wctomb(char *  , wchar_t  );
N   /*
N    * determines the number of bytes need to represent the multibyte character
N    * corresponding to the code whose value is wchar (including any change in
N    * shift state). It stores the multibyte character representation in the
N    * array object pointed to by s (if s is not a null pointer). At most
N    * MB_CUR_MAX characters are stored. If the value of wchar is zero, the
N    * wctomb function is left in the initial shift state).
N    * Returns: If s is a null pointer, the wctomb function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the wctomb function returns a -1 if the value of wchar
N    *          does not correspond to a valid multibyte character, or returns
N    *          the number of bytes that compromise the multibyte character
N    *          corresponding to the value of wchar.
N    */
N
N/*
N * Multibyte String Functions.
N * The behaviour of the multibyte string functions is affected by the LC_CTYPE
N * category of the current locale.
N */
Nextern _ARMABI size_t mbstowcs(wchar_t * __restrict /*pwcs*/,
Xextern __declspec(__nothrow) size_t mbstowcs(wchar_t * __restrict  ,
N                      const char * __restrict /*s*/, size_t /*n*/) __attribute__((__nonnull__(2)));
N   /*
N    * converts a sequence of multibyte character that begins in the initial
N    * shift state from the array pointed to by s into a sequence of
N    * corresponding codes and stores not more than n codes into the array
N    * pointed to by pwcs. No multibyte character that follow a null character
N    * (which is converted into a code with value zero) will be examined or
N    * converted. Each multibyte character is converted as if by a call to
N    * mbtowc function, except that the shift state of the mbtowc function is
N    * not affected. No more than n elements will be modified in the array
N    * pointed to by pwcs. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: If an invalid multibyte character is encountered, the mbstowcs
N    *          function returns (size_t)-1. Otherwise, the mbstowcs function
N    *          returns the number of array elements modified, not including
N    *          a terminating zero code, if any.
N    */
Nextern _ARMABI size_t wcstombs(char * __restrict /*s*/,
Xextern __declspec(__nothrow) size_t wcstombs(char * __restrict  ,
N                      const wchar_t * __restrict /*pwcs*/, size_t /*n*/) __attribute__((__nonnull__(2)));
N   /*
N    * converts a sequence of codes that correspond to multibyte characters
N    * from the array pointed to by pwcs into a sequence of multibyte
N    * characters that begins in the initial shift state and stores these
N    * multibyte characters into the array pointed to by s, stopping if a
N    * multibyte character would exceed the limit of n total bytes or if a
N    * null character is stored. Each code is converted as if by a call to the
N    * wctomb function, except that the shift state of the wctomb function is
N    * not affected. No more than n elements will be modified in the array
N    * pointed to by s. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: If a code is encountered that does not correspond to a valid
N    *          multibyte character, the wcstombs function returns (size_t)-1.
N    *          Otherwise, the wcstombs function returns the number of bytes
N    *          modified, not including a terminating null character, if any.
N    */
N
Nextern _ARMABI void __use_realtime_heap(void);
Xextern __declspec(__nothrow) void __use_realtime_heap(void);
Nextern _ARMABI void __use_realtime_division(void);
Xextern __declspec(__nothrow) void __use_realtime_division(void);
Nextern _ARMABI void __use_two_region_memory(void);
Xextern __declspec(__nothrow) void __use_two_region_memory(void);
Nextern _ARMABI void __use_no_heap(void);
Xextern __declspec(__nothrow) void __use_no_heap(void);
Nextern _ARMABI void __use_no_heap_region(void);
Xextern __declspec(__nothrow) void __use_no_heap_region(void);
N
Nextern _ARMABI char const *__C_library_version_string(void);
Xextern __declspec(__nothrow) char const *__C_library_version_string(void);
Nextern _ARMABI int __C_library_version_number(void);
Xextern __declspec(__nothrow) int __C_library_version_number(void);
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDLIB_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #ifdef __cplusplus
S    #ifndef __STDLIB_NO_EXPORTS
S      #if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S        using ::std::atoll;
S        using ::std::lldiv_t;
S      #endif /* !defined(__STRICT_ANSI__) || __USE_C99_STDLIB */
S      using ::std::div_t;
S      using ::std::ldiv_t;
S      using ::std::atof;
S      using ::std::atoi;
S      using ::std::atol;
S      using ::std::strtod;
S#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S      using ::std::strtof;
S      using ::std::strtold;
S#endif
S      using ::std::strtol;
S      using ::std::strtoul;
S      using ::std::strtoll;
S      using ::std::strtoull;
S      using ::std::rand;
S      using ::std::srand;
S      using ::std::_rand_state;
S      using ::std::_rand_r;
S      using ::std::_srand_r;
S      using ::std::_ANSI_rand_state;
S      using ::std::_ANSI_rand_r;
S      using ::std::_ANSI_srand_r;
S      using ::std::calloc;
S      using ::std::free;
S      using ::std::malloc;
S      using ::std::realloc;
S#if !defined(__STRICT_ANSI__)
S      using ::std::posix_memalign;
S#endif
S      using ::std::__heapprt;
S      using ::std::__heapstats;
S      using ::std::__heapvalid;
S      using ::std::abort;
S      using ::std::atexit;
S      using ::std::exit;
S      using ::std::_Exit;
S      using ::std::getenv;
S      using ::std::system;
S      using ::std::bsearch;
S      using ::std::qsort;
S      using ::std::abs;
S      using ::std::div;
S      using ::std::labs;
S      using ::std::ldiv;
S      #if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S        using ::std::llabs;
S        using ::std::lldiv;
S      #endif /* !defined(__STRICT_ANSI__) || __USE_C99_STDLIB */
S#if !(__ARM_NO_DEPRECATED_FUNCTIONS)
S      using ::std::__sdiv32by16;
S      using ::std::__udiv32by16;
S      using ::std::__sdiv64by32;
S      using ::std::__rt_sdiv32by16;
S      using ::std::__rt_udiv32by16;
S      using ::std::__rt_sdiv64by32;
S#endif
S      using ::std::__fp_status;
S      using ::std::mblen;
S      using ::std::mbtowc;
S      using ::std::wctomb;
S      using ::std::mbstowcs;
S      using ::std::wcstombs;
S      using ::std::__use_realtime_heap;
S      using ::std::__use_realtime_division;
S      using ::std::__use_two_region_memory;
S      using ::std::__use_no_heap;
S      using ::std::__use_no_heap_region;
S      using ::std::__C_library_version_string;
S      using ::std::__C_library_version_number;
S      using ::std::size_t;
S      using ::std::__aeabi_MB_CUR_MAX;
S    #endif /* __STDLIB_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#undef __LONGLONG
N
N#endif /* __stdlib_h */
N
N/* end of stdlib.h */
L 72 "..\..\FreeRTOS\tasks.c" 2
N#include <string.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\string.h" 1
N/* string.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.11 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                        */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.          */
N/* version 0.04 */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N */
N
N/*
N * string.h declares one type and several functions, and defines one macro
N * useful for manipulating character arrays and other objects treated as
N * character arrays. Various methods are used for determining the lengths of
N * the arrays, but in all cases a char * or void * argument points to the
N * initial (lowest addresses) character of the array. If an array is written
N * beyond the end of an object, the behaviour is undefined.
N */
N
N#ifndef __string_h
N#define __string_h
N#define __ARMCLIB_VERSION 5060019
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STRING_DECLS
N  #define __STRING_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
Nextern _ARMABI void *memcpy(void * __restrict /*s1*/,
Xextern __declspec(__nothrow) void *memcpy(void * __restrict  ,
N                    const void * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI void *memmove(void * /*s1*/,
Xextern __declspec(__nothrow) void *memmove(void *  ,
N                    const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. Copying takes place as if the n characters from the
N    * object pointed to by s2 are first copied into a temporary array of n
N    * characters that does not overlap the objects pointed to by s1 and s2,
N    * and then the n characters from the temporary array are copied into the
N    * object pointed to by s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strcpy(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string pointed to by s2 (including the terminating nul
N    * character) into the array pointed to by s1. If copying takes place
N    * between objects that overlap, the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncpy(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies not more than n characters (characters that follow a null
N    * character are not copied) from the array pointed to by s2 into the array
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
N
Nextern _ARMABI char *strcat(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends a copy of the string pointed to by s2 (including the terminating
N    * null character) to the end of the string pointed to by s1. The initial
N    * character of s2 overwrites the null character at the end of s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncat(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends not more than n characters (a null character and characters that
N    * follow it are not appended) from the array pointed to by s2 to the end of
N    * the string pointed to by s1. The initial character of s2 overwrites the
N    * null character at the end of s1. A terminating null character is always
N    * appended to the result.
N    * Returns: the value of s1.
N    */
N
N/*
N * The sign of a nonzero value returned by the comparison functions is
N * determined by the sign of the difference between the values of the first
N * pair of characters (both interpreted as unsigned char) that differ in the
N * objects being compared.
N */
N
Nextern _ARMABI int memcmp(const void * /*s1*/, const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the first n characters of the object pointed to by s1 to the
N    * first n characters of the object pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the object pointed to by s1 is greater than, equal to, or
N    *          less than the object pointed to by s2.
N    */
Nextern _ARMABI int strcmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcasecmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2,
N    * case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncasecmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2, case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcoll(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2, both
N    * interpreted as appropriate to the LC_COLLATE category of the current
N    * locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2 when both are interpreted
N    *          as appropriate to the current locale.
N    */
N
Nextern _ARMABI size_t strxfrm(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
N   /*
N    * transforms the string pointed to by s2 and places the resulting string
N    * into the array pointed to by s1. The transformation function is such that
N    * if the strcmp function is applied to two transformed strings, it returns
N    * a value greater than, equal to or less than zero, corresponding to the
N    * result of the strcoll function applied to the same two original strings.
N    * No more than n characters are placed into the resulting array pointed to
N    * by s1, including the terminating null character. If n is zero, s1 is
N    * permitted to be a null pointer. If copying takes place between objects
N    * that overlap, the behaviour is undefined.
N    * Returns: The length of the transformed string is returned (not including
N    *          the terminating null character). If the value returned is n or
N    *          more, the contents of the array pointed to by s1 are
N    *          indeterminate.
N    */
N
N
N#ifdef __cplusplus
Sextern _ARMABI const void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Sextern "C++" void *memchr(void * __s, int __c, size_t __n) __attribute__((__nonnull__(1)));
Sextern "C++" inline void *memchr(void * __s, int __c, size_t __n)
S    { return const_cast<void *>(memchr(const_cast<const void *>(__s), __c, __n)); }
N#else
Nextern _ARMABI void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an unsigned char) in the
N    * initial n characters (each interpreted as unsigned char) of the object
N    * pointed to by s.
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the object.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strchr(char * __s, int __c)
S    { return const_cast<char *>(strchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an char) in the string
N    * pointed to by s (including the terminating null character).
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the string.
N    */
N
Nextern _ARMABI size_t strcspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters not from the string pointed to by
N    * s2. The terminating null character is not considered part of s2.
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strpbrk(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strpbrk(char * __s1, const char * __s2)
S    { return const_cast<char *>(strpbrk(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of any
N    * character from the string pointed to by s2.
N    * Returns: returns a pointer to the character, or a null pointer if no
N    *          character form s2 occurs in s1.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strrchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strrchr(char * __s, int __c)
S    { return const_cast<char *>(strrchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the last occurence of c (converted to a char) in the string
N    * pointed to by s. The terminating null character is considered part of
N    * the string.
N    * Returns: returns a pointer to the character, or a null pointer if c does
N    *          not occur in the string.
N    */
N
Nextern _ARMABI size_t strspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters from the string pointed to by S2
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strstr(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strstr(char * __s1, const char * __s2)
S    { return const_cast<char *>(strstr(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of the
N    * sequence of characters (excluding the terminating null character) in the
N    * string pointed to by s2.
N    * Returns: a pointer to the located string, or a null pointer if the string
N    *          is not found.
N    */
N
Nextern _ARMABI char *strtok(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI char *_strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#ifndef __STRICT_ANSI__
Nextern _ARMABI char *strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#endif
N   /*
N    * A sequence of calls to the strtok function breaks the string pointed to
N    * by s1 into a sequence of tokens, each of which is delimited by a
N    * character from the string pointed to by s2. The first call in the
N    * sequence has s1 as its first argument, and is followed by calls with a
N    * null pointer as their first argument. The separator string pointed to by
N    * s2 may be different from call to call.
N    * The first call in the sequence searches for the first character that is
N    * not contained in the current separator string s2. If no such character
N    * is found, then there are no tokens in s1 and the strtok function returns
N    * a null pointer. If such a character is found, it is the start of the
N    * first token.
N    * The strtok function then searches from there for a character that is
N    * contained in the current separator string. If no such character is found,
N    * the current token extends to the end of the string pointed to by s1, and
N    * subsequent searches for a token will fail. If such a character is found,
N    * it is overwritten by a null character, which terminates the current
N    * token. The strtok function saves a pointer to the following character,
N    * from which the next search for a token will start.
N    * Each subsequent call, with a null pointer as the value for the first
N    * argument, starts searching from the saved pointer and behaves as
N    * described above.
N    * Returns: pointer to the first character of a token, or a null pointer if
N    *          there is no token.
N    *
N    * strtok_r() is a common extension which works exactly like
N    * strtok(), but instead of storing its state in a hidden
N    * library variable, requires the user to pass in a pointer to a
N    * char * variable which will be used instead. Any sequence of
N    * calls to strtok_r() passing the same char ** pointer should
N    * behave exactly like the corresponding sequence of calls to
N    * strtok(). This means that strtok_r() can safely be used in
N    * multi-threaded programs, and also that you can tokenise two
N    * strings in parallel.
N    */
N
Nextern _ARMABI void *memset(void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N   /*
N    * copies the value of c (converted to an unsigned char) into each of the
N    * first n charactes of the object pointed to by s.
N    * Returns: the value of s.
N    */
Nextern _ARMABI char *strerror(int /*errnum*/);
Xextern __declspec(__nothrow) char *strerror(int  );
N   /*
N    * maps the error number in errnum to an error message string.
N    * Returns: a pointer to the string, the contents of which are
N    *          implementation-defined. The array pointed to shall not be
N    *          modified by the program, but may be overwritten by a
N    *          subsequent call to the strerror function.
N    */
Nextern _ARMABI size_t strlen(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * computes the length of the string pointed to by s.
N    * Returns: the number of characters that precede the terminating null
N    *          character.
N    */
N
Nextern _ARMABI size_t strlcpy(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string src into the string dst, using no more than
N    * len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src. Thus, the operation
N    * succeeded without truncation if and only if ret < len;
N    * otherwise, the value in ret tells you how big to make dst if
N    * you decide to reallocate it. (That value does _not_ include
N    * the NUL.)
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI size_t strlcat(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * concatenates the string src to the string dst, using no more
N    * than len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src plus the original length
N    * of dst. Thus, the operation succeeded without truncation if
N    * and only if ret < len; otherwise, the value in ret tells you
N    * how big to make dst if you decide to reallocate it. (That
N    * value does _not_ include the NUL.)
N    * 
N    * If no NUL is encountered within the first len bytes of dst,
N    * then the length of dst is considered to have been equal to
N    * len for the purposes of the return value (as if there were a
N    * NUL at dst[len]). Thus, the return value in this case is len
N    * + strlen(src).
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI void _membitcpybl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpybb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
N    /*
N     * Copies or moves a piece of memory from one place to another,
N     * with one-bit granularity. So you can start or finish a copy
N     * part way through a byte, and you can copy between regions
N     * with different alignment within a byte.
N     * 
N     * All these functions have the same prototype: two void *
N     * pointers for destination and source, then two integers
N     * giving the bit offset from those pointers, and finally the
N     * number of bits to copy.
N     * 
N     * Just like memcpy and memmove, the "cpy" functions copy as
N     * fast as they can in the assumption that the memory regions
N     * do not overlap, while the "move" functions cope correctly
N     * with overlap.
N     *
N     * Treating memory as a stream of individual bits requires
N     * defining a convention about what order those bits are
N     * considered to be arranged in. The above functions support
N     * multiple conventions:
N     * 
N     *  - the "bl" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in little-endian fashion, so that the LSB comes
N     *    first. (For example, membitcpybl(a,b,0,7,1) would copy
N     *    the MSB of the byte at b to the LSB of the byte at a.)
N     * 
N     *  - the "bb" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in big-endian fashion, so that the MSB comes
N     *    first.
N     * 
N     *  - the "hl" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in little-endian fashion.
N     * 
N     *  - the "hb" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in big-endian fashion.
N     * 
N     *  - the "wl" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in little-endian fashion.
N     * 
N     *  - the "wb" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in big-endian fashion.
N     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STRING_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STRING_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::memcpy;
S      using ::std::memmove;
S      using ::std::strcpy;
S      using ::std::strncpy;
S      using ::std::strcat;
S      using ::std::strncat;
S      using ::std::memcmp;
S      using ::std::strcmp;
S      using ::std::strncmp;
S      using ::std::strcasecmp;
S      using ::std::strncasecmp;
S      using ::std::strcoll;
S      using ::std::strxfrm;
S      using ::std::memchr;
S      using ::std::strchr;
S      using ::std::strcspn;
S      using ::std::strpbrk;
S      using ::std::strrchr;
S      using ::std::strspn;
S      using ::std::strstr;
S      using ::std::strtok;
S#ifndef __STRICT_ANSI__
S      using ::std::strtok_r;
S#endif
S      using ::std::_strtok_r;
S      using ::std::memset;
S      using ::std::strerror;
S      using ::std::strlen;
S      using ::std::strlcpy;
S      using ::std::strlcat;
S      using ::std::_membitcpybl;
S      using ::std::_membitcpybb;
S      using ::std::_membitcpyhl;
S      using ::std::_membitcpyhb;
S      using ::std::_membitcpywl;
S      using ::std::_membitcpywb;
S      using ::std::_membitmovebl;
S      using ::std::_membitmovebb;
S      using ::std::_membitmovehl;
S      using ::std::_membitmovehb;
S      using ::std::_membitmovewl;
S      using ::std::_membitmovewb;
S    #endif /* __STRING_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of string.h */
N
L 73 "..\..\FreeRTOS\tasks.c" 2
N
N/* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
Nall the API functions to use the MPU wrappers.  That should only be done when
Ntask.h is included from an application file. */
N#define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
N
N/* FreeRTOS includes. */
N#include "FreeRTOS.h"
L 1 "..\..\FreeRTOS\include\FreeRTOS.h" 1
N/*
N    FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
N    All rights reserved
N
N    VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
N
N    ***************************************************************************
N    >>!   NOTE: The modification to the GPL is included to allow you to     !<<
N    >>!   distribute a combined work that includes FreeRTOS without being   !<<
N    >>!   obliged to provide the source code for proprietary components     !<<
N    >>!   outside of the FreeRTOS kernel.                                   !<<
N    ***************************************************************************
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  Full license text is available on the following
N    link: http://www.freertos.org/a00114.html
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS provides completely free yet professionally developed,    *
N     *    robust, strictly quality controlled, supported, and cross          *
N     *    platform software that is more than just the market leader, it     *
N     *    is the industry's de facto standard.                               *
N     *                                                                       *
N     *    Help yourself get started quickly while simultaneously helping     *
N     *    to support the FreeRTOS project by purchasing a FreeRTOS           *
N     *    tutorial book, reference manual, or both:                          *
N     *    http://www.FreeRTOS.org/Documentation                              *
N     *                                                                       *
N    ***************************************************************************
N
N    http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
N    the FAQ page "My application does not run, what could be wrong?".  Have you
N    defined configASSERT()?
N
N    http://www.FreeRTOS.org/support - In return for receiving this top quality
N    embedded software for free we request you assist our global community by
N    participating in the support forum.
N
N    http://www.FreeRTOS.org/training - Investing in training allows your team to
N    be as productive as possible as early as possible.  Now you can receive
N    FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
N    Ltd, and the world's leading authority on the world's leading RTOS.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, a DOS
N    compatible FAT file system, and our tiny thread aware UDP/IP stack.
N
N    http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
N    Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
N    Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
N    licenses offer ticketed support, indemnification and commercial middleware.
N
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety
N    engineered and independently SIL3 certified version for use in safety and
N    mission critical applications that require provable dependability.
N
N    1 tab == 4 spaces!
N*/
N
N#ifndef INC_FREERTOS_H
N#define INC_FREERTOS_H
N
N/*
N * Include the generic headers required for the FreeRTOS port being used.
N */
N#include <stddef.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stddef.h" 1
N/* stddef.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.1.4 */
N
N/* Copyright (C) ARM Ltd., 1999
N * All rights reserved
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright 1991 ARM Limited. All rights reserved.             */
N/* version 0.05 */
N
N/*
N * The following types and macros are defined in several headers referred to in
N * the descriptions of the functions declared in that header. They are also
N * defined in this header file.
N */
N
N#ifndef __stddef_h
N#define __stddef_h
N#define __ARMCLIB_VERSION 5060019
N
N  #ifndef __STDDEF_DECLS
N  #define __STDDEF_DECLS
N    #undef __CLIBNS
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS ::std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if __sizeof_ptr == 8
X#if 4 == 8
S  typedef signed long ptrdiff_t;
N#else
N  typedef signed int ptrdiff_t;
N#endif
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
S   /* the unsigned integral type of the result of the sizeof operator. */
N#endif
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
N  #if !defined(__STRICT_ANSI__)
X  #if !0L
N  /* unconditional in non-strict C for consistency of debug info */
N    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X    #if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #else
N      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #endif
N  #elif !defined(__wchar_t)
S    #define __wchar_t 1
S    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #else
S      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #endif
S   /*
S    * An integral type whose range of values can represent distinct codes for
S    * all members of the largest extended character set specified among the
S    * supported locales; the null character shall have the code value zero and
S    * each member of the basic character set shall have a code value when used
S    * as the lone character in an integer character constant.
S    */
N  #endif
N#endif
N
N#undef NULL  /* others (e.g. <stdio.h>) also define */
N#define NULL 0
N   /* null pointer constant. */
N
N#ifdef __clang__
S  #define offsetof(t, d) __builtin_offsetof(t, d)
N#else
N  /* EDG uses __INTADDR__ to avoid errors when strict */
N  #define offsetof(t, memb) ((__CLIBNS size_t)__INTADDR__(&(((t *)0)->memb)))
N#endif
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 201112L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 201112L <= 199409L) || (0L && 201103L <= __cplusplus)
N  typedef long double max_align_t;
N#endif
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDDEF_DECLS */
N
N
N  #ifdef __cplusplus
S    #ifndef __STDDEF_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::ptrdiff_t;
S      #if !defined(__STRICT_ANSI__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S        using ::std::max_align_t;
S      #endif
S    #endif 
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of stddef.h */
N
L 77 "..\..\FreeRTOS\include\FreeRTOS.h" 2
N
N/*
N * If stdint.h cannot be located then:
N *   + If using GCC ensure the -nostdint options is *not* being used.
N *   + Ensure the project's include path includes the directory in which your
N *     compiler stores stdint.h.
N *   + Set any compiler options necessary for it to support C99, as technically
N *     stdint.h is only mandatory with C99 (FreeRTOS does not require C99 in any
N *     other way).
N *   + The FreeRTOS download includes a simple stdint.h definition that can be
N *     used in cases where none is provided by the compiler.  The files only
N *     contains the typedefs required to build FreeRTOS.  Read the instructions
N *     in FreeRTOS/source/stdint.readme for more information.
N */
N#include <stdint.h> /* READ COMMENT ABOVE. */
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060019
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 92 "..\..\FreeRTOS\include\FreeRTOS.h" 2
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/* Application specific configuration options. */
N#include "FreeRTOSConfig.h"
L 1 "..\..\User\FreeRTOSConfig.h" 1
N/*
N    FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
N    All rights reserved
N
N    VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
N
N    ***************************************************************************
N    >>!   NOTE: The modification to the GPL is included to allow you to     !<<
N    >>!   distribute a combined work that includes FreeRTOS without being   !<<
N    >>!   obliged to provide the source code for proprietary components     !<<
N    >>!   outside of the FreeRTOS kernel.                                   !<<
N    ***************************************************************************
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  Full license text is available on the following
N    link: http://www.freertos.org/a00114.html
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS provides completely free yet professionally developed,    *
N     *    robust, strictly quality controlled, supported, and cross          *
N     *    platform software that is more than just the market leader, it     *
N     *    is the industry's de facto standard.                               *
N     *                                                                       *
N     *    Help yourself get started quickly while simultaneously helping     *
N     *    to support the FreeRTOS project by purchasing a FreeRTOS           *
N     *    tutorial book, reference manual, or both:                          *
N     *    http://www.FreeRTOS.org/Documentation                              *
N     *                                                                       *
N    ***************************************************************************
N
N    http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
N    the FAQ page "My application does not run, what could be wrong?".  Have you
N    defined configASSERT()?
N
N    http://www.FreeRTOS.org/support - In return for receiving this top quality
N    embedded software for free we request you assist our global community by
N    participating in the support forum.
N
N    http://www.FreeRTOS.org/training - Investing in training allows your team to
N    be as productive as possible as early as possible.  Now you can receive
N    FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
N    Ltd, and the world's leading authority on the world's leading RTOS.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, a DOS
N    compatible FAT file system, and our tiny thread aware UDP/IP stack.
N
N    http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
N    Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
N    Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
N    licenses offer ticketed support, indemnification and commercial middleware.
N
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety
N    engineered and independently SIL3 certified version for use in safety and
N    mission critical applications that require provable dependability.
N
N    1 tab == 4 spaces!
N*/
N
N#ifndef FREERTOS_CONFIG_H
N#define FREERTOS_CONFIG_H
N
N/*-----------------------------------------------------------
N * Application specific definitions.
N *
N * These definitions should be adjusted for your particular hardware and
N * application requirements.
N *
N * THESE PARAMETERS ARE DESCRIBED WITHIN THE 'CONFIGURATION' SECTION OF THE
N * FreeRTOS API DOCUMENTATION AVAILABLE ON THE FreeRTOS.org WEB SITE. 
N *
N * See http://www.freertos.org/a00110.html.
N *----------------------------------------------------------*/
N#define configUSE_PREEMPTION		1
N#define configUSE_IDLE_HOOK			0
N#define configUSE_TICK_HOOK			0
N#define configCPU_CLOCK_HZ			( ( unsigned long ) 72000000 )	
N#define configTICK_RATE_HZ			( ( TickType_t ) 1000 )
N#define configMAX_PRIORITIES		( 6 )
N#define configMINIMAL_STACK_SIZE	( ( unsigned short ) 128 )
N#define configTOTAL_HEAP_SIZE		( ( size_t ) ( 17 * 1024 ) )
N#define configMAX_TASK_NAME_LEN		( 16 )
N#define configUSE_TRACE_FACILITY	0
N#define configUSE_16_BIT_TICKS		0
N#define configIDLE_SHOULD_YIELD		1
N
N/* Software timer definitions. */
N#define configUSE_TIMERS				  1
N#define configTIMER_TASK_PRIORITY		( 2 )
N#define configTIMER_QUEUE_LENGTH		  10
N#define configTIMER_TASK_STACK_DEPTH	( configMINIMAL_STACK_SIZE * 2 )
N
N#define configUSE_MUTEXES			1
N#define configUSE_RECURSIVE_MUTEXES	1
N
N/* Co-routine definitions. */
N#define configUSE_CO_ROUTINES 		0
N#define configMAX_CO_ROUTINE_PRIORITIES ( 2 )
N
N/* Set the following definitions to 1 to include the API function, or zero
Nto exclude the API function. */
N
N#define INCLUDE_vTaskPrioritySet		1
N#define INCLUDE_uxTaskPriorityGet		1
N#define INCLUDE_vTaskDelete				1
N#define INCLUDE_vTaskCleanUpResources	0
N#define INCLUDE_vTaskSuspend			1
N#define INCLUDE_vTaskDelayUntil			1
N#define INCLUDE_vTaskDelay				1
N
N/* Cortex-M specific definitions. */
N#ifdef __NVIC_PRIO_BITS
S	/* __BVIC_PRIO_BITS will be specified when CMSIS is being used. */
S	#define configPRIO_BITS       		__NVIC_PRIO_BITS
N#else
N	#define configPRIO_BITS       		4        /* 15 priority levels */
N#endif
N
N/* The lowest interrupt priority that can be used in a call to a "set priority"
Nfunction. */
N#define configLIBRARY_LOWEST_INTERRUPT_PRIORITY			0x0f
N
N/* The highest interrupt priority that can be used by any interrupt service
Nroutine that makes calls to interrupt safe FreeRTOS API functions.  DO NOT CALL
NINTERRUPT SAFE FREERTOS API FUNCTIONS FROM ANY INTERRUPT THAT HAS A HIGHER
NPRIORITY THAN THIS! (higher priorities are lower numeric values. */
N#define configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY	0x01
N
N/* Interrupt priorities used by the kernel port layer itself.  These are generic
Nto all Cortex-M ports, and do not rely on any particular library functions. */
N#define configKERNEL_INTERRUPT_PRIORITY 		( configLIBRARY_LOWEST_INTERRUPT_PRIORITY << (8 - configPRIO_BITS) )
N/* !!!! configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to zero !!!!
NSee http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html. */
N#define configMAX_SYSCALL_INTERRUPT_PRIORITY 	( configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY << (8 - configPRIO_BITS) )
N	
N/* Normal assert() semantics without relying on the provision of an assert.h
Nheader file. */
N#define configASSERT( x ) if( ( x ) == 0 ) { taskDISABLE_INTERRUPTS(); for( ;; ); }	
N	
N/* Definitions that map the FreeRTOS port interrupt handlers to their CMSIS
Nstandard names. */
N#define vPortSVCHandler SVC_Handler
N#define xPortPendSVHandler PendSV_Handler
N#define xPortSysTickHandler SysTick_Handler
N
N
N#endif /* FREERTOS_CONFIG_H */
N
L 99 "..\..\FreeRTOS\include\FreeRTOS.h" 2
N
N/* Basic FreeRTOS definitions. */
N#include "projdefs.h"
L 1 "..\..\FreeRTOS\include\projdefs.h" 1
N/*
N    FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
N    All rights reserved
N
N    VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
N
N    ***************************************************************************
N    >>!   NOTE: The modification to the GPL is included to allow you to     !<<
N    >>!   distribute a combined work that includes FreeRTOS without being   !<<
N    >>!   obliged to provide the source code for proprietary components     !<<
N    >>!   outside of the FreeRTOS kernel.                                   !<<
N    ***************************************************************************
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  Full license text is available on the following
N    link: http://www.freertos.org/a00114.html
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS provides completely free yet professionally developed,    *
N     *    robust, strictly quality controlled, supported, and cross          *
N     *    platform software that is more than just the market leader, it     *
N     *    is the industry's de facto standard.                               *
N     *                                                                       *
N     *    Help yourself get started quickly while simultaneously helping     *
N     *    to support the FreeRTOS project by purchasing a FreeRTOS           *
N     *    tutorial book, reference manual, or both:                          *
N     *    http://www.FreeRTOS.org/Documentation                              *
N     *                                                                       *
N    ***************************************************************************
N
N    http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
N    the FAQ page "My application does not run, what could be wrong?".  Have you
N    defined configASSERT()?
N
N    http://www.FreeRTOS.org/support - In return for receiving this top quality
N    embedded software for free we request you assist our global community by
N    participating in the support forum.
N
N    http://www.FreeRTOS.org/training - Investing in training allows your team to
N    be as productive as possible as early as possible.  Now you can receive
N    FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
N    Ltd, and the world's leading authority on the world's leading RTOS.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, a DOS
N    compatible FAT file system, and our tiny thread aware UDP/IP stack.
N
N    http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
N    Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
N    Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
N    licenses offer ticketed support, indemnification and commercial middleware.
N
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety
N    engineered and independently SIL3 certified version for use in safety and
N    mission critical applications that require provable dependability.
N
N    1 tab == 4 spaces!
N*/
N
N#ifndef PROJDEFS_H
N#define PROJDEFS_H
N
N/*
N * Defines the prototype to which task functions must conform.  Defined in this
N * file to ensure the type is known before portable.h is included.
N */
Ntypedef void (*TaskFunction_t)( void * );
N
N/* Converts a time in milliseconds to a time in ticks. */
N#define pdMS_TO_TICKS( xTimeInMs ) ( ( TickType_t ) ( ( ( TickType_t ) ( xTimeInMs ) * ( TickType_t ) configTICK_RATE_HZ ) / ( TickType_t ) 1000 ) )
N
N#define pdFALSE			( ( BaseType_t ) 0 )
N#define pdTRUE			( ( BaseType_t ) 1 )
N
N#define pdPASS			( pdTRUE )
N#define pdFAIL			( pdFALSE )
N#define errQUEUE_EMPTY	( ( BaseType_t ) 0 )
N#define errQUEUE_FULL	( ( BaseType_t ) 0 )
N
N/* FreeRTOS error definitions. */
N#define errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY	( -1 )
N#define errQUEUE_BLOCKED						( -4 )
N#define errQUEUE_YIELD							( -5 )
N
N/* Macros used for basic data corruption checks. */
N#ifndef configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES
N	#define configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES 0
N#endif
N
N#if( configUSE_16_BIT_TICKS == 1 )
X#if( 0 == 1 )
S	#define pdINTEGRITY_CHECK_VALUE 0x5a5a
N#else
N	#define pdINTEGRITY_CHECK_VALUE 0x5a5a5a5aUL
N#endif
N
N/* The following errno values are used by FreeRTOS+ components, not FreeRTOS
Nitself. */
N#define pdFREERTOS_ERRNO_NONE			0	/* No errors */
N#define	pdFREERTOS_ERRNO_ENOENT			2	/* No such file or directory */
N#define	pdFREERTOS_ERRNO_EIO			5	/* I/O error */
N#define	pdFREERTOS_ERRNO_ENXIO			6	/* No such device or address */
N#define	pdFREERTOS_ERRNO_EBADF			9	/* Bad file number */
N#define	pdFREERTOS_ERRNO_EAGAIN			11	/* No more processes */
N#define	pdFREERTOS_ERRNO_EWOULDBLOCK	11	/* Operation would block */
N#define	pdFREERTOS_ERRNO_ENOMEM			12	/* Not enough memory */
N#define	pdFREERTOS_ERRNO_EACCES			13	/* Permission denied */
N#define	pdFREERTOS_ERRNO_EFAULT			14	/* Bad address */
N#define	pdFREERTOS_ERRNO_EBUSY			16	/* Mount device busy */
N#define	pdFREERTOS_ERRNO_EEXIST			17	/* File exists */
N#define	pdFREERTOS_ERRNO_EXDEV			18	/* Cross-device link */
N#define	pdFREERTOS_ERRNO_ENODEV			19	/* No such device */
N#define	pdFREERTOS_ERRNO_ENOTDIR		20	/* Not a directory */
N#define	pdFREERTOS_ERRNO_EISDIR			21	/* Is a directory */
N#define	pdFREERTOS_ERRNO_EINVAL			22	/* Invalid argument */
N#define	pdFREERTOS_ERRNO_ENOSPC			28	/* No space left on device */
N#define	pdFREERTOS_ERRNO_ESPIPE			29	/* Illegal seek */
N#define	pdFREERTOS_ERRNO_EROFS			30	/* Read only file system */
N#define	pdFREERTOS_ERRNO_EUNATCH		42	/* Protocol driver not attached */
N#define	pdFREERTOS_ERRNO_EBADE			50	/* Invalid exchange */
N#define	pdFREERTOS_ERRNO_EFTYPE			79	/* Inappropriate file type or format */
N#define	pdFREERTOS_ERRNO_ENMFILE		89	/* No more files */
N#define	pdFREERTOS_ERRNO_ENOTEMPTY		90	/* Directory not empty */
N#define	pdFREERTOS_ERRNO_ENAMETOOLONG 	91	/* File or path name too long */
N#define	pdFREERTOS_ERRNO_EOPNOTSUPP		95	/* Operation not supported on transport endpoint */
N#define	pdFREERTOS_ERRNO_ENOBUFS		105	/* No buffer space available */
N#define	pdFREERTOS_ERRNO_ENOPROTOOPT	109	/* Protocol not available */
N#define	pdFREERTOS_ERRNO_EADDRINUSE		112	/* Address already in use */
N#define	pdFREERTOS_ERRNO_ETIMEDOUT		116	/* Connection timed out */
N#define	pdFREERTOS_ERRNO_EINPROGRESS	119	/* Connection already in progress */
N#define	pdFREERTOS_ERRNO_EALREADY		120	/* Socket already connected */
N#define	pdFREERTOS_ERRNO_EADDRNOTAVAIL 	125	/* Address not available */
N#define	pdFREERTOS_ERRNO_EISCONN		127	/* Socket is already connected */
N#define	pdFREERTOS_ERRNO_ENOTCONN		128	/* Socket is not connected */
N#define	pdFREERTOS_ERRNO_ENOMEDIUM		135	/* No medium inserted */
N#define	pdFREERTOS_ERRNO_EILSEQ			138	/* An invalid UTF-16 sequence was encountered. */
N#define	pdFREERTOS_ERRNO_ECANCELED		140	/* Operation canceled. */
N
N/* The following endian values are used by FreeRTOS+ components, not FreeRTOS
Nitself. */
N#define pdFREERTOS_LITTLE_ENDIAN	0
N#define pdFREERTOS_BIG_ENDIAN		1
N
N#endif /* PROJDEFS_H */
N
N
N
L 102 "..\..\FreeRTOS\include\FreeRTOS.h" 2
N
N/* Definitions specific to the port being used. */
N#include "portable.h"
L 1 "..\..\FreeRTOS\include\portable.h" 1
N/*
N    FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
N    All rights reserved
N
N    VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
N
N    ***************************************************************************
N    >>!   NOTE: The modification to the GPL is included to allow you to     !<<
N    >>!   distribute a combined work that includes FreeRTOS without being   !<<
N    >>!   obliged to provide the source code for proprietary components     !<<
N    >>!   outside of the FreeRTOS kernel.                                   !<<
N    ***************************************************************************
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  Full license text is available on the following
N    link: http://www.freertos.org/a00114.html
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS provides completely free yet professionally developed,    *
N     *    robust, strictly quality controlled, supported, and cross          *
N     *    platform software that is more than just the market leader, it     *
N     *    is the industry's de facto standard.                               *
N     *                                                                       *
N     *    Help yourself get started quickly while simultaneously helping     *
N     *    to support the FreeRTOS project by purchasing a FreeRTOS           *
N     *    tutorial book, reference manual, or both:                          *
N     *    http://www.FreeRTOS.org/Documentation                              *
N     *                                                                       *
N    ***************************************************************************
N
N    http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
N    the FAQ page "My application does not run, what could be wrong?".  Have you
N    defined configASSERT()?
N
N    http://www.FreeRTOS.org/support - In return for receiving this top quality
N    embedded software for free we request you assist our global community by
N    participating in the support forum.
N
N    http://www.FreeRTOS.org/training - Investing in training allows your team to
N    be as productive as possible as early as possible.  Now you can receive
N    FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
N    Ltd, and the world's leading authority on the world's leading RTOS.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, a DOS
N    compatible FAT file system, and our tiny thread aware UDP/IP stack.
N
N    http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
N    Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
N    Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
N    licenses offer ticketed support, indemnification and commercial middleware.
N
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety
N    engineered and independently SIL3 certified version for use in safety and
N    mission critical applications that require provable dependability.
N
N    1 tab == 4 spaces!
N*/
N
N/*-----------------------------------------------------------
N * Portable layer API.  Each function must be defined for each port.
N *----------------------------------------------------------*/
N
N#ifndef PORTABLE_H
N#define PORTABLE_H
N
N/* Each FreeRTOS port has a unique portmacro.h header file.  Originally a
Npre-processor definition was used to ensure the pre-processor found the correct
Nportmacro.h file for the port being used.  That scheme was deprecated in favour
Nof setting the compiler's include path such that it found the correct
Nportmacro.h file - removing the need for the constant and allowing the
Nportmacro.h file to be located anywhere in relation to the port being used.
NPurely for reasons of backward compatibility the old method is still valid, but
Nto make it clear that new projects should not use it, support for the port
Nspecific constants has been moved into the deprecated_definitions.h header
Nfile. */
N#include "deprecated_definitions.h"
L 1 "..\..\FreeRTOS\include\deprecated_definitions.h" 1
N/*
N    FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
N    All rights reserved
N
N    VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
N
N    ***************************************************************************
N    >>!   NOTE: The modification to the GPL is included to allow you to     !<<
N    >>!   distribute a combined work that includes FreeRTOS without being   !<<
N    >>!   obliged to provide the source code for proprietary components     !<<
N    >>!   outside of the FreeRTOS kernel.                                   !<<
N    ***************************************************************************
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  Full license text is available on the following
N    link: http://www.freertos.org/a00114.html
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS provides completely free yet professionally developed,    *
N     *    robust, strictly quality controlled, supported, and cross          *
N     *    platform software that is more than just the market leader, it     *
N     *    is the industry's de facto standard.                               *
N     *                                                                       *
N     *    Help yourself get started quickly while simultaneously helping     *
N     *    to support the FreeRTOS project by purchasing a FreeRTOS           *
N     *    tutorial book, reference manual, or both:                          *
N     *    http://www.FreeRTOS.org/Documentation                              *
N     *                                                                       *
N    ***************************************************************************
N
N    http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
N    the FAQ page "My application does not run, what could be wrong?".  Have you
N    defined configASSERT()?
N
N    http://www.FreeRTOS.org/support - In return for receiving this top quality
N    embedded software for free we request you assist our global community by
N    participating in the support forum.
N
N    http://www.FreeRTOS.org/training - Investing in training allows your team to
N    be as productive as possible as early as possible.  Now you can receive
N    FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
N    Ltd, and the world's leading authority on the world's leading RTOS.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, a DOS
N    compatible FAT file system, and our tiny thread aware UDP/IP stack.
N
N    http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
N    Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
N    Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
N    licenses offer ticketed support, indemnification and commercial middleware.
N
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety
N    engineered and independently SIL3 certified version for use in safety and
N    mission critical applications that require provable dependability.
N
N    1 tab == 4 spaces!
N*/
N
N#ifndef DEPRECATED_DEFINITIONS_H
N#define DEPRECATED_DEFINITIONS_H
N
N
N/* Each FreeRTOS port has a unique portmacro.h header file.  Originally a
Npre-processor definition was used to ensure the pre-processor found the correct
Nportmacro.h file for the port being used.  That scheme was deprecated in favour
Nof setting the compiler's include path such that it found the correct
Nportmacro.h file - removing the need for the constant and allowing the
Nportmacro.h file to be located anywhere in relation to the port being used.  The
Ndefinitions below remain in the code for backward compatibility only.  New
Nprojects should not use them. */
N
N#ifdef OPEN_WATCOM_INDUSTRIAL_PC_PORT
S	#include "..\..\Source\portable\owatcom\16bitdos\pc\portmacro.h"
S	typedef void ( __interrupt __far *pxISR )();
N#endif
N
N#ifdef OPEN_WATCOM_FLASH_LITE_186_PORT
S	#include "..\..\Source\portable\owatcom\16bitdos\flsh186\portmacro.h"
S	typedef void ( __interrupt __far *pxISR )();
N#endif
N
N#ifdef GCC_MEGA_AVR
S	#include "../portable/GCC/ATMega323/portmacro.h"
N#endif
N
N#ifdef IAR_MEGA_AVR
S	#include "../portable/IAR/ATMega323/portmacro.h"
N#endif
N
N#ifdef MPLAB_PIC24_PORT
S	#include "../../Source/portable/MPLAB/PIC24_dsPIC/portmacro.h"
N#endif
N
N#ifdef MPLAB_DSPIC_PORT
S	#include "../../Source/portable/MPLAB/PIC24_dsPIC/portmacro.h"
N#endif
N
N#ifdef MPLAB_PIC18F_PORT
S	#include "../../Source/portable/MPLAB/PIC18F/portmacro.h"
N#endif
N
N#ifdef MPLAB_PIC32MX_PORT
S	#include "../../Source/portable/MPLAB/PIC32MX/portmacro.h"
N#endif
N
N#ifdef _FEDPICC
S	#include "libFreeRTOS/Include/portmacro.h"
N#endif
N
N#ifdef SDCC_CYGNAL
S	#include "../../Source/portable/SDCC/Cygnal/portmacro.h"
N#endif
N
N#ifdef GCC_ARM7
S	#include "../../Source/portable/GCC/ARM7_LPC2000/portmacro.h"
N#endif
N
N#ifdef GCC_ARM7_ECLIPSE
S	#include "portmacro.h"
N#endif
N
N#ifdef ROWLEY_LPC23xx
S	#include "../../Source/portable/GCC/ARM7_LPC23xx/portmacro.h"
N#endif
N
N#ifdef IAR_MSP430
S	#include "..\..\Source\portable\IAR\MSP430\portmacro.h"
N#endif
N
N#ifdef GCC_MSP430
S	#include "../../Source/portable/GCC/MSP430F449/portmacro.h"
N#endif
N
N#ifdef ROWLEY_MSP430
S	#include "../../Source/portable/Rowley/MSP430F449/portmacro.h"
N#endif
N
N#ifdef ARM7_LPC21xx_KEIL_RVDS
S	#include "..\..\Source\portable\RVDS\ARM7_LPC21xx\portmacro.h"
N#endif
N
N#ifdef SAM7_GCC
S	#include "../../Source/portable/GCC/ARM7_AT91SAM7S/portmacro.h"
N#endif
N
N#ifdef SAM7_IAR
S	#include "..\..\Source\portable\IAR\AtmelSAM7S64\portmacro.h"
N#endif
N
N#ifdef SAM9XE_IAR
S	#include "..\..\Source\portable\IAR\AtmelSAM9XE\portmacro.h"
N#endif
N
N#ifdef LPC2000_IAR
S	#include "..\..\Source\portable\IAR\LPC2000\portmacro.h"
N#endif
N
N#ifdef STR71X_IAR
S	#include "..\..\Source\portable\IAR\STR71x\portmacro.h"
N#endif
N
N#ifdef STR75X_IAR
S	#include "..\..\Source\portable\IAR\STR75x\portmacro.h"
N#endif
N
N#ifdef STR75X_GCC
S	#include "..\..\Source\portable\GCC\STR75x\portmacro.h"
N#endif
N
N#ifdef STR91X_IAR
S	#include "..\..\Source\portable\IAR\STR91x\portmacro.h"
N#endif
N
N#ifdef GCC_H8S
S	#include "../../Source/portable/GCC/H8S2329/portmacro.h"
N#endif
N
N#ifdef GCC_AT91FR40008
S	#include "../../Source/portable/GCC/ARM7_AT91FR40008/portmacro.h"
N#endif
N
N#ifdef RVDS_ARMCM3_LM3S102
S	#include "../../Source/portable/RVDS/ARM_CM3/portmacro.h"
N#endif
N
N#ifdef GCC_ARMCM3_LM3S102
S	#include "../../Source/portable/GCC/ARM_CM3/portmacro.h"
N#endif
N
N#ifdef GCC_ARMCM3
S	#include "../../Source/portable/GCC/ARM_CM3/portmacro.h"
N#endif
N
N#ifdef IAR_ARM_CM3
S	#include "../../Source/portable/IAR/ARM_CM3/portmacro.h"
N#endif
N
N#ifdef IAR_ARMCM3_LM
S	#include "../../Source/portable/IAR/ARM_CM3/portmacro.h"
N#endif
N
N#ifdef HCS12_CODE_WARRIOR
S	#include "../../Source/portable/CodeWarrior/HCS12/portmacro.h"
N#endif
N
N#ifdef MICROBLAZE_GCC
S	#include "../../Source/portable/GCC/MicroBlaze/portmacro.h"
N#endif
N
N#ifdef TERN_EE
S	#include "..\..\Source\portable\Paradigm\Tern_EE\small\portmacro.h"
N#endif
N
N#ifdef GCC_HCS12
S	#include "../../Source/portable/GCC/HCS12/portmacro.h"
N#endif
N
N#ifdef GCC_MCF5235
S    #include "../../Source/portable/GCC/MCF5235/portmacro.h"
N#endif
N
N#ifdef COLDFIRE_V2_GCC
S	#include "../../../Source/portable/GCC/ColdFire_V2/portmacro.h"
N#endif
N
N#ifdef COLDFIRE_V2_CODEWARRIOR
S	#include "../../Source/portable/CodeWarrior/ColdFire_V2/portmacro.h"
N#endif
N
N#ifdef GCC_PPC405
S	#include "../../Source/portable/GCC/PPC405_Xilinx/portmacro.h"
N#endif
N
N#ifdef GCC_PPC440
S	#include "../../Source/portable/GCC/PPC440_Xilinx/portmacro.h"
N#endif
N
N#ifdef _16FX_SOFTUNE
S	#include "..\..\Source\portable\Softune\MB96340\portmacro.h"
N#endif
N
N#ifdef BCC_INDUSTRIAL_PC_PORT
S	/* A short file name has to be used in place of the normal
S	FreeRTOSConfig.h when using the Borland compiler. */
S	#include "frconfig.h"
S	#include "..\portable\BCC\16BitDOS\PC\prtmacro.h"
S    typedef void ( __interrupt __far *pxISR )();
N#endif
N
N#ifdef BCC_FLASH_LITE_186_PORT
S	/* A short file name has to be used in place of the normal
S	FreeRTOSConfig.h when using the Borland compiler. */
S	#include "frconfig.h"
S	#include "..\portable\BCC\16BitDOS\flsh186\prtmacro.h"
S    typedef void ( __interrupt __far *pxISR )();
N#endif
N
N#ifdef __GNUC__
S   #ifdef __AVR32_AVR32A__
S	   #include "portmacro.h"
S   #endif
N#endif
N
N#ifdef __ICCAVR32__
S   #ifdef __CORE__
S      #if __CORE__ == __AVR32A__
S	      #include "portmacro.h"
S      #endif
S   #endif
N#endif
N
N#ifdef __91467D
S	#include "portmacro.h"
N#endif
N
N#ifdef __96340
S	#include "portmacro.h"
N#endif
N
N
N#ifdef __IAR_V850ES_Fx3__
S	#include "../../Source/portable/IAR/V850ES/portmacro.h"
N#endif
N
N#ifdef __IAR_V850ES_Jx3__
S	#include "../../Source/portable/IAR/V850ES/portmacro.h"
N#endif
N
N#ifdef __IAR_V850ES_Jx3_L__
S	#include "../../Source/portable/IAR/V850ES/portmacro.h"
N#endif
N
N#ifdef __IAR_V850ES_Jx2__
S	#include "../../Source/portable/IAR/V850ES/portmacro.h"
N#endif
N
N#ifdef __IAR_V850ES_Hx2__
S	#include "../../Source/portable/IAR/V850ES/portmacro.h"
N#endif
N
N#ifdef __IAR_78K0R_Kx3__
S	#include "../../Source/portable/IAR/78K0R/portmacro.h"
N#endif
N
N#ifdef __IAR_78K0R_Kx3L__
S	#include "../../Source/portable/IAR/78K0R/portmacro.h"
N#endif
N
N#endif /* DEPRECATED_DEFINITIONS_H */
N
L 88 "..\..\FreeRTOS\include\portable.h" 2
N
N/* If portENTER_CRITICAL is not defined then including deprecated_definitions.h
Ndid not result in a portmacro.h header file being included - and it should be
Nincluded here.  In this case the path to the correct portmacro.h header file
Nmust be set in the compiler's include path. */
N#ifndef portENTER_CRITICAL
N	#include "portmacro.h"
L 1 "..\..\FreeRTOS\portable\RVDS\ARM_CM3\portmacro.h" 1
N/*
N    FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
N    All rights reserved
N
N    VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
N
N    ***************************************************************************
N    >>!   NOTE: The modification to the GPL is included to allow you to     !<<
N    >>!   distribute a combined work that includes FreeRTOS without being   !<<
N    >>!   obliged to provide the source code for proprietary components     !<<
N    >>!   outside of the FreeRTOS kernel.                                   !<<
N    ***************************************************************************
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  Full license text is available on the following
N    link: http://www.freertos.org/a00114.html
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS provides completely free yet professionally developed,    *
N     *    robust, strictly quality controlled, supported, and cross          *
N     *    platform software that is more than just the market leader, it     *
N     *    is the industry's de facto standard.                               *
N     *                                                                       *
N     *    Help yourself get started quickly while simultaneously helping     *
N     *    to support the FreeRTOS project by purchasing a FreeRTOS           *
N     *    tutorial book, reference manual, or both:                          *
N     *    http://www.FreeRTOS.org/Documentation                              *
N     *                                                                       *
N    ***************************************************************************
N
N    http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
N    the FAQ page "My application does not run, what could be wrong?".  Have you
N    defined configASSERT()?
N
N    http://www.FreeRTOS.org/support - In return for receiving this top quality
N    embedded software for free we request you assist our global community by
N    participating in the support forum.
N
N    http://www.FreeRTOS.org/training - Investing in training allows your team to
N    be as productive as possible as early as possible.  Now you can receive
N    FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
N    Ltd, and the world's leading authority on the world's leading RTOS.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, a DOS
N    compatible FAT file system, and our tiny thread aware UDP/IP stack.
N
N    http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
N    Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
N    Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
N    licenses offer ticketed support, indemnification and commercial middleware.
N
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety
N    engineered and independently SIL3 certified version for use in safety and
N    mission critical applications that require provable dependability.
N
N    1 tab == 4 spaces!
N*/
N
N
N#ifndef PORTMACRO_H
N#define PORTMACRO_H
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/*-----------------------------------------------------------
N * Port specific definitions.
N *
N * The settings in this file configure FreeRTOS correctly for the
N * given hardware and compiler.
N *
N * These settings should not be altered.
N *-----------------------------------------------------------
N */
N
N/* Type definitions. */
N#define portCHAR		char
N#define portFLOAT		float
N#define portDOUBLE		double
N#define portLONG		long
N#define portSHORT		short
N#define portSTACK_TYPE	uint32_t
N#define portBASE_TYPE	long
N
Ntypedef portSTACK_TYPE StackType_t;
Xtypedef uint32_t StackType_t;
Ntypedef long BaseType_t;
Ntypedef unsigned long UBaseType_t;
N
N#if( configUSE_16_BIT_TICKS == 1 )
X#if( 0 == 1 )
S	typedef uint16_t TickType_t;
S	#define portMAX_DELAY ( TickType_t ) 0xffff
N#else
N	typedef uint32_t TickType_t;
N	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
N
N	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
N	not need to be guarded with a critical section. */
N	#define portTICK_TYPE_IS_ATOMIC 1
N#endif
N/*-----------------------------------------------------------*/
N
N/* Architecture specifics. */
N#define portSTACK_GROWTH			( -1 )
N#define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
N#define portBYTE_ALIGNMENT			8
N/*-----------------------------------------------------------*/
N
N/* Scheduler utilities. */
Nextern void vPortYield( void );
N#define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
N#define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
N#define portYIELD()					vPortYield()
N#define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired ) portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT
N#define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
N/*-----------------------------------------------------------*/
N
N/* Critical section management. */
Nextern uint32_t ulPortSetInterruptMask( void );
Nextern void vPortClearInterruptMask( uint32_t ulNewMask );
Nextern void vPortEnterCritical( void );
Nextern void vPortExitCritical( void );
N
N#define portDISABLE_INTERRUPTS()				ulPortSetInterruptMask()
N#define portENABLE_INTERRUPTS()					vPortClearInterruptMask( 0 )
N#define portENTER_CRITICAL()					vPortEnterCritical()
N#define portEXIT_CRITICAL()						vPortExitCritical()
N#define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortSetInterruptMask()
N#define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortClearInterruptMask(x)
N/*-----------------------------------------------------------*/
N
N/* Tickless idle/low power functionality. */
N#ifndef portSUPPRESS_TICKS_AND_SLEEP
N	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
N	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdleTime )
N#endif
N/*-----------------------------------------------------------*/
N
N/* Port specific optimisations. */
N#ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
N	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
N#endif
N
N#if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
X#if 1 == 1
N
N	/* Check the configuration. */
N	#if( configMAX_PRIORITIES > 32 )
X	#if( ( 6 ) > 32 )
S		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is less than or equal to 32.  It is very rare that a system requires more than 10 to 15 difference priorities as tasks that share a priority will time slice.
N	#endif
N
N	/* Store/clear the ready priorities in a bit map. */
N	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL << ( uxPriority ) )
N	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL << ( uxPriority ) )
N
N	/*-----------------------------------------------------------*/
N
N	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31 - __clz( ( uxReadyPriorities ) ) )
N
N#endif /* taskRECORD_READY_PRIORITY */
N/*-----------------------------------------------------------*/
N
N/* Task function macros as described on the FreeRTOS.org WEB site.  These are
Nnot necessary for to use this port.  They are defined so the common demo files
N(which build with all the ports) will build. */
N#define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
N#define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
N/*-----------------------------------------------------------*/
N
N#ifdef configASSERT
N	void vPortValidateInterruptPriority( void );
N	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
N#endif
N
N/* portNOP() is not required by this port. */
N#define portNOP()
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* PORTMACRO_H */
N
L 95 "..\..\FreeRTOS\include\portable.h" 2
N#endif
N
N#if portBYTE_ALIGNMENT == 32
X#if 8 == 32
S	#define portBYTE_ALIGNMENT_MASK ( 0x001f )
N#endif
N
N#if portBYTE_ALIGNMENT == 16
X#if 8 == 16
S	#define portBYTE_ALIGNMENT_MASK ( 0x000f )
N#endif
N
N#if portBYTE_ALIGNMENT == 8
X#if 8 == 8
N	#define portBYTE_ALIGNMENT_MASK ( 0x0007 )
N#endif
N
N#if portBYTE_ALIGNMENT == 4
X#if 8 == 4
S	#define portBYTE_ALIGNMENT_MASK	( 0x0003 )
N#endif
N
N#if portBYTE_ALIGNMENT == 2
X#if 8 == 2
S	#define portBYTE_ALIGNMENT_MASK	( 0x0001 )
N#endif
N
N#if portBYTE_ALIGNMENT == 1
X#if 8 == 1
S	#define portBYTE_ALIGNMENT_MASK	( 0x0000 )
N#endif
N
N#ifndef portBYTE_ALIGNMENT_MASK
S	#error "Invalid portBYTE_ALIGNMENT definition"
N#endif
N
N#ifndef portNUM_CONFIGURABLE_REGIONS
N	#define portNUM_CONFIGURABLE_REGIONS 1
N#endif
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include "mpu_wrappers.h"
L 1 "..\..\FreeRTOS\include\mpu_wrappers.h" 1
N/*
N    FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
N    All rights reserved
N
N    VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
N
N    ***************************************************************************
N    >>!   NOTE: The modification to the GPL is included to allow you to     !<<
N    >>!   distribute a combined work that includes FreeRTOS without being   !<<
N    >>!   obliged to provide the source code for proprietary components     !<<
N    >>!   outside of the FreeRTOS kernel.                                   !<<
N    ***************************************************************************
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  Full license text is available on the following
N    link: http://www.freertos.org/a00114.html
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS provides completely free yet professionally developed,    *
N     *    robust, strictly quality controlled, supported, and cross          *
N     *    platform software that is more than just the market leader, it     *
N     *    is the industry's de facto standard.                               *
N     *                                                                       *
N     *    Help yourself get started quickly while simultaneously helping     *
N     *    to support the FreeRTOS project by purchasing a FreeRTOS           *
N     *    tutorial book, reference manual, or both:                          *
N     *    http://www.FreeRTOS.org/Documentation                              *
N     *                                                                       *
N    ***************************************************************************
N
N    http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
N    the FAQ page "My application does not run, what could be wrong?".  Have you
N    defined configASSERT()?
N
N    http://www.FreeRTOS.org/support - In return for receiving this top quality
N    embedded software for free we request you assist our global community by
N    participating in the support forum.
N
N    http://www.FreeRTOS.org/training - Investing in training allows your team to
N    be as productive as possible as early as possible.  Now you can receive
N    FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
N    Ltd, and the world's leading authority on the world's leading RTOS.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, a DOS
N    compatible FAT file system, and our tiny thread aware UDP/IP stack.
N
N    http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
N    Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
N    Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
N    licenses offer ticketed support, indemnification and commercial middleware.
N
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety
N    engineered and independently SIL3 certified version for use in safety and
N    mission critical applications that require provable dependability.
N
N    1 tab == 4 spaces!
N*/
N
N#ifndef MPU_WRAPPERS_H
N#define MPU_WRAPPERS_H
N
N/* This file redefines API functions to be called through a wrapper macro, but
Nonly for ports that are using the MPU. */
N#ifdef portUSING_MPU_WRAPPERS
S
S	/* MPU_WRAPPERS_INCLUDED_FROM_API_FILE will be defined when this file is
S	included from queue.c or task.c to prevent it from having an effect within
S	those files. */
S	#ifndef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
S
S		#define xTaskGenericCreate				MPU_xTaskGenericCreate
S		#define vTaskAllocateMPURegions			MPU_vTaskAllocateMPURegions
S		#define vTaskDelete						MPU_vTaskDelete
S		#define vTaskDelayUntil					MPU_vTaskDelayUntil
S		#define vTaskDelay						MPU_vTaskDelay
S		#define uxTaskPriorityGet				MPU_uxTaskPriorityGet
S		#define vTaskPrioritySet				MPU_vTaskPrioritySet
S		#define eTaskGetState					MPU_eTaskGetState
S		#define vTaskSuspend					MPU_vTaskSuspend
S		#define vTaskResume						MPU_vTaskResume
S		#define vTaskSuspendAll					MPU_vTaskSuspendAll
S		#define xTaskResumeAll					MPU_xTaskResumeAll
S		#define xTaskGetTickCount				MPU_xTaskGetTickCount
S		#define uxTaskGetNumberOfTasks			MPU_uxTaskGetNumberOfTasks
S		#define vTaskList						MPU_vTaskList
S		#define vTaskGetRunTimeStats			MPU_vTaskGetRunTimeStats
S		#define vTaskSetApplicationTaskTag		MPU_vTaskSetApplicationTaskTag
S		#define xTaskGetApplicationTaskTag		MPU_xTaskGetApplicationTaskTag
S		#define xTaskCallApplicationTaskHook	MPU_xTaskCallApplicationTaskHook
S		#define uxTaskGetStackHighWaterMark		MPU_uxTaskGetStackHighWaterMark
S		#define xTaskGetCurrentTaskHandle		MPU_xTaskGetCurrentTaskHandle
S		#define xTaskGetSchedulerState			MPU_xTaskGetSchedulerState
S		#define xTaskGetIdleTaskHandle			MPU_xTaskGetIdleTaskHandle
S		#define uxTaskGetSystemState			MPU_uxTaskGetSystemState
S		#define xTaskGenericNotify				MPU_xTaskGenericNotify
S		#define xTaskNotifyWait					MPU_xTaskNotifyWait
S		#define ulTaskNotifyTake				MPU_ulTaskNotifyTake
S
S		#define xQueueGenericCreate				MPU_xQueueGenericCreate
S		#define xQueueCreateMutex				MPU_xQueueCreateMutex
S		#define xQueueGiveMutexRecursive		MPU_xQueueGiveMutexRecursive
S		#define xQueueTakeMutexRecursive		MPU_xQueueTakeMutexRecursive
S		#define xQueueCreateCountingSemaphore	MPU_xQueueCreateCountingSemaphore
S		#define xQueueGenericSend				MPU_xQueueGenericSend
S		#define xQueueAltGenericSend			MPU_xQueueAltGenericSend
S		#define xQueueAltGenericReceive			MPU_xQueueAltGenericReceive
S		#define xQueueGenericReceive			MPU_xQueueGenericReceive
S		#define uxQueueMessagesWaiting			MPU_uxQueueMessagesWaiting
S		#define vQueueDelete					MPU_vQueueDelete
S		#define xQueueGenericReset				MPU_xQueueGenericReset
S		#define xQueueCreateSet					MPU_xQueueCreateSet
S		#define xQueueSelectFromSet				MPU_xQueueSelectFromSet
S		#define xQueueAddToSet					MPU_xQueueAddToSet
S		#define xQueueRemoveFromSet				MPU_xQueueRemoveFromSet
S		#define xQueueGetMutexHolder			MPU_xQueueGetMutexHolder
S		#define xQueueGetMutexHolder			MPU_xQueueGetMutexHolder
S
S		#define pvPortMalloc					MPU_pvPortMalloc
S		#define vPortFree						MPU_vPortFree
S		#define xPortGetFreeHeapSize			MPU_xPortGetFreeHeapSize
S		#define vPortInitialiseBlocks			MPU_vPortInitialiseBlocks
S		#define xPortGetMinimumEverFreeHeapSize	MPU_xPortGetMinimumEverFreeHeapSize
S
S		#if configQUEUE_REGISTRY_SIZE > 0
S			#define vQueueAddToRegistry				MPU_vQueueAddToRegistry
S			#define vQueueUnregisterQueue			MPU_vQueueUnregisterQueue
S		#endif
S
S		#define xTimerCreate					MPU_xTimerCreate
S		#define pvTimerGetTimerID				MPU_pvTimerGetTimerID
S		#define vTimerSetTimerID				MPU_vTimerSetTimerID
S		#define xTimerIsTimerActive				MPU_xTimerIsTimerActive
S		#define xTimerGetTimerDaemonTaskHandle	MPU_xTimerGetTimerDaemonTaskHandle
S		#define xTimerPendFunctionCall			MPU_xTimerPendFunctionCall
S		#define pcTimerGetTimerName				MPU_pcTimerGetTimerName
S		#define xTimerGenericCommand			MPU_xTimerGenericCommand
S
S		#define xEventGroupCreate				MPU_xEventGroupCreate
S		#define xEventGroupWaitBits				MPU_xEventGroupWaitBits
S		#define xEventGroupClearBits			MPU_xEventGroupClearBits
S		#define xEventGroupSetBits				MPU_xEventGroupSetBits
S		#define xEventGroupSync					MPU_xEventGroupSync
S		#define vEventGroupDelete				MPU_vEventGroupDelete
S
S		/* Remove the privileged function macro. */
S		#define PRIVILEGED_FUNCTION
S
S	#else /* MPU_WRAPPERS_INCLUDED_FROM_API_FILE */
S
S		/* Ensure API functions go in the privileged execution section. */
S		#define PRIVILEGED_FUNCTION __attribute__((section("privileged_functions")))
S		#define PRIVILEGED_DATA __attribute__((section("privileged_data")))
S
S	#endif /* MPU_WRAPPERS_INCLUDED_FROM_API_FILE */
S
N#else /* portUSING_MPU_WRAPPERS */
N
N	#define PRIVILEGED_FUNCTION
N	#define PRIVILEGED_DATA
N	#define portUSING_MPU_WRAPPERS 0
N
N#endif /* portUSING_MPU_WRAPPERS */
N
N
N#endif /* MPU_WRAPPERS_H */
N
L 134 "..\..\FreeRTOS\include\portable.h" 2
N
N/*
N * Setup the stack of a new task so it is ready to be placed under the
N * scheduler control.  The registers have to be placed on the stack in
N * the order that the port expects to find them.
N *
N */
N#if( portUSING_MPU_WRAPPERS == 1 )
X#if( 0 == 1 )
S	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) PRIVILEGED_FUNCTION;
N#else
N	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters ) PRIVILEGED_FUNCTION;
X	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters ) ;
N#endif
N
N/* Used by heap_5.c. */
Ntypedef struct HeapRegion
N{
N	uint8_t *pucStartAddress;
N	size_t xSizeInBytes;
N} HeapRegion_t;
N
N/*
N * Used to define multiple heap regions for use by heap_5.c.  This function
N * must be called before any calls to pvPortMalloc() - not creating a task,
N * queue, semaphore, mutex, software timer, event group, etc. will result in
N * pvPortMalloc being called.
N *
N * pxHeapRegions passes in an array of HeapRegion_t structures - each of which
N * defines a region of memory that can be used as the heap.  The array is
N * terminated by a HeapRegions_t structure that has a size of 0.  The region
N * with the lowest start address must appear first in the array.
N */
Nvoid vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions ) PRIVILEGED_FUNCTION;
Xvoid vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions ) ;
N
N
N/*
N * Map to the memory management routines required for the port.
N */
Nvoid *pvPortMalloc( size_t xSize ) PRIVILEGED_FUNCTION;
Xvoid *pvPortMalloc( size_t xSize ) ;
Nvoid vPortFree( void *pv ) PRIVILEGED_FUNCTION;
Xvoid vPortFree( void *pv ) ;
Nvoid vPortInitialiseBlocks( void ) PRIVILEGED_FUNCTION;
Xvoid vPortInitialiseBlocks( void ) ;
Nsize_t xPortGetFreeHeapSize( void ) PRIVILEGED_FUNCTION;
Xsize_t xPortGetFreeHeapSize( void ) ;
Nsize_t xPortGetMinimumEverFreeHeapSize( void ) PRIVILEGED_FUNCTION;
Xsize_t xPortGetMinimumEverFreeHeapSize( void ) ;
N
N/*
N * Setup the hardware ready for the scheduler to take control.  This generally
N * sets up a tick interrupt and sets timers for the correct tick frequency.
N */
NBaseType_t xPortStartScheduler( void ) PRIVILEGED_FUNCTION;
XBaseType_t xPortStartScheduler( void ) ;
N
N/*
N * Undo any hardware/ISR setup that was performed by xPortStartScheduler() so
N * the hardware is left in its original condition after the scheduler stops
N * executing.
N */
Nvoid vPortEndScheduler( void ) PRIVILEGED_FUNCTION;
Xvoid vPortEndScheduler( void ) ;
N
N/*
N * The structures and methods of manipulating the MPU are contained within the
N * port layer.
N *
N * Fills the xMPUSettings structure with the memory region information
N * contained in xRegions.
N */
N#if( portUSING_MPU_WRAPPERS == 1 )
X#if( 0 == 1 )
S	struct xMEMORY_REGION;
S	void vPortStoreTaskMPUSettings( xMPU_SETTINGS *xMPUSettings, const struct xMEMORY_REGION * const xRegions, StackType_t *pxBottomOfStack, uint16_t usStackDepth ) PRIVILEGED_FUNCTION;
N#endif
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* PORTABLE_H */
N
L 105 "..\..\FreeRTOS\include\FreeRTOS.h" 2
N
N/*
N * Check all the required application specific macros have been defined.
N * These macros are application specific and (as downloaded) are defined
N * within FreeRTOSConfig.h.
N */
N
N#ifndef configMINIMAL_STACK_SIZE
S	#error Missing definition:  configMINIMAL_STACK_SIZE must be defined in FreeRTOSConfig.h.  configMINIMAL_STACK_SIZE defines the size (in words) of the stack allocated to the idle task.  Refer to the demo project provided for your port for a suitable value.
N#endif
N
N#ifndef configMAX_PRIORITIES
S	#error Missing definition:  configMAX_PRIORITIES must be defined in FreeRTOSConfig.h.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef configUSE_PREEMPTION
S	#error Missing definition:  configUSE_PREEMPTION must be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef configUSE_IDLE_HOOK
S	#error Missing definition:  configUSE_IDLE_HOOK must be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef configUSE_TICK_HOOK
S	#error Missing definition:  configUSE_TICK_HOOK must be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef INCLUDE_vTaskPrioritySet
S	#error Missing definition:  INCLUDE_vTaskPrioritySet must be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef INCLUDE_uxTaskPriorityGet
S	#error Missing definition:  INCLUDE_uxTaskPriorityGet must be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef INCLUDE_vTaskDelete
S	#error Missing definition:  INCLUDE_vTaskDelete must be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef INCLUDE_vTaskSuspend
S	#error Missing definition:  INCLUDE_vTaskSuspend must be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef INCLUDE_vTaskDelayUntil
S	#error Missing definition:  INCLUDE_vTaskDelayUntil must be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef INCLUDE_vTaskDelay
S	#error Missing definition:  INCLUDE_vTaskDelay must be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef configUSE_16_BIT_TICKS
S	#error Missing definition:  configUSE_16_BIT_TICKS must be defined in FreeRTOSConfig.h as either 1 or 0.  See the Configuration section of the FreeRTOS API documentation for details.
N#endif
N
N#ifndef configMAX_PRIORITIES
S	#error configMAX_PRIORITIES must be defined to be greater than or equal to 1.
N#endif
N
N#ifndef configUSE_CO_ROUTINES
S	#define configUSE_CO_ROUTINES 0
N#endif
N
N#if configUSE_CO_ROUTINES != 0
X#if 0 != 0
S	#ifndef configMAX_CO_ROUTINE_PRIORITIES
S		#error configMAX_CO_ROUTINE_PRIORITIES must be greater than or equal to 1.
S	#endif
N#endif
N
N#ifndef INCLUDE_xTaskGetIdleTaskHandle
N	#define INCLUDE_xTaskGetIdleTaskHandle 0
N#endif
N
N#ifndef INCLUDE_xTimerGetTimerDaemonTaskHandle
N	#define INCLUDE_xTimerGetTimerDaemonTaskHandle 0
N#endif
N
N#ifndef INCLUDE_xQueueGetMutexHolder
N	#define INCLUDE_xQueueGetMutexHolder 0
N#endif
N
N#ifndef INCLUDE_xSemaphoreGetMutexHolder
N	#define INCLUDE_xSemaphoreGetMutexHolder INCLUDE_xQueueGetMutexHolder
N#endif
N
N#ifndef INCLUDE_pcTaskGetTaskName
N	#define INCLUDE_pcTaskGetTaskName 0
N#endif
N
N#ifndef configUSE_APPLICATION_TASK_TAG
N	#define configUSE_APPLICATION_TASK_TAG 0
N#endif
N
N#ifndef configNUM_THREAD_LOCAL_STORAGE_POINTERS
N	#define configNUM_THREAD_LOCAL_STORAGE_POINTERS 0
N#endif
N
N#ifndef INCLUDE_uxTaskGetStackHighWaterMark
N	#define INCLUDE_uxTaskGetStackHighWaterMark 0
N#endif
N
N#ifndef INCLUDE_eTaskGetState
N	#define INCLUDE_eTaskGetState 0
N#endif
N
N#ifndef configUSE_RECURSIVE_MUTEXES
S	#define configUSE_RECURSIVE_MUTEXES 0
N#endif
N
N#ifndef configUSE_MUTEXES
S	#define configUSE_MUTEXES 0
N#endif
N
N#ifndef configUSE_TIMERS
S	#define configUSE_TIMERS 0
N#endif
N
N#ifndef configUSE_COUNTING_SEMAPHORES
N	#define configUSE_COUNTING_SEMAPHORES 0
N#endif
N
N#ifndef configUSE_ALTERNATIVE_API
N	#define configUSE_ALTERNATIVE_API 0
N#endif
N
N#ifndef portCRITICAL_NESTING_IN_TCB
N	#define portCRITICAL_NESTING_IN_TCB 0
N#endif
N
N#ifndef configMAX_TASK_NAME_LEN
S	#define configMAX_TASK_NAME_LEN 16
N#endif
N
N#ifndef configIDLE_SHOULD_YIELD
S	#define configIDLE_SHOULD_YIELD		1
N#endif
N
N#if configMAX_TASK_NAME_LEN < 1
X#if ( 16 ) < 1
S	#error configMAX_TASK_NAME_LEN must be set to a minimum of 1 in FreeRTOSConfig.h
N#endif
N
N#ifndef INCLUDE_xTaskResumeFromISR
N	#define INCLUDE_xTaskResumeFromISR 1
N#endif
N
N#ifndef INCLUDE_xEventGroupSetBitFromISR
N	#define INCLUDE_xEventGroupSetBitFromISR 0
N#endif
N
N#ifndef INCLUDE_xTimerPendFunctionCall
N	#define INCLUDE_xTimerPendFunctionCall 0
N#endif
N
N#ifndef configASSERT
S	#define configASSERT( x )
S	#define configASSERT_DEFINED 0
N#else
N	#define configASSERT_DEFINED 1
N#endif
N
N/* The timers module relies on xTaskGetSchedulerState(). */
N#if configUSE_TIMERS == 1
X#if 1 == 1
N
N	#ifndef configTIMER_TASK_PRIORITY
S		#error If configUSE_TIMERS is set to 1 then configTIMER_TASK_PRIORITY must also be defined.
N	#endif /* configTIMER_TASK_PRIORITY */
N
N	#ifndef configTIMER_QUEUE_LENGTH
S		#error If configUSE_TIMERS is set to 1 then configTIMER_QUEUE_LENGTH must also be defined.
N	#endif /* configTIMER_QUEUE_LENGTH */
N
N	#ifndef configTIMER_TASK_STACK_DEPTH
S		#error If configUSE_TIMERS is set to 1 then configTIMER_TASK_STACK_DEPTH must also be defined.
N	#endif /* configTIMER_TASK_STACK_DEPTH */
N
N#endif /* configUSE_TIMERS */
N
N#ifndef INCLUDE_xTaskGetSchedulerState
N	#define INCLUDE_xTaskGetSchedulerState 0
N#endif
N
N#ifndef INCLUDE_xTaskGetCurrentTaskHandle
N	#define INCLUDE_xTaskGetCurrentTaskHandle 0
N#endif
N
N
N#ifndef portSET_INTERRUPT_MASK_FROM_ISR
S	#define portSET_INTERRUPT_MASK_FROM_ISR() 0
N#endif
N
N#ifndef portCLEAR_INTERRUPT_MASK_FROM_ISR
S	#define portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedStatusValue ) ( void ) uxSavedStatusValue
N#endif
N
N#ifndef portCLEAN_UP_TCB
N	#define portCLEAN_UP_TCB( pxTCB ) ( void ) pxTCB
N#endif
N
N#ifndef portPRE_TASK_DELETE_HOOK
N	#define portPRE_TASK_DELETE_HOOK( pvTaskToDelete, pxYieldPending )
N#endif
N
N#ifndef portSETUP_TCB
N	#define portSETUP_TCB( pxTCB ) ( void ) pxTCB
N#endif
N
N#ifndef configQUEUE_REGISTRY_SIZE
N	#define configQUEUE_REGISTRY_SIZE 0U
N#endif
N
N#if ( configQUEUE_REGISTRY_SIZE < 1 )
X#if ( 0U < 1 )
N	#define vQueueAddToRegistry( xQueue, pcName )
N	#define vQueueUnregisterQueue( xQueue )
N#endif
N
N#ifndef portPOINTER_SIZE_TYPE
N	#define portPOINTER_SIZE_TYPE uint32_t
N#endif
N
N/* Remove any unused trace macros. */
N#ifndef traceSTART
N	/* Used to perform any necessary initialisation - for example, open a file
N	into which trace is to be written. */
N	#define traceSTART()
N#endif
N
N#ifndef traceEND
N	/* Use to close a trace, for example close a file into which trace has been
N	written. */
N	#define traceEND()
N#endif
N
N#ifndef traceTASK_SWITCHED_IN
N	/* Called after a task has been selected to run.  pxCurrentTCB holds a pointer
N	to the task control block of the selected task. */
N	#define traceTASK_SWITCHED_IN()
N#endif
N
N#ifndef traceINCREASE_TICK_COUNT
N	/* Called before stepping the tick count after waking from tickless idle
N	sleep. */
N	#define traceINCREASE_TICK_COUNT( x )
N#endif
N
N#ifndef traceLOW_POWER_IDLE_BEGIN
N	/* Called immediately before entering tickless idle. */
N	#define traceLOW_POWER_IDLE_BEGIN()
N#endif
N
N#ifndef	traceLOW_POWER_IDLE_END
N	/* Called when returning to the Idle task after a tickless idle. */
N	#define traceLOW_POWER_IDLE_END()
N#endif
N
N#ifndef traceTASK_SWITCHED_OUT
N	/* Called before a task has been selected to run.  pxCurrentTCB holds a pointer
N	to the task control block of the task being switched out. */
N	#define traceTASK_SWITCHED_OUT()
N#endif
N
N#ifndef traceTASK_PRIORITY_INHERIT
N	/* Called when a task attempts to take a mutex that is already held by a
N	lower priority task.  pxTCBOfMutexHolder is a pointer to the TCB of the task
N	that holds the mutex.  uxInheritedPriority is the priority the mutex holder
N	will inherit (the priority of the task that is attempting to obtain the
N	muted. */
N	#define traceTASK_PRIORITY_INHERIT( pxTCBOfMutexHolder, uxInheritedPriority )
N#endif
N
N#ifndef traceTASK_PRIORITY_DISINHERIT
N	/* Called when a task releases a mutex, the holding of which had resulted in
N	the task inheriting the priority of a higher priority task.
N	pxTCBOfMutexHolder is a pointer to the TCB of the task that is releasing the
N	mutex.  uxOriginalPriority is the task's configured (base) priority. */
N	#define traceTASK_PRIORITY_DISINHERIT( pxTCBOfMutexHolder, uxOriginalPriority )
N#endif
N
N#ifndef traceBLOCKING_ON_QUEUE_RECEIVE
N	/* Task is about to block because it cannot read from a
N	queue/mutex/semaphore.  pxQueue is a pointer to the queue/mutex/semaphore
N	upon which the read was attempted.  pxCurrentTCB points to the TCB of the
N	task that attempted the read. */
N	#define traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue )
N#endif
N
N#ifndef traceBLOCKING_ON_QUEUE_SEND
N	/* Task is about to block because it cannot write to a
N	queue/mutex/semaphore.  pxQueue is a pointer to the queue/mutex/semaphore
N	upon which the write was attempted.  pxCurrentTCB points to the TCB of the
N	task that attempted the write. */
N	#define traceBLOCKING_ON_QUEUE_SEND( pxQueue )
N#endif
N
N#ifndef configCHECK_FOR_STACK_OVERFLOW
N	#define configCHECK_FOR_STACK_OVERFLOW 0
N#endif
N
N/* The following event macros are embedded in the kernel API calls. */
N
N#ifndef traceMOVED_TASK_TO_READY_STATE
N	#define traceMOVED_TASK_TO_READY_STATE( pxTCB )
N#endif
N
N#ifndef traceQUEUE_CREATE
N	#define traceQUEUE_CREATE( pxNewQueue )
N#endif
N
N#ifndef traceQUEUE_CREATE_FAILED
N	#define traceQUEUE_CREATE_FAILED( ucQueueType )
N#endif
N
N#ifndef traceCREATE_MUTEX
N	#define traceCREATE_MUTEX( pxNewQueue )
N#endif
N
N#ifndef traceCREATE_MUTEX_FAILED
N	#define traceCREATE_MUTEX_FAILED()
N#endif
N
N#ifndef traceGIVE_MUTEX_RECURSIVE
N	#define traceGIVE_MUTEX_RECURSIVE( pxMutex )
N#endif
N
N#ifndef traceGIVE_MUTEX_RECURSIVE_FAILED
N	#define traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex )
N#endif
N
N#ifndef traceTAKE_MUTEX_RECURSIVE
N	#define traceTAKE_MUTEX_RECURSIVE( pxMutex )
N#endif
N
N#ifndef traceTAKE_MUTEX_RECURSIVE_FAILED
N	#define traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex )
N#endif
N
N#ifndef traceCREATE_COUNTING_SEMAPHORE
N	#define traceCREATE_COUNTING_SEMAPHORE()
N#endif
N
N#ifndef traceCREATE_COUNTING_SEMAPHORE_FAILED
N	#define traceCREATE_COUNTING_SEMAPHORE_FAILED()
N#endif
N
N#ifndef traceQUEUE_SEND
N	#define traceQUEUE_SEND( pxQueue )
N#endif
N
N#ifndef traceQUEUE_SEND_FAILED
N	#define traceQUEUE_SEND_FAILED( pxQueue )
N#endif
N
N#ifndef traceQUEUE_RECEIVE
N	#define traceQUEUE_RECEIVE( pxQueue )
N#endif
N
N#ifndef traceQUEUE_PEEK
N	#define traceQUEUE_PEEK( pxQueue )
N#endif
N
N#ifndef traceQUEUE_PEEK_FROM_ISR
N	#define traceQUEUE_PEEK_FROM_ISR( pxQueue )
N#endif
N
N#ifndef traceQUEUE_RECEIVE_FAILED
N	#define traceQUEUE_RECEIVE_FAILED( pxQueue )
N#endif
N
N#ifndef traceQUEUE_SEND_FROM_ISR
N	#define traceQUEUE_SEND_FROM_ISR( pxQueue )
N#endif
N
N#ifndef traceQUEUE_SEND_FROM_ISR_FAILED
N	#define traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue )
N#endif
N
N#ifndef traceQUEUE_RECEIVE_FROM_ISR
N	#define traceQUEUE_RECEIVE_FROM_ISR( pxQueue )
N#endif
N
N#ifndef traceQUEUE_RECEIVE_FROM_ISR_FAILED
N	#define traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue )
N#endif
N
N#ifndef traceQUEUE_PEEK_FROM_ISR_FAILED
N	#define traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue )
N#endif
N
N#ifndef traceQUEUE_DELETE
N	#define traceQUEUE_DELETE( pxQueue )
N#endif
N
N#ifndef traceTASK_CREATE
N	#define traceTASK_CREATE( pxNewTCB )
N#endif
N
N#ifndef traceTASK_CREATE_FAILED
N	#define traceTASK_CREATE_FAILED()
N#endif
N
N#ifndef traceTASK_DELETE
N	#define traceTASK_DELETE( pxTaskToDelete )
N#endif
N
N#ifndef traceTASK_DELAY_UNTIL
N	#define traceTASK_DELAY_UNTIL()
N#endif
N
N#ifndef traceTASK_DELAY
N	#define traceTASK_DELAY()
N#endif
N
N#ifndef traceTASK_PRIORITY_SET
N	#define traceTASK_PRIORITY_SET( pxTask, uxNewPriority )
N#endif
N
N#ifndef traceTASK_SUSPEND
N	#define traceTASK_SUSPEND( pxTaskToSuspend )
N#endif
N
N#ifndef traceTASK_RESUME
N	#define traceTASK_RESUME( pxTaskToResume )
N#endif
N
N#ifndef traceTASK_RESUME_FROM_ISR
N	#define traceTASK_RESUME_FROM_ISR( pxTaskToResume )
N#endif
N
N#ifndef traceTASK_INCREMENT_TICK
N	#define traceTASK_INCREMENT_TICK( xTickCount )
N#endif
N
N#ifndef traceTIMER_CREATE
N	#define traceTIMER_CREATE( pxNewTimer )
N#endif
N
N#ifndef traceTIMER_CREATE_FAILED
N	#define traceTIMER_CREATE_FAILED()
N#endif
N
N#ifndef traceTIMER_COMMAND_SEND
N	#define traceTIMER_COMMAND_SEND( xTimer, xMessageID, xMessageValueValue, xReturn )
N#endif
N
N#ifndef traceTIMER_EXPIRED
N	#define traceTIMER_EXPIRED( pxTimer )
N#endif
N
N#ifndef traceTIMER_COMMAND_RECEIVED
N	#define traceTIMER_COMMAND_RECEIVED( pxTimer, xMessageID, xMessageValue )
N#endif
N
N#ifndef traceMALLOC
N    #define traceMALLOC( pvAddress, uiSize )
N#endif
N
N#ifndef traceFREE
N    #define traceFREE( pvAddress, uiSize )
N#endif
N
N#ifndef traceEVENT_GROUP_CREATE
N	#define traceEVENT_GROUP_CREATE( xEventGroup )
N#endif
N
N#ifndef traceEVENT_GROUP_CREATE_FAILED
N	#define traceEVENT_GROUP_CREATE_FAILED()
N#endif
N
N#ifndef traceEVENT_GROUP_SYNC_BLOCK
N	#define traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor )
N#endif
N
N#ifndef traceEVENT_GROUP_SYNC_END
N	#define traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred ) ( void ) xTimeoutOccurred
N#endif
N
N#ifndef traceEVENT_GROUP_WAIT_BITS_BLOCK
N	#define traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor )
N#endif
N
N#ifndef traceEVENT_GROUP_WAIT_BITS_END
N	#define traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred ) ( void ) xTimeoutOccurred
N#endif
N
N#ifndef traceEVENT_GROUP_CLEAR_BITS
N	#define traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear )
N#endif
N
N#ifndef traceEVENT_GROUP_CLEAR_BITS_FROM_ISR
N	#define traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear )
N#endif
N
N#ifndef traceEVENT_GROUP_SET_BITS
N	#define traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet )
N#endif
N
N#ifndef traceEVENT_GROUP_SET_BITS_FROM_ISR
N	#define traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet )
N#endif
N
N#ifndef traceEVENT_GROUP_DELETE
N	#define traceEVENT_GROUP_DELETE( xEventGroup )
N#endif
N
N#ifndef tracePEND_FUNC_CALL
N	#define tracePEND_FUNC_CALL(xFunctionToPend, pvParameter1, ulParameter2, ret)
N#endif
N
N#ifndef tracePEND_FUNC_CALL_FROM_ISR
N	#define tracePEND_FUNC_CALL_FROM_ISR(xFunctionToPend, pvParameter1, ulParameter2, ret)
N#endif
N
N#ifndef traceQUEUE_REGISTRY_ADD
N	#define traceQUEUE_REGISTRY_ADD(xQueue, pcQueueName)
N#endif
N
N#ifndef traceTASK_NOTIFY_TAKE_BLOCK
N	#define traceTASK_NOTIFY_TAKE_BLOCK()
N#endif
N
N#ifndef traceTASK_NOTIFY_TAKE
N	#define traceTASK_NOTIFY_TAKE()
N#endif
N
N#ifndef traceTASK_NOTIFY_WAIT_BLOCK
N	#define traceTASK_NOTIFY_WAIT_BLOCK()
N#endif
N
N#ifndef traceTASK_NOTIFY_WAIT
N	#define traceTASK_NOTIFY_WAIT()
N#endif
N
N#ifndef traceTASK_NOTIFY
N	#define traceTASK_NOTIFY()
N#endif
N
N#ifndef traceTASK_NOTIFY_FROM_ISR
N	#define traceTASK_NOTIFY_FROM_ISR()
N#endif
N
N#ifndef traceTASK_NOTIFY_GIVE_FROM_ISR
N	#define traceTASK_NOTIFY_GIVE_FROM_ISR()
N#endif
N
N#ifndef configGENERATE_RUN_TIME_STATS
N	#define configGENERATE_RUN_TIME_STATS 0
N#endif
N
N#if ( configGENERATE_RUN_TIME_STATS == 1 )
X#if ( 0 == 1 )
S
S	#ifndef portCONFIGURE_TIMER_FOR_RUN_TIME_STATS
S		#error If configGENERATE_RUN_TIME_STATS is defined then portCONFIGURE_TIMER_FOR_RUN_TIME_STATS must also be defined.  portCONFIGURE_TIMER_FOR_RUN_TIME_STATS should call a port layer function to setup a peripheral timer/counter that can then be used as the run time counter time base.
S	#endif /* portCONFIGURE_TIMER_FOR_RUN_TIME_STATS */
S
S	#ifndef portGET_RUN_TIME_COUNTER_VALUE
S		#ifndef portALT_GET_RUN_TIME_COUNTER_VALUE
S			#error If configGENERATE_RUN_TIME_STATS is defined then either portGET_RUN_TIME_COUNTER_VALUE or portALT_GET_RUN_TIME_COUNTER_VALUE must also be defined.  See the examples provided and the FreeRTOS web site for more information.
S		#endif /* portALT_GET_RUN_TIME_COUNTER_VALUE */
S	#endif /* portGET_RUN_TIME_COUNTER_VALUE */
S
N#endif /* configGENERATE_RUN_TIME_STATS */
N
N#ifndef portCONFIGURE_TIMER_FOR_RUN_TIME_STATS
N	#define portCONFIGURE_TIMER_FOR_RUN_TIME_STATS()
N#endif
N
N#ifndef configUSE_MALLOC_FAILED_HOOK
N	#define configUSE_MALLOC_FAILED_HOOK 0
N#endif
N
N#ifndef portPRIVILEGE_BIT
N	#define portPRIVILEGE_BIT ( ( UBaseType_t ) 0x00 )
N#endif
N
N#ifndef portYIELD_WITHIN_API
N	#define portYIELD_WITHIN_API portYIELD
N#endif
N
N#ifndef pvPortMallocAligned
N	#define pvPortMallocAligned( x, puxStackBuffer ) ( ( ( puxStackBuffer ) == NULL ) ? ( pvPortMalloc( ( x ) ) ) : ( puxStackBuffer ) )
N#endif
N
N#ifndef vPortFreeAligned
N	#define vPortFreeAligned( pvBlockToFree ) vPortFree( pvBlockToFree )
N#endif
N
N#ifndef portSUPPRESS_TICKS_AND_SLEEP
S	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )
N#endif
N
N#ifndef configEXPECTED_IDLE_TIME_BEFORE_SLEEP
N	#define configEXPECTED_IDLE_TIME_BEFORE_SLEEP 2
N#endif
N
N#if configEXPECTED_IDLE_TIME_BEFORE_SLEEP < 2
X#if 2 < 2
S	#error configEXPECTED_IDLE_TIME_BEFORE_SLEEP must not be less than 2
N#endif
N
N#ifndef configUSE_TICKLESS_IDLE
N	#define configUSE_TICKLESS_IDLE 0
N#endif
N
N#ifndef configPRE_SLEEP_PROCESSING
N	#define configPRE_SLEEP_PROCESSING( x )
N#endif
N
N#ifndef configPOST_SLEEP_PROCESSING
N	#define configPOST_SLEEP_PROCESSING( x )
N#endif
N
N#ifndef configUSE_QUEUE_SETS
N	#define configUSE_QUEUE_SETS 0
N#endif
N
N#ifndef portTASK_USES_FLOATING_POINT
N	#define portTASK_USES_FLOATING_POINT()
N#endif
N
N#ifndef configUSE_TIME_SLICING
N	#define configUSE_TIME_SLICING 1
N#endif
N
N#ifndef configINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS
N	#define configINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS 0
N#endif
N
N#ifndef configUSE_NEWLIB_REENTRANT
N	#define configUSE_NEWLIB_REENTRANT 0
N#endif
N
N#ifndef configUSE_STATS_FORMATTING_FUNCTIONS
N	#define configUSE_STATS_FORMATTING_FUNCTIONS 0
N#endif
N
N#ifndef portASSERT_IF_INTERRUPT_PRIORITY_INVALID
S	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()
N#endif
N
N#ifndef configUSE_TRACE_FACILITY
S	#define configUSE_TRACE_FACILITY 0
N#endif
N
N#ifndef mtCOVERAGE_TEST_MARKER
N	#define mtCOVERAGE_TEST_MARKER()
N#endif
N
N#ifndef mtCOVERAGE_TEST_DELAY
N	#define mtCOVERAGE_TEST_DELAY()
N#endif
N
N#ifndef portASSERT_IF_IN_ISR
N	#define portASSERT_IF_IN_ISR()
N#endif
N
N#ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
S	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 0
N#endif
N
N#ifndef configAPPLICATION_ALLOCATED_HEAP
N	#define configAPPLICATION_ALLOCATED_HEAP 0
N#endif
N
N#ifndef configUSE_TASK_NOTIFICATIONS
N	#define configUSE_TASK_NOTIFICATIONS 1
N#endif
N
N#ifndef portTICK_TYPE_IS_ATOMIC
S	#define portTICK_TYPE_IS_ATOMIC 0
N#endif
N
N#if( portTICK_TYPE_IS_ATOMIC == 0 )
X#if( 1 == 0 )
S	/* Either variables of tick type cannot be read atomically, or
S	portTICK_TYPE_IS_ATOMIC was not set - map the critical sections used when
S	the tick count is returned to the standard critical section macros. */
S	#define portTICK_TYPE_ENTER_CRITICAL() portENTER_CRITICAL()
S	#define portTICK_TYPE_EXIT_CRITICAL() portEXIT_CRITICAL()
S	#define portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR() portSET_INTERRUPT_MASK_FROM_ISR()
S	#define portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( x ) portCLEAR_INTERRUPT_MASK_FROM_ISR( ( x ) )
N#else
N	/* The tick type can be read atomically, so critical sections used when the
N	tick count is returned can be defined away. */
N	#define portTICK_TYPE_ENTER_CRITICAL()
N	#define portTICK_TYPE_EXIT_CRITICAL()
N	#define portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR() 0
N	#define portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( x ) ( void ) x
N#endif
N
N/* Definitions to allow backward compatibility with FreeRTOS versions prior to
NV8 if desired. */
N#ifndef configENABLE_BACKWARD_COMPATIBILITY
N	#define configENABLE_BACKWARD_COMPATIBILITY 1
N#endif
N
N#if configENABLE_BACKWARD_COMPATIBILITY == 1
X#if 1 == 1
N	#define eTaskStateGet eTaskGetState
N	#define portTickType TickType_t
N	#define xTaskHandle TaskHandle_t
N	#define xQueueHandle QueueHandle_t
N	#define xSemaphoreHandle SemaphoreHandle_t
N	#define xQueueSetHandle QueueSetHandle_t
N	#define xQueueSetMemberHandle QueueSetMemberHandle_t
N	#define xTimeOutType TimeOut_t
N	#define xMemoryRegion MemoryRegion_t
N	#define xTaskParameters TaskParameters_t
N	#define xTaskStatusType	TaskStatus_t
N	#define xTimerHandle TimerHandle_t
N	#define xCoRoutineHandle CoRoutineHandle_t
N	#define pdTASK_HOOK_CODE TaskHookFunction_t
N	#define portTICK_RATE_MS portTICK_PERIOD_MS
N
N	/* Backward compatibility within the scheduler code only - these definitions
N	are not really required but are included for completeness. */
N	#define tmrTIMER_CALLBACK TimerCallbackFunction_t
N	#define pdTASK_CODE TaskFunction_t
N	#define xListItem ListItem_t
N	#define xList List_t
N#endif /* configENABLE_BACKWARD_COMPATIBILITY */
N
N/* Set configUSE_TASK_FPU_SUPPORT to 0 to omit floating point support even
Nif floating point hardware is otherwise supported by the FreeRTOS port in use.
NThis constant is not supported by all FreeRTOS ports that include floating 
Npoint support. */
N#ifndef configUSE_TASK_FPU_SUPPORT
N	#define configUSE_TASK_FPU_SUPPORT 1
N#endif
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* INC_FREERTOS_H */
N
L 81 "..\..\FreeRTOS\tasks.c" 2
N#include "task.h"
L 1 "..\..\FreeRTOS\include\task.h" 1
N/*
N    FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
N    All rights reserved
N
N    VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
N
N    ***************************************************************************
N    >>!   NOTE: The modification to the GPL is included to allow you to     !<<
N    >>!   distribute a combined work that includes FreeRTOS without being   !<<
N    >>!   obliged to provide the source code for proprietary components     !<<
N    >>!   outside of the FreeRTOS kernel.                                   !<<
N    ***************************************************************************
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  Full license text is available on the following
N    link: http://www.freertos.org/a00114.html
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS provides completely free yet professionally developed,    *
N     *    robust, strictly quality controlled, supported, and cross          *
N     *    platform software that is more than just the market leader, it     *
N     *    is the industry's de facto standard.                               *
N     *                                                                       *
N     *    Help yourself get started quickly while simultaneously helping     *
N     *    to support the FreeRTOS project by purchasing a FreeRTOS           *
N     *    tutorial book, reference manual, or both:                          *
N     *    http://www.FreeRTOS.org/Documentation                              *
N     *                                                                       *
N    ***************************************************************************
N
N    http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
N    the FAQ page "My application does not run, what could be wrong?".  Have you
N    defined configASSERT()?
N
N    http://www.FreeRTOS.org/support - In return for receiving this top quality
N    embedded software for free we request you assist our global community by
N    participating in the support forum.
N
N    http://www.FreeRTOS.org/training - Investing in training allows your team to
N    be as productive as possible as early as possible.  Now you can receive
N    FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
N    Ltd, and the world's leading authority on the world's leading RTOS.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, a DOS
N    compatible FAT file system, and our tiny thread aware UDP/IP stack.
N
N    http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
N    Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
N    Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
N    licenses offer ticketed support, indemnification and commercial middleware.
N
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety
N    engineered and independently SIL3 certified version for use in safety and
N    mission critical applications that require provable dependability.
N
N    1 tab == 4 spaces!
N*/
N
N
N#ifndef INC_TASK_H
N#define INC_TASK_H
N
N#ifndef INC_FREERTOS_H
S	#error "include FreeRTOS.h must appear in source files before include task.h"
N#endif
N
N#include "list.h"
L 1 "..\..\FreeRTOS\include\list.h" 1
N/*
N    FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
N    All rights reserved
N
N    VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
N
N    ***************************************************************************
N    >>!   NOTE: The modification to the GPL is included to allow you to     !<<
N    >>!   distribute a combined work that includes FreeRTOS without being   !<<
N    >>!   obliged to provide the source code for proprietary components     !<<
N    >>!   outside of the FreeRTOS kernel.                                   !<<
N    ***************************************************************************
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  Full license text is available on the following
N    link: http://www.freertos.org/a00114.html
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS provides completely free yet professionally developed,    *
N     *    robust, strictly quality controlled, supported, and cross          *
N     *    platform software that is more than just the market leader, it     *
N     *    is the industry's de facto standard.                               *
N     *                                                                       *
N     *    Help yourself get started quickly while simultaneously helping     *
N     *    to support the FreeRTOS project by purchasing a FreeRTOS           *
N     *    tutorial book, reference manual, or both:                          *
N     *    http://www.FreeRTOS.org/Documentation                              *
N     *                                                                       *
N    ***************************************************************************
N
N    http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
N    the FAQ page "My application does not run, what could be wrong?".  Have you
N    defined configASSERT()?
N
N    http://www.FreeRTOS.org/support - In return for receiving this top quality
N    embedded software for free we request you assist our global community by
N    participating in the support forum.
N
N    http://www.FreeRTOS.org/training - Investing in training allows your team to
N    be as productive as possible as early as possible.  Now you can receive
N    FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
N    Ltd, and the world's leading authority on the world's leading RTOS.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, a DOS
N    compatible FAT file system, and our tiny thread aware UDP/IP stack.
N
N    http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
N    Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
N    Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
N    licenses offer ticketed support, indemnification and commercial middleware.
N
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety
N    engineered and independently SIL3 certified version for use in safety and
N    mission critical applications that require provable dependability.
N
N    1 tab == 4 spaces!
N*/
N
N/*
N * This is the list implementation used by the scheduler.  While it is tailored
N * heavily for the schedulers needs, it is also available for use by
N * application code.
N *
N * list_ts can only store pointers to list_item_ts.  Each ListItem_t contains a
N * numeric value (xItemValue).  Most of the time the lists are sorted in
N * descending item value order.
N *
N * Lists are created already containing one list item.  The value of this
N * item is the maximum possible that can be stored, it is therefore always at
N * the end of the list and acts as a marker.  The list member pxHead always
N * points to this marker - even though it is at the tail of the list.  This
N * is because the tail contains a wrap back pointer to the true head of
N * the list.
N *
N * In addition to it's value, each list item contains a pointer to the next
N * item in the list (pxNext), a pointer to the list it is in (pxContainer)
N * and a pointer to back to the object that contains it.  These later two
N * pointers are included for efficiency of list manipulation.  There is
N * effectively a two way link between the object containing the list item and
N * the list item itself.
N *
N *
N * \page ListIntroduction List Implementation
N * \ingroup FreeRTOSIntro
N */
N
N#ifndef INC_FREERTOS_H
S	#error FreeRTOS.h must be included before list.h
N#endif
N
N#ifndef LIST_H
N#define LIST_H
N
N/*
N * The list structure members are modified from within interrupts, and therefore
N * by rights should be declared volatile.  However, they are only modified in a
N * functionally atomic way (within critical sections of with the scheduler
N * suspended) and are either passed by reference into a function or indexed via
N * a volatile variable.  Therefore, in all use cases tested so far, the volatile
N * qualifier can be omitted in order to provide a moderate performance
N * improvement without adversely affecting functional behaviour.  The assembly
N * instructions generated by the IAR, ARM and GCC compilers when the respective
N * compiler's options were set for maximum optimisation has been inspected and
N * deemed to be as intended.  That said, as compiler technology advances, and
N * especially if aggressive cross module optimisation is used (a use case that
N * has not been exercised to any great extend) then it is feasible that the
N * volatile qualifier will be needed for correct optimisation.  It is expected
N * that a compiler removing essential code because, without the volatile
N * qualifier on the list structure members and with aggressive cross module
N * optimisation, the compiler deemed the code unnecessary will result in
N * complete and obvious failure of the scheduler.  If this is ever experienced
N * then the volatile qualifier can be inserted in the relevant places within the
N * list structures by simply defining configLIST_VOLATILE to volatile in
N * FreeRTOSConfig.h (as per the example at the bottom of this comment block).
N * If configLIST_VOLATILE is not defined then the preprocessor directives below
N * will simply #define configLIST_VOLATILE away completely.
N *
N * To use volatile list structure members then add the following line to
N * FreeRTOSConfig.h (without the quotes):
N * "#define configLIST_VOLATILE volatile"
N */
N#ifndef configLIST_VOLATILE
N	#define configLIST_VOLATILE
N#endif /* configSUPPORT_CROSS_MODULE_OPTIMISATION */
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/* Macros that can be used to place known values within the list structures,
Nthen check that the known values do not get corrupted during the execution of
Nthe application.   These may catch the list data structures being overwritten in
Nmemory.  They will not catch data errors caused by incorrect configuration or
Nuse of FreeRTOS.*/
N#if( configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES == 0 )
X#if( 0 == 0 )
N	/* Define the macros to do nothing. */
N	#define listFIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE
N	#define listSECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE
N	#define listFIRST_LIST_INTEGRITY_CHECK_VALUE
N	#define listSECOND_LIST_INTEGRITY_CHECK_VALUE
N	#define listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem )
N	#define listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem )
N	#define listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList )
N	#define listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList )
N	#define listTEST_LIST_ITEM_INTEGRITY( pxItem )
N	#define listTEST_LIST_INTEGRITY( pxList )
N#else
S	/* Define macros that add new members into the list structures. */
S	#define listFIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE				TickType_t xListItemIntegrityValue1;
S	#define listSECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE				TickType_t xListItemIntegrityValue2;
S	#define listFIRST_LIST_INTEGRITY_CHECK_VALUE					TickType_t xListIntegrityValue1;
S	#define listSECOND_LIST_INTEGRITY_CHECK_VALUE					TickType_t xListIntegrityValue2;
S
S	/* Define macros that set the new structure members to known values. */
S	#define listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem )		( pxItem )->xListItemIntegrityValue1 = pdINTEGRITY_CHECK_VALUE
S	#define listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem )	( pxItem )->xListItemIntegrityValue2 = pdINTEGRITY_CHECK_VALUE
S	#define listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList )		( pxList )->xListIntegrityValue1 = pdINTEGRITY_CHECK_VALUE
S	#define listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList )		( pxList )->xListIntegrityValue2 = pdINTEGRITY_CHECK_VALUE
S
S	/* Define macros that will assert if one of the structure members does not
S	contain its expected value. */
S	#define listTEST_LIST_ITEM_INTEGRITY( pxItem )		configASSERT( ( ( pxItem )->xListItemIntegrityValue1 == pdINTEGRITY_CHECK_VALUE ) && ( ( pxItem )->xListItemIntegrityValue2 == pdINTEGRITY_CHECK_VALUE ) )
S	#define listTEST_LIST_INTEGRITY( pxList )			configASSERT( ( ( pxList )->xListIntegrityValue1 == pdINTEGRITY_CHECK_VALUE ) && ( ( pxList )->xListIntegrityValue2 == pdINTEGRITY_CHECK_VALUE ) )
N#endif /* configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES */
N
N
N/*
N * Definition of the only type of object that a list can contain.
N */
Nstruct xLIST_ITEM
N{
N	listFIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE			/*< Set to a known value if configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
X				 
N	configLIST_VOLATILE TickType_t xItemValue;			/*< The value being listed.  In most cases this is used to sort the list in descending order. */
X	 TickType_t xItemValue;			 
N	struct xLIST_ITEM * configLIST_VOLATILE pxNext;		/*< Pointer to the next ListItem_t in the list. */
X	struct xLIST_ITEM *  pxNext;		 
N	struct xLIST_ITEM * configLIST_VOLATILE pxPrevious;	/*< Pointer to the previous ListItem_t in the list. */
X	struct xLIST_ITEM *  pxPrevious;	 
N	void * pvOwner;										/*< Pointer to the object (normally a TCB) that contains the list item.  There is therefore a two way link between the object containing the list item and the list item itself. */
N	void * configLIST_VOLATILE pvContainer;				/*< Pointer to the list in which this list item is placed (if any). */
X	void *  pvContainer;				 
N	listSECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE			/*< Set to a known value if configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
X				 
N};
Ntypedef struct xLIST_ITEM ListItem_t;					/* For some reason lint wants this as two separate definitions. */
N
Nstruct xMINI_LIST_ITEM
N{
N	listFIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE			/*< Set to a known value if configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
X				 
N	configLIST_VOLATILE TickType_t xItemValue;
X	 TickType_t xItemValue;
N	struct xLIST_ITEM * configLIST_VOLATILE pxNext;
X	struct xLIST_ITEM *  pxNext;
N	struct xLIST_ITEM * configLIST_VOLATILE pxPrevious;
X	struct xLIST_ITEM *  pxPrevious;
N};
Ntypedef struct xMINI_LIST_ITEM MiniListItem_t;
N
N/*
N * Definition of the type of queue used by the scheduler.
N */
Ntypedef struct xLIST
N{
N	listFIRST_LIST_INTEGRITY_CHECK_VALUE				/*< Set to a known value if configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
X					 
N	configLIST_VOLATILE UBaseType_t uxNumberOfItems;
X	 UBaseType_t uxNumberOfItems;
N	ListItem_t * configLIST_VOLATILE pxIndex;			/*< Used to walk through the list.  Points to the last item returned by a call to listGET_OWNER_OF_NEXT_ENTRY (). */
X	ListItem_t *  pxIndex;			 
N	MiniListItem_t xListEnd;							/*< List item that contains the maximum possible item value meaning it is always at the end of the list and is therefore used as a marker. */
N	listSECOND_LIST_INTEGRITY_CHECK_VALUE				/*< Set to a known value if configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
X					 
N} List_t;
N
N/*
N * Access macro to set the owner of a list item.  The owner of a list item
N * is the object (usually a TCB) that contains the list item.
N *
N * \page listSET_LIST_ITEM_OWNER listSET_LIST_ITEM_OWNER
N * \ingroup LinkedList
N */
N#define listSET_LIST_ITEM_OWNER( pxListItem, pxOwner )		( ( pxListItem )->pvOwner = ( void * ) ( pxOwner ) )
N
N/*
N * Access macro to get the owner of a list item.  The owner of a list item
N * is the object (usually a TCB) that contains the list item.
N *
N * \page listSET_LIST_ITEM_OWNER listSET_LIST_ITEM_OWNER
N * \ingroup LinkedList
N */
N#define listGET_LIST_ITEM_OWNER( pxListItem )	( ( pxListItem )->pvOwner )
N
N/*
N * Access macro to set the value of the list item.  In most cases the value is
N * used to sort the list in descending order.
N *
N * \page listSET_LIST_ITEM_VALUE listSET_LIST_ITEM_VALUE
N * \ingroup LinkedList
N */
N#define listSET_LIST_ITEM_VALUE( pxListItem, xValue )	( ( pxListItem )->xItemValue = ( xValue ) )
N
N/*
N * Access macro to retrieve the value of the list item.  The value can
N * represent anything - for example the priority of a task, or the time at
N * which a task should be unblocked.
N *
N * \page listGET_LIST_ITEM_VALUE listGET_LIST_ITEM_VALUE
N * \ingroup LinkedList
N */
N#define listGET_LIST_ITEM_VALUE( pxListItem )	( ( pxListItem )->xItemValue )
N
N/*
N * Access macro to retrieve the value of the list item at the head of a given
N * list.
N *
N * \page listGET_LIST_ITEM_VALUE listGET_LIST_ITEM_VALUE
N * \ingroup LinkedList
N */
N#define listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxList )	( ( ( pxList )->xListEnd ).pxNext->xItemValue )
N
N/*
N * Return the list item at the head of the list.
N *
N * \page listGET_HEAD_ENTRY listGET_HEAD_ENTRY
N * \ingroup LinkedList
N */
N#define listGET_HEAD_ENTRY( pxList )	( ( ( pxList )->xListEnd ).pxNext )
N
N/*
N * Return the list item at the head of the list.
N *
N * \page listGET_NEXT listGET_NEXT
N * \ingroup LinkedList
N */
N#define listGET_NEXT( pxListItem )	( ( pxListItem )->pxNext )
N
N/*
N * Return the list item that marks the end of the list
N *
N * \page listGET_END_MARKER listGET_END_MARKER
N * \ingroup LinkedList
N */
N#define listGET_END_MARKER( pxList )	( ( ListItem_t const * ) ( &( ( pxList )->xListEnd ) ) )
N
N/*
N * Access macro to determine if a list contains any items.  The macro will
N * only have the value true if the list is empty.
N *
N * \page listLIST_IS_EMPTY listLIST_IS_EMPTY
N * \ingroup LinkedList
N */
N#define listLIST_IS_EMPTY( pxList )	( ( BaseType_t ) ( ( pxList )->uxNumberOfItems == ( UBaseType_t ) 0 ) )
N
N/*
N * Access macro to return the number of items in the list.
N */
N#define listCURRENT_LIST_LENGTH( pxList )	( ( pxList )->uxNumberOfItems )
N
N/*
N * Access function to obtain the owner of the next entry in a list.
N *
N * The list member pxIndex is used to walk through a list.  Calling
N * listGET_OWNER_OF_NEXT_ENTRY increments pxIndex to the next item in the list
N * and returns that entry's pxOwner parameter.  Using multiple calls to this
N * function it is therefore possible to move through every item contained in
N * a list.
N *
N * The pxOwner parameter of a list item is a pointer to the object that owns
N * the list item.  In the scheduler this is normally a task control block.
N * The pxOwner parameter effectively creates a two way link between the list
N * item and its owner.
N *
N * @param pxTCB pxTCB is set to the address of the owner of the next list item.
N * @param pxList The list from which the next item owner is to be returned.
N *
N * \page listGET_OWNER_OF_NEXT_ENTRY listGET_OWNER_OF_NEXT_ENTRY
N * \ingroup LinkedList
N */
N#define listGET_OWNER_OF_NEXT_ENTRY( pxTCB, pxList )										\
N{																							\
NList_t * const pxConstList = ( pxList );													\
N	/* Increment the index to the next item and return the item, ensuring */				\
N	/* we don't return the marker used at the end of the list.  */							\
N	( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext;							\
N	if( ( void * ) ( pxConstList )->pxIndex == ( void * ) &( ( pxConstList )->xListEnd ) )	\
N	{																						\
N		( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext;						\
N	}																						\
N	( pxTCB ) = ( pxConstList )->pxIndex->pvOwner;											\
N}
X#define listGET_OWNER_OF_NEXT_ENTRY( pxTCB, pxList )										{																							List_t * const pxConstList = ( pxList );														 					 								( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext;								if( ( void * ) ( pxConstList )->pxIndex == ( void * ) &( ( pxConstList )->xListEnd ) )		{																								( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext;							}																							( pxTCB ) = ( pxConstList )->pxIndex->pvOwner;											}
N
N
N/*
N * Access function to obtain the owner of the first entry in a list.  Lists
N * are normally sorted in ascending item value order.
N *
N * This function returns the pxOwner member of the first item in the list.
N * The pxOwner parameter of a list item is a pointer to the object that owns
N * the list item.  In the scheduler this is normally a task control block.
N * The pxOwner parameter effectively creates a two way link between the list
N * item and its owner.
N *
N * @param pxList The list from which the owner of the head item is to be
N * returned.
N *
N * \page listGET_OWNER_OF_HEAD_ENTRY listGET_OWNER_OF_HEAD_ENTRY
N * \ingroup LinkedList
N */
N#define listGET_OWNER_OF_HEAD_ENTRY( pxList )  ( (&( ( pxList )->xListEnd ))->pxNext->pvOwner )
N
N/*
N * Check to see if a list item is within a list.  The list item maintains a
N * "container" pointer that points to the list it is in.  All this macro does
N * is check to see if the container and the list match.
N *
N * @param pxList The list we want to know if the list item is within.
N * @param pxListItem The list item we want to know if is in the list.
N * @return pdTRUE if the list item is in the list, otherwise pdFALSE.
N */
N#define listIS_CONTAINED_WITHIN( pxList, pxListItem ) ( ( BaseType_t ) ( ( pxListItem )->pvContainer == ( void * ) ( pxList ) ) )
N
N/*
N * Return the list a list item is contained within (referenced from).
N *
N * @param pxListItem The list item being queried.
N * @return A pointer to the List_t object that references the pxListItem
N */
N#define listLIST_ITEM_CONTAINER( pxListItem ) ( ( pxListItem )->pvContainer )
N
N/*
N * This provides a crude means of knowing if a list has been initialised, as
N * pxList->xListEnd.xItemValue is set to portMAX_DELAY by the vListInitialise()
N * function.
N */
N#define listLIST_IS_INITIALISED( pxList ) ( ( pxList )->xListEnd.xItemValue == portMAX_DELAY )
N
N/*
N * Must be called before a list is used!  This initialises all the members
N * of the list structure and inserts the xListEnd item into the list as a
N * marker to the back of the list.
N *
N * @param pxList Pointer to the list being initialised.
N *
N * \page vListInitialise vListInitialise
N * \ingroup LinkedList
N */
Nvoid vListInitialise( List_t * const pxList ) PRIVILEGED_FUNCTION;
Xvoid vListInitialise( List_t * const pxList ) ;
N
N/*
N * Must be called before a list item is used.  This sets the list container to
N * null so the item does not think that it is already contained in a list.
N *
N * @param pxItem Pointer to the list item being initialised.
N *
N * \page vListInitialiseItem vListInitialiseItem
N * \ingroup LinkedList
N */
Nvoid vListInitialiseItem( ListItem_t * const pxItem ) PRIVILEGED_FUNCTION;
Xvoid vListInitialiseItem( ListItem_t * const pxItem ) ;
N
N/*
N * Insert a list item into a list.  The item will be inserted into the list in
N * a position determined by its item value (descending item value order).
N *
N * @param pxList The list into which the item is to be inserted.
N *
N * @param pxNewListItem The item that is to be placed in the list.
N *
N * \page vListInsert vListInsert
N * \ingroup LinkedList
N */
Nvoid vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem ) PRIVILEGED_FUNCTION;
Xvoid vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem ) ;
N
N/*
N * Insert a list item into a list.  The item will be inserted in a position
N * such that it will be the last item within the list returned by multiple
N * calls to listGET_OWNER_OF_NEXT_ENTRY.
N *
N * The list member pvIndex is used to walk through a list.  Calling
N * listGET_OWNER_OF_NEXT_ENTRY increments pvIndex to the next item in the list.
N * Placing an item in a list using vListInsertEnd effectively places the item
N * in the list position pointed to by pvIndex.  This means that every other
N * item within the list will be returned by listGET_OWNER_OF_NEXT_ENTRY before
N * the pvIndex parameter again points to the item being inserted.
N *
N * @param pxList The list into which the item is to be inserted.
N *
N * @param pxNewListItem The list item to be inserted into the list.
N *
N * \page vListInsertEnd vListInsertEnd
N * \ingroup LinkedList
N */
Nvoid vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem ) PRIVILEGED_FUNCTION;
Xvoid vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem ) ;
N
N/*
N * Remove an item from a list.  The list item has a pointer to the list that
N * it is in, so only the list item need be passed into the function.
N *
N * @param uxListRemove The item to be removed.  The item will remove itself from
N * the list pointed to by it's pxContainer parameter.
N *
N * @return The number of items that remain in the list after the list item has
N * been removed.
N *
N * \page uxListRemove uxListRemove
N * \ingroup LinkedList
N */
NUBaseType_t uxListRemove( ListItem_t * const pxItemToRemove ) PRIVILEGED_FUNCTION;
XUBaseType_t uxListRemove( ListItem_t * const pxItemToRemove ) ;
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif
N
L 79 "..\..\FreeRTOS\include\task.h" 2
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/*-----------------------------------------------------------
N * MACROS AND DEFINITIONS
N *----------------------------------------------------------*/
N
N#define tskKERNEL_VERSION_NUMBER "V8.2.3"
N#define tskKERNEL_VERSION_MAJOR 8
N#define tskKERNEL_VERSION_MINOR 2
N#define tskKERNEL_VERSION_BUILD 3
N
N/**
N * task. h
N *
N * Type by which tasks are referenced.  For example, a call to xTaskCreate
N * returns (via a pointer parameter) an TaskHandle_t variable that can then
N * be used as a parameter to vTaskDelete to delete the task.
N *
N * \defgroup TaskHandle_t TaskHandle_t
N * \ingroup Tasks
N */
Ntypedef void * TaskHandle_t;
N
N/*
N * Defines the prototype to which the application task hook function must
N * conform.
N */
Ntypedef BaseType_t (*TaskHookFunction_t)( void * );
N
N/* Task states returned by eTaskGetState. */
Ntypedef enum
N{
N	eRunning = 0,	/* A task is querying the state of itself, so must be running. */
N	eReady,			/* The task being queried is in a read or pending ready list. */
N	eBlocked,		/* The task being queried is in the Blocked state. */
N	eSuspended,		/* The task being queried is in the Suspended state, or is in the Blocked state with an infinite time out. */
N	eDeleted		/* The task being queried has been deleted, but its TCB has not yet been freed. */
N} eTaskState;
N
N/* Actions that can be performed when vTaskNotify() is called. */
Ntypedef enum
N{
N	eNoAction = 0,				/* Notify the task without updating its notify value. */
N	eSetBits,					/* Set bits in the task's notification value. */
N	eIncrement,					/* Increment the task's notification value. */
N	eSetValueWithOverwrite,		/* Set the task's notification value to a specific value even if the previous value has not yet been read by the task. */
N	eSetValueWithoutOverwrite	/* Set the task's notification value if the previous value has been read by the task. */
N} eNotifyAction;
N
N/*
N * Used internally only.
N */
Ntypedef struct xTIME_OUT
N{
N	BaseType_t xOverflowCount;
N	TickType_t xTimeOnEntering;
N} TimeOut_t;
N
N/*
N * Defines the memory ranges allocated to the task when an MPU is used.
N */
Ntypedef struct xMEMORY_REGION
N{
N	void *pvBaseAddress;
N	uint32_t ulLengthInBytes;
N	uint32_t ulParameters;
N} MemoryRegion_t;
N
N/*
N * Parameters required to create an MPU protected task.
N */
Ntypedef struct xTASK_PARAMETERS
N{
N	TaskFunction_t pvTaskCode;
N	const char * const pcName;	/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
N	uint16_t usStackDepth;
N	void *pvParameters;
N	UBaseType_t uxPriority;
N	StackType_t *puxStackBuffer;
N	MemoryRegion_t xRegions[ portNUM_CONFIGURABLE_REGIONS ];
X	MemoryRegion_t xRegions[ 1 ];
N} TaskParameters_t;
N
N/* Used with the uxTaskGetSystemState() function to return the state of each task
Nin the system. */
Ntypedef struct xTASK_STATUS
N{
N	TaskHandle_t xHandle;			/* The handle of the task to which the rest of the information in the structure relates. */
N	const char *pcTaskName;			/* A pointer to the task's name.  This value will be invalid if the task was deleted since the structure was populated! */ /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
N	UBaseType_t xTaskNumber;		/* A number unique to the task. */
N	eTaskState eCurrentState;		/* The state in which the task existed when the structure was populated. */
N	UBaseType_t uxCurrentPriority;	/* The priority at which the task was running (may be inherited) when the structure was populated. */
N	UBaseType_t uxBasePriority;		/* The priority to which the task will return if the task's current priority has been inherited to avoid unbounded priority inversion when obtaining a mutex.  Only valid if configUSE_MUTEXES is defined as 1 in FreeRTOSConfig.h. */
N	uint32_t ulRunTimeCounter;		/* The total run time allocated to the task so far, as defined by the run time stats clock.  See http://www.freertos.org/rtos-run-time-stats.html.  Only valid when configGENERATE_RUN_TIME_STATS is defined as 1 in FreeRTOSConfig.h. */
N	uint16_t usStackHighWaterMark;	/* The minimum amount of stack space that has remained for the task since the task was created.  The closer this value is to zero the closer the task has come to overflowing its stack. */
N} TaskStatus_t;
N
N/* Possible return values for eTaskConfirmSleepModeStatus(). */
Ntypedef enum
N{
N	eAbortSleep = 0,		/* A task has been made ready or a context switch pended since portSUPPORESS_TICKS_AND_SLEEP() was called - abort entering a sleep mode. */
N	eStandardSleep,			/* Enter a sleep mode that will not last any longer than the expected idle time. */
N	eNoTasksWaitingTimeout	/* No tasks are waiting for a timeout so it is safe to enter a sleep mode that can only be exited by an external interrupt. */
N} eSleepModeStatus;
N
N
N/**
N * Defines the priority used by the idle task.  This must not be modified.
N *
N * \ingroup TaskUtils
N */
N#define tskIDLE_PRIORITY			( ( UBaseType_t ) 0U )
N
N/**
N * task. h
N *
N * Macro for forcing a context switch.
N *
N * \defgroup taskYIELD taskYIELD
N * \ingroup SchedulerControl
N */
N#define taskYIELD()					portYIELD()
N
N/**
N * task. h
N *
N * Macro to mark the start of a critical code region.  Preemptive context
N * switches cannot occur when in a critical region.
N *
N * NOTE: This may alter the stack (depending on the portable implementation)
N * so must be used with care!
N *
N * \defgroup taskENTER_CRITICAL taskENTER_CRITICAL
N * \ingroup SchedulerControl
N */
N#define taskENTER_CRITICAL()		portENTER_CRITICAL()
N#define taskENTER_CRITICAL_FROM_ISR() portSET_INTERRUPT_MASK_FROM_ISR()
N
N/**
N * task. h
N *
N * Macro to mark the end of a critical code region.  Preemptive context
N * switches cannot occur when in a critical region.
N *
N * NOTE: This may alter the stack (depending on the portable implementation)
N * so must be used with care!
N *
N * \defgroup taskEXIT_CRITICAL taskEXIT_CRITICAL
N * \ingroup SchedulerControl
N */
N#define taskEXIT_CRITICAL()			portEXIT_CRITICAL()
N#define taskEXIT_CRITICAL_FROM_ISR( x ) portCLEAR_INTERRUPT_MASK_FROM_ISR( x )
N/**
N * task. h
N *
N * Macro to disable all maskable interrupts.
N *
N * \defgroup taskDISABLE_INTERRUPTS taskDISABLE_INTERRUPTS
N * \ingroup SchedulerControl
N */
N#define taskDISABLE_INTERRUPTS()	portDISABLE_INTERRUPTS()
N
N/**
N * task. h
N *
N * Macro to enable microcontroller interrupts.
N *
N * \defgroup taskENABLE_INTERRUPTS taskENABLE_INTERRUPTS
N * \ingroup SchedulerControl
N */
N#define taskENABLE_INTERRUPTS()		portENABLE_INTERRUPTS()
N
N/* Definitions returned by xTaskGetSchedulerState().  taskSCHEDULER_SUSPENDED is
N0 to generate more optimal code when configASSERT() is defined as the constant
Nis used in assert() statements. */
N#define taskSCHEDULER_SUSPENDED		( ( BaseType_t ) 0 )
N#define taskSCHEDULER_NOT_STARTED	( ( BaseType_t ) 1 )
N#define taskSCHEDULER_RUNNING		( ( BaseType_t ) 2 )
N
N
N/*-----------------------------------------------------------
N * TASK CREATION API
N *----------------------------------------------------------*/
N
N/**
N * task. h
N *<pre>
N BaseType_t xTaskCreate(
N							  TaskFunction_t pvTaskCode,
N							  const char * const pcName,
N							  uint16_t usStackDepth,
N							  void *pvParameters,
N							  UBaseType_t uxPriority,
N							  TaskHandle_t *pvCreatedTask
N						  );</pre>
N *
N * Create a new task and add it to the list of tasks that are ready to run.
N *
N * xTaskCreate() can only be used to create a task that has unrestricted
N * access to the entire microcontroller memory map.  Systems that include MPU
N * support can alternatively create an MPU constrained task using
N * xTaskCreateRestricted().
N *
N * @param pvTaskCode Pointer to the task entry function.  Tasks
N * must be implemented to never return (i.e. continuous loop).
N *
N * @param pcName A descriptive name for the task.  This is mainly used to
N * facilitate debugging.  Max length defined by configMAX_TASK_NAME_LEN - default
N * is 16.
N *
N * @param usStackDepth The size of the task stack specified as the number of
N * variables the stack can hold - not the number of bytes.  For example, if
N * the stack is 16 bits wide and usStackDepth is defined as 100, 200 bytes
N * will be allocated for stack storage.
N *
N * @param pvParameters Pointer that will be used as the parameter for the task
N * being created.
N *
N * @param uxPriority The priority at which the task should run.  Systems that
N * include MPU support can optionally create tasks in a privileged (system)
N * mode by setting bit portPRIVILEGE_BIT of the priority parameter.  For
N * example, to create a privileged task at priority 2 the uxPriority parameter
N * should be set to ( 2 | portPRIVILEGE_BIT ).
N *
N * @param pvCreatedTask Used to pass back a handle by which the created task
N * can be referenced.
N *
N * @return pdPASS if the task was successfully created and added to a ready
N * list, otherwise an error code defined in the file projdefs.h
N *
N * Example usage:
N   <pre>
N // Task to be created.
N void vTaskCode( void * pvParameters )
N {
N	 for( ;; )
N	 {
N		 // Task code goes here.
N	 }
N }
N
N // Function that creates a task.
N void vOtherFunction( void )
N {
N static uint8_t ucParameterToPass;
N TaskHandle_t xHandle = NULL;
N
N	 // Create the task, storing the handle.  Note that the passed parameter ucParameterToPass
N	 // must exist for the lifetime of the task, so in this case is declared static.  If it was just an
N	 // an automatic stack variable it might no longer exist, or at least have been corrupted, by the time
N	 // the new task attempts to access it.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, &ucParameterToPass, tskIDLE_PRIORITY, &xHandle );
N     configASSERT( xHandle );
N
N	 // Use the handle to delete the task.
N     if( xHandle != NULL )
N     {
N	     vTaskDelete( xHandle );
N     }
N }
N   </pre>
N * \defgroup xTaskCreate xTaskCreate
N * \ingroup Tasks
N */
N#define xTaskCreate( pvTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask ) xTaskGenericCreate( ( pvTaskCode ), ( pcName ), ( usStackDepth ), ( pvParameters ), ( uxPriority ), ( pxCreatedTask ), ( NULL ), ( NULL ) )
N
N/**
N * task. h
N *<pre>
N BaseType_t xTaskCreateRestricted( TaskParameters_t *pxTaskDefinition, TaskHandle_t *pxCreatedTask );</pre>
N *
N * xTaskCreateRestricted() should only be used in systems that include an MPU
N * implementation.
N *
N * Create a new task and add it to the list of tasks that are ready to run.
N * The function parameters define the memory regions and associated access
N * permissions allocated to the task.
N *
N * @param pxTaskDefinition Pointer to a structure that contains a member
N * for each of the normal xTaskCreate() parameters (see the xTaskCreate() API
N * documentation) plus an optional stack buffer and the memory region
N * definitions.
N *
N * @param pxCreatedTask Used to pass back a handle by which the created task
N * can be referenced.
N *
N * @return pdPASS if the task was successfully created and added to a ready
N * list, otherwise an error code defined in the file projdefs.h
N *
N * Example usage:
N   <pre>
N// Create an TaskParameters_t structure that defines the task to be created.
Nstatic const TaskParameters_t xCheckTaskParameters =
N{
N	vATask,		// pvTaskCode - the function that implements the task.
N	"ATask",	// pcName - just a text name for the task to assist debugging.
N	100,		// usStackDepth	- the stack size DEFINED IN WORDS.
N	NULL,		// pvParameters - passed into the task function as the function parameters.
N	( 1UL | portPRIVILEGE_BIT ),// uxPriority - task priority, set the portPRIVILEGE_BIT if the task should run in a privileged state.
N	cStackBuffer,// puxStackBuffer - the buffer to be used as the task stack.
N
N	// xRegions - Allocate up to three separate memory regions for access by
N	// the task, with appropriate access permissions.  Different processors have
N	// different memory alignment requirements - refer to the FreeRTOS documentation
N	// for full information.
N	{
N		// Base address					Length	Parameters
N        { cReadWriteArray,				32,		portMPU_REGION_READ_WRITE },
N        { cReadOnlyArray,				32,		portMPU_REGION_READ_ONLY },
N        { cPrivilegedOnlyAccessArray,	128,	portMPU_REGION_PRIVILEGED_READ_WRITE }
N	}
N};
N
Nint main( void )
N{
NTaskHandle_t xHandle;
N
N	// Create a task from the const structure defined above.  The task handle
N	// is requested (the second parameter is not NULL) but in this case just for
N	// demonstration purposes as its not actually used.
N	xTaskCreateRestricted( &xRegTest1Parameters, &xHandle );
N
N	// Start the scheduler.
N	vTaskStartScheduler();
N
N	// Will only get here if there was insufficient memory to create the idle
N	// and/or timer task.
N	for( ;; );
N}
N   </pre>
N * \defgroup xTaskCreateRestricted xTaskCreateRestricted
N * \ingroup Tasks
N */
N#define xTaskCreateRestricted( x, pxCreatedTask ) xTaskGenericCreate( ((x)->pvTaskCode), ((x)->pcName), ((x)->usStackDepth), ((x)->pvParameters), ((x)->uxPriority), (pxCreatedTask), ((x)->puxStackBuffer), ((x)->xRegions) )
N
N/**
N * task. h
N *<pre>
N void vTaskAllocateMPURegions( TaskHandle_t xTask, const MemoryRegion_t * const pxRegions );</pre>
N *
N * Memory regions are assigned to a restricted task when the task is created by
N * a call to xTaskCreateRestricted().  These regions can be redefined using
N * vTaskAllocateMPURegions().
N *
N * @param xTask The handle of the task being updated.
N *
N * @param xRegions A pointer to an MemoryRegion_t structure that contains the
N * new memory region definitions.
N *
N * Example usage:
N   <pre>
N// Define an array of MemoryRegion_t structures that configures an MPU region
N// allowing read/write access for 1024 bytes starting at the beginning of the
N// ucOneKByte array.  The other two of the maximum 3 definable regions are
N// unused so set to zero.
Nstatic const MemoryRegion_t xAltRegions[ portNUM_CONFIGURABLE_REGIONS ] =
N{
N	// Base address		Length		Parameters
N	{ ucOneKByte,		1024,		portMPU_REGION_READ_WRITE },
N	{ 0,				0,			0 },
N	{ 0,				0,			0 }
N};
N
Nvoid vATask( void *pvParameters )
N{
N	// This task was created such that it has access to certain regions of
N	// memory as defined by the MPU configuration.  At some point it is
N	// desired that these MPU regions are replaced with that defined in the
N	// xAltRegions const struct above.  Use a call to vTaskAllocateMPURegions()
N	// for this purpose.  NULL is used as the task handle to indicate that this
N	// function should modify the MPU regions of the calling task.
N	vTaskAllocateMPURegions( NULL, xAltRegions );
N
N	// Now the task can continue its function, but from this point on can only
N	// access its stack and the ucOneKByte array (unless any other statically
N	// defined or shared regions have been declared elsewhere).
N}
N   </pre>
N * \defgroup xTaskCreateRestricted xTaskCreateRestricted
N * \ingroup Tasks
N */
Nvoid vTaskAllocateMPURegions( TaskHandle_t xTask, const MemoryRegion_t * const pxRegions ) PRIVILEGED_FUNCTION;
Xvoid vTaskAllocateMPURegions( TaskHandle_t xTask, const MemoryRegion_t * const pxRegions ) ;
N
N/**
N * task. h
N * <pre>void vTaskDelete( TaskHandle_t xTask );</pre>
N *
N * INCLUDE_vTaskDelete must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N * Remove a task from the RTOS real time kernel's management.  The task being
N * deleted will be removed from all ready, blocked, suspended and event lists.
N *
N * NOTE:  The idle task is responsible for freeing the kernel allocated
N * memory from tasks that have been deleted.  It is therefore important that
N * the idle task is not starved of microcontroller processing time if your
N * application makes any calls to vTaskDelete ().  Memory allocated by the
N * task code is not automatically freed, and should be freed before the task
N * is deleted.
N *
N * See the demo application file death.c for sample code that utilises
N * vTaskDelete ().
N *
N * @param xTask The handle of the task to be deleted.  Passing NULL will
N * cause the calling task to be deleted.
N *
N * Example usage:
N   <pre>
N void vOtherFunction( void )
N {
N TaskHandle_t xHandle;
N
N	 // Create the task, storing the handle.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );
N
N	 // Use the handle to delete the task.
N	 vTaskDelete( xHandle );
N }
N   </pre>
N * \defgroup vTaskDelete vTaskDelete
N * \ingroup Tasks
N */
Nvoid vTaskDelete( TaskHandle_t xTaskToDelete ) PRIVILEGED_FUNCTION;
Xvoid vTaskDelete( TaskHandle_t xTaskToDelete ) ;
N
N/*-----------------------------------------------------------
N * TASK CONTROL API
N *----------------------------------------------------------*/
N
N/**
N * task. h
N * <pre>void vTaskDelay( const TickType_t xTicksToDelay );</pre>
N *
N * Delay a task for a given number of ticks.  The actual time that the
N * task remains blocked depends on the tick rate.  The constant
N * portTICK_PERIOD_MS can be used to calculate real time from the tick
N * rate - with the resolution of one tick period.
N *
N * INCLUDE_vTaskDelay must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N *
N * vTaskDelay() specifies a time at which the task wishes to unblock relative to
N * the time at which vTaskDelay() is called.  For example, specifying a block
N * period of 100 ticks will cause the task to unblock 100 ticks after
N * vTaskDelay() is called.  vTaskDelay() does not therefore provide a good method
N * of controlling the frequency of a periodic task as the path taken through the
N * code, as well as other task and interrupt activity, will effect the frequency
N * at which vTaskDelay() gets called and therefore the time at which the task
N * next executes.  See vTaskDelayUntil() for an alternative API function designed
N * to facilitate fixed frequency execution.  It does this by specifying an
N * absolute time (rather than a relative time) at which the calling task should
N * unblock.
N *
N * @param xTicksToDelay The amount of time, in tick periods, that
N * the calling task should block.
N *
N * Example usage:
N
N void vTaskFunction( void * pvParameters )
N {
N // Block for 500ms.
N const TickType_t xDelay = 500 / portTICK_PERIOD_MS;
N
N	 for( ;; )
N	 {
N		 // Simply toggle the LED every 500ms, blocking between each toggle.
N		 vToggleLED();
N		 vTaskDelay( xDelay );
N	 }
N }
N
N * \defgroup vTaskDelay vTaskDelay
N * \ingroup TaskCtrl
N */
Nvoid vTaskDelay( const TickType_t xTicksToDelay ) PRIVILEGED_FUNCTION;
Xvoid vTaskDelay( const TickType_t xTicksToDelay ) ;
N
N/**
N * task. h
N * <pre>void vTaskDelayUntil( TickType_t *pxPreviousWakeTime, const TickType_t xTimeIncrement );</pre>
N *
N * INCLUDE_vTaskDelayUntil must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N * Delay a task until a specified time.  This function can be used by periodic
N * tasks to ensure a constant execution frequency.
N *
N * This function differs from vTaskDelay () in one important aspect:  vTaskDelay () will
N * cause a task to block for the specified number of ticks from the time vTaskDelay () is
N * called.  It is therefore difficult to use vTaskDelay () by itself to generate a fixed
N * execution frequency as the time between a task starting to execute and that task
N * calling vTaskDelay () may not be fixed [the task may take a different path though the
N * code between calls, or may get interrupted or preempted a different number of times
N * each time it executes].
N *
N * Whereas vTaskDelay () specifies a wake time relative to the time at which the function
N * is called, vTaskDelayUntil () specifies the absolute (exact) time at which it wishes to
N * unblock.
N *
N * The constant portTICK_PERIOD_MS can be used to calculate real time from the tick
N * rate - with the resolution of one tick period.
N *
N * @param pxPreviousWakeTime Pointer to a variable that holds the time at which the
N * task was last unblocked.  The variable must be initialised with the current time
N * prior to its first use (see the example below).  Following this the variable is
N * automatically updated within vTaskDelayUntil ().
N *
N * @param xTimeIncrement The cycle time period.  The task will be unblocked at
N * time *pxPreviousWakeTime + xTimeIncrement.  Calling vTaskDelayUntil with the
N * same xTimeIncrement parameter value will cause the task to execute with
N * a fixed interface period.
N *
N * Example usage:
N   <pre>
N // Perform an action every 10 ticks.
N void vTaskFunction( void * pvParameters )
N {
N TickType_t xLastWakeTime;
N const TickType_t xFrequency = 10;
N
N	 // Initialise the xLastWakeTime variable with the current time.
N	 xLastWakeTime = xTaskGetTickCount ();
N	 for( ;; )
N	 {
N		 // Wait for the next cycle.
N		 vTaskDelayUntil( &xLastWakeTime, xFrequency );
N
N		 // Perform action here.
N	 }
N }
N   </pre>
N * \defgroup vTaskDelayUntil vTaskDelayUntil
N * \ingroup TaskCtrl
N */
Nvoid vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement ) PRIVILEGED_FUNCTION;
Xvoid vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement ) ;
N
N/**
N * task. h
N * <pre>UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask );</pre>
N *
N * INCLUDE_uxTaskPriorityGet must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N * Obtain the priority of any task.
N *
N * @param xTask Handle of the task to be queried.  Passing a NULL
N * handle results in the priority of the calling task being returned.
N *
N * @return The priority of xTask.
N *
N * Example usage:
N   <pre>
N void vAFunction( void )
N {
N TaskHandle_t xHandle;
N
N	 // Create a task, storing the handle.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );
N
N	 // ...
N
N	 // Use the handle to obtain the priority of the created task.
N	 // It was created with tskIDLE_PRIORITY, but may have changed
N	 // it itself.
N	 if( uxTaskPriorityGet( xHandle ) != tskIDLE_PRIORITY )
N	 {
N		 // The task has changed it's priority.
N	 }
N
N	 // ...
N
N	 // Is our priority higher than the created task?
N	 if( uxTaskPriorityGet( xHandle ) < uxTaskPriorityGet( NULL ) )
N	 {
N		 // Our priority (obtained using NULL handle) is higher.
N	 }
N }
N   </pre>
N * \defgroup uxTaskPriorityGet uxTaskPriorityGet
N * \ingroup TaskCtrl
N */
NUBaseType_t uxTaskPriorityGet( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
XUBaseType_t uxTaskPriorityGet( TaskHandle_t xTask ) ;
N
N/**
N * task. h
N * <pre>UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask );</pre>
N *
N * A version of uxTaskPriorityGet() that can be used from an ISR.
N */
NUBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
XUBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask ) ;
N
N/**
N * task. h
N * <pre>eTaskState eTaskGetState( TaskHandle_t xTask );</pre>
N *
N * INCLUDE_eTaskGetState must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N * Obtain the state of any task.  States are encoded by the eTaskState
N * enumerated type.
N *
N * @param xTask Handle of the task to be queried.
N *
N * @return The state of xTask at the time the function was called.  Note the
N * state of the task might change between the function being called, and the
N * functions return value being tested by the calling task.
N */
NeTaskState eTaskGetState( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
XeTaskState eTaskGetState( TaskHandle_t xTask ) ;
N
N/**
N * task. h
N * <pre>void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority );</pre>
N *
N * INCLUDE_vTaskPrioritySet must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N * Set the priority of any task.
N *
N * A context switch will occur before the function returns if the priority
N * being set is higher than the currently executing task.
N *
N * @param xTask Handle to the task for which the priority is being set.
N * Passing a NULL handle results in the priority of the calling task being set.
N *
N * @param uxNewPriority The priority to which the task will be set.
N *
N * Example usage:
N   <pre>
N void vAFunction( void )
N {
N TaskHandle_t xHandle;
N
N	 // Create a task, storing the handle.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );
N
N	 // ...
N
N	 // Use the handle to raise the priority of the created task.
N	 vTaskPrioritySet( xHandle, tskIDLE_PRIORITY + 1 );
N
N	 // ...
N
N	 // Use a NULL handle to raise our priority to the same value.
N	 vTaskPrioritySet( NULL, tskIDLE_PRIORITY + 1 );
N }
N   </pre>
N * \defgroup vTaskPrioritySet vTaskPrioritySet
N * \ingroup TaskCtrl
N */
Nvoid vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority ) PRIVILEGED_FUNCTION;
Xvoid vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority ) ;
N
N/**
N * task. h
N * <pre>void vTaskSuspend( TaskHandle_t xTaskToSuspend );</pre>
N *
N * INCLUDE_vTaskSuspend must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N * Suspend any task.  When suspended a task will never get any microcontroller
N * processing time, no matter what its priority.
N *
N * Calls to vTaskSuspend are not accumulative -
N * i.e. calling vTaskSuspend () twice on the same task still only requires one
N * call to vTaskResume () to ready the suspended task.
N *
N * @param xTaskToSuspend Handle to the task being suspended.  Passing a NULL
N * handle will cause the calling task to be suspended.
N *
N * Example usage:
N   <pre>
N void vAFunction( void )
N {
N TaskHandle_t xHandle;
N
N	 // Create a task, storing the handle.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );
N
N	 // ...
N
N	 // Use the handle to suspend the created task.
N	 vTaskSuspend( xHandle );
N
N	 // ...
N
N	 // The created task will not run during this period, unless
N	 // another task calls vTaskResume( xHandle ).
N
N	 //...
N
N
N	 // Suspend ourselves.
N	 vTaskSuspend( NULL );
N
N	 // We cannot get here unless another task calls vTaskResume
N	 // with our handle as the parameter.
N }
N   </pre>
N * \defgroup vTaskSuspend vTaskSuspend
N * \ingroup TaskCtrl
N */
Nvoid vTaskSuspend( TaskHandle_t xTaskToSuspend ) PRIVILEGED_FUNCTION;
Xvoid vTaskSuspend( TaskHandle_t xTaskToSuspend ) ;
N
N/**
N * task. h
N * <pre>void vTaskResume( TaskHandle_t xTaskToResume );</pre>
N *
N * INCLUDE_vTaskSuspend must be defined as 1 for this function to be available.
N * See the configuration section for more information.
N *
N * Resumes a suspended task.
N *
N * A task that has been suspended by one or more calls to vTaskSuspend ()
N * will be made available for running again by a single call to
N * vTaskResume ().
N *
N * @param xTaskToResume Handle to the task being readied.
N *
N * Example usage:
N   <pre>
N void vAFunction( void )
N {
N TaskHandle_t xHandle;
N
N	 // Create a task, storing the handle.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, NULL, tskIDLE_PRIORITY, &xHandle );
N
N	 // ...
N
N	 // Use the handle to suspend the created task.
N	 vTaskSuspend( xHandle );
N
N	 // ...
N
N	 // The created task will not run during this period, unless
N	 // another task calls vTaskResume( xHandle ).
N
N	 //...
N
N
N	 // Resume the suspended task ourselves.
N	 vTaskResume( xHandle );
N
N	 // The created task will once again get microcontroller processing
N	 // time in accordance with its priority within the system.
N }
N   </pre>
N * \defgroup vTaskResume vTaskResume
N * \ingroup TaskCtrl
N */
Nvoid vTaskResume( TaskHandle_t xTaskToResume ) PRIVILEGED_FUNCTION;
Xvoid vTaskResume( TaskHandle_t xTaskToResume ) ;
N
N/**
N * task. h
N * <pre>void xTaskResumeFromISR( TaskHandle_t xTaskToResume );</pre>
N *
N * INCLUDE_xTaskResumeFromISR must be defined as 1 for this function to be
N * available.  See the configuration section for more information.
N *
N * An implementation of vTaskResume() that can be called from within an ISR.
N *
N * A task that has been suspended by one or more calls to vTaskSuspend ()
N * will be made available for running again by a single call to
N * xTaskResumeFromISR ().
N *
N * xTaskResumeFromISR() should not be used to synchronise a task with an
N * interrupt if there is a chance that the interrupt could arrive prior to the
N * task being suspended - as this can lead to interrupts being missed. Use of a
N * semaphore as a synchronisation mechanism would avoid this eventuality.
N *
N * @param xTaskToResume Handle to the task being readied.
N *
N * @return pdTRUE if resuming the task should result in a context switch,
N * otherwise pdFALSE. This is used by the ISR to determine if a context switch
N * may be required following the ISR.
N *
N * \defgroup vTaskResumeFromISR vTaskResumeFromISR
N * \ingroup TaskCtrl
N */
NBaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume ) PRIVILEGED_FUNCTION;
XBaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume ) ;
N
N/*-----------------------------------------------------------
N * SCHEDULER CONTROL
N *----------------------------------------------------------*/
N
N/**
N * task. h
N * <pre>void vTaskStartScheduler( void );</pre>
N *
N * Starts the real time kernel tick processing.  After calling the kernel
N * has control over which tasks are executed and when.
N *
N * See the demo application file main.c for an example of creating
N * tasks and starting the kernel.
N *
N * Example usage:
N   <pre>
N void vAFunction( void )
N {
N	 // Create at least one task before starting the kernel.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
N
N	 // Start the real time kernel with preemption.
N	 vTaskStartScheduler ();
N
N	 // Will not get here unless a task calls vTaskEndScheduler ()
N }
N   </pre>
N *
N * \defgroup vTaskStartScheduler vTaskStartScheduler
N * \ingroup SchedulerControl
N */
Nvoid vTaskStartScheduler( void ) PRIVILEGED_FUNCTION;
Xvoid vTaskStartScheduler( void ) ;
N
N/**
N * task. h
N * <pre>void vTaskEndScheduler( void );</pre>
N *
N * NOTE:  At the time of writing only the x86 real mode port, which runs on a PC
N * in place of DOS, implements this function.
N *
N * Stops the real time kernel tick.  All created tasks will be automatically
N * deleted and multitasking (either preemptive or cooperative) will
N * stop.  Execution then resumes from the point where vTaskStartScheduler ()
N * was called, as if vTaskStartScheduler () had just returned.
N *
N * See the demo application file main. c in the demo/PC directory for an
N * example that uses vTaskEndScheduler ().
N *
N * vTaskEndScheduler () requires an exit function to be defined within the
N * portable layer (see vPortEndScheduler () in port. c for the PC port).  This
N * performs hardware specific operations such as stopping the kernel tick.
N *
N * vTaskEndScheduler () will cause all of the resources allocated by the
N * kernel to be freed - but will not free resources allocated by application
N * tasks.
N *
N * Example usage:
N   <pre>
N void vTaskCode( void * pvParameters )
N {
N	 for( ;; )
N	 {
N		 // Task code goes here.
N
N		 // At some point we want to end the real time kernel processing
N		 // so call ...
N		 vTaskEndScheduler ();
N	 }
N }
N
N void vAFunction( void )
N {
N	 // Create at least one task before starting the kernel.
N	 xTaskCreate( vTaskCode, "NAME", STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
N
N	 // Start the real time kernel with preemption.
N	 vTaskStartScheduler ();
N
N	 // Will only get here when the vTaskCode () task has called
N	 // vTaskEndScheduler ().  When we get here we are back to single task
N	 // execution.
N }
N   </pre>
N *
N * \defgroup vTaskEndScheduler vTaskEndScheduler
N * \ingroup SchedulerControl
N */
Nvoid vTaskEndScheduler( void ) PRIVILEGED_FUNCTION;
Xvoid vTaskEndScheduler( void ) ;
N
N/**
N * task. h
N * <pre>void vTaskSuspendAll( void );</pre>
N *
N * Suspends the scheduler without disabling interrupts.  Context switches will
N * not occur while the scheduler is suspended.
N *
N * After calling vTaskSuspendAll () the calling task will continue to execute
N * without risk of being swapped out until a call to xTaskResumeAll () has been
N * made.
N *
N * API functions that have the potential to cause a context switch (for example,
N * vTaskDelayUntil(), xQueueSend(), etc.) must not be called while the scheduler
N * is suspended.
N *
N * Example usage:
N   <pre>
N void vTask1( void * pvParameters )
N {
N	 for( ;; )
N	 {
N		 // Task code goes here.
N
N		 // ...
N
N		 // At some point the task wants to perform a long operation during
N		 // which it does not want to get swapped out.  It cannot use
N		 // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the
N		 // operation may cause interrupts to be missed - including the
N		 // ticks.
N
N		 // Prevent the real time kernel swapping out the task.
N		 vTaskSuspendAll ();
N
N		 // Perform the operation here.  There is no need to use critical
N		 // sections as we have all the microcontroller processing time.
N		 // During this time interrupts will still operate and the kernel
N		 // tick count will be maintained.
N
N		 // ...
N
N		 // The operation is complete.  Restart the kernel.
N		 xTaskResumeAll ();
N	 }
N }
N   </pre>
N * \defgroup vTaskSuspendAll vTaskSuspendAll
N * \ingroup SchedulerControl
N */
Nvoid vTaskSuspendAll( void ) PRIVILEGED_FUNCTION;
Xvoid vTaskSuspendAll( void ) ;
N
N/**
N * task. h
N * <pre>BaseType_t xTaskResumeAll( void );</pre>
N *
N * Resumes scheduler activity after it was suspended by a call to
N * vTaskSuspendAll().
N *
N * xTaskResumeAll() only resumes the scheduler.  It does not unsuspend tasks
N * that were previously suspended by a call to vTaskSuspend().
N *
N * @return If resuming the scheduler caused a context switch then pdTRUE is
N *		  returned, otherwise pdFALSE is returned.
N *
N * Example usage:
N   <pre>
N void vTask1( void * pvParameters )
N {
N	 for( ;; )
N	 {
N		 // Task code goes here.
N
N		 // ...
N
N		 // At some point the task wants to perform a long operation during
N		 // which it does not want to get swapped out.  It cannot use
N		 // taskENTER_CRITICAL ()/taskEXIT_CRITICAL () as the length of the
N		 // operation may cause interrupts to be missed - including the
N		 // ticks.
N
N		 // Prevent the real time kernel swapping out the task.
N		 vTaskSuspendAll ();
N
N		 // Perform the operation here.  There is no need to use critical
N		 // sections as we have all the microcontroller processing time.
N		 // During this time interrupts will still operate and the real
N		 // time kernel tick count will be maintained.
N
N		 // ...
N
N		 // The operation is complete.  Restart the kernel.  We want to force
N		 // a context switch - but there is no point if resuming the scheduler
N		 // caused a context switch already.
N		 if( !xTaskResumeAll () )
N		 {
N			  taskYIELD ();
N		 }
N	 }
N }
N   </pre>
N * \defgroup xTaskResumeAll xTaskResumeAll
N * \ingroup SchedulerControl
N */
NBaseType_t xTaskResumeAll( void ) PRIVILEGED_FUNCTION;
XBaseType_t xTaskResumeAll( void ) ;
N
N/*-----------------------------------------------------------
N * TASK UTILITIES
N *----------------------------------------------------------*/
N
N/**
N * task. h
N * <PRE>TickType_t xTaskGetTickCount( void );</PRE>
N *
N * @return The count of ticks since vTaskStartScheduler was called.
N *
N * \defgroup xTaskGetTickCount xTaskGetTickCount
N * \ingroup TaskUtils
N */
NTickType_t xTaskGetTickCount( void ) PRIVILEGED_FUNCTION;
XTickType_t xTaskGetTickCount( void ) ;
N
N/**
N * task. h
N * <PRE>TickType_t xTaskGetTickCountFromISR( void );</PRE>
N *
N * @return The count of ticks since vTaskStartScheduler was called.
N *
N * This is a version of xTaskGetTickCount() that is safe to be called from an
N * ISR - provided that TickType_t is the natural word size of the
N * microcontroller being used or interrupt nesting is either not supported or
N * not being used.
N *
N * \defgroup xTaskGetTickCountFromISR xTaskGetTickCountFromISR
N * \ingroup TaskUtils
N */
NTickType_t xTaskGetTickCountFromISR( void ) PRIVILEGED_FUNCTION;
XTickType_t xTaskGetTickCountFromISR( void ) ;
N
N/**
N * task. h
N * <PRE>uint16_t uxTaskGetNumberOfTasks( void );</PRE>
N *
N * @return The number of tasks that the real time kernel is currently managing.
N * This includes all ready, blocked and suspended tasks.  A task that
N * has been deleted but not yet freed by the idle task will also be
N * included in the count.
N *
N * \defgroup uxTaskGetNumberOfTasks uxTaskGetNumberOfTasks
N * \ingroup TaskUtils
N */
NUBaseType_t uxTaskGetNumberOfTasks( void ) PRIVILEGED_FUNCTION;
XUBaseType_t uxTaskGetNumberOfTasks( void ) ;
N
N/**
N * task. h
N * <PRE>char *pcTaskGetTaskName( TaskHandle_t xTaskToQuery );</PRE>
N *
N * @return The text (human readable) name of the task referenced by the handle
N * xTaskToQuery.  A task can query its own name by either passing in its own
N * handle, or by setting xTaskToQuery to NULL.  INCLUDE_pcTaskGetTaskName must be
N * set to 1 in FreeRTOSConfig.h for pcTaskGetTaskName() to be available.
N *
N * \defgroup pcTaskGetTaskName pcTaskGetTaskName
N * \ingroup TaskUtils
N */
Nchar *pcTaskGetTaskName( TaskHandle_t xTaskToQuery ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
Xchar *pcTaskGetTaskName( TaskHandle_t xTaskToQuery ) ;  
N
N/**
N * task.h
N * <PRE>UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask );</PRE>
N *
N * INCLUDE_uxTaskGetStackHighWaterMark must be set to 1 in FreeRTOSConfig.h for
N * this function to be available.
N *
N * Returns the high water mark of the stack associated with xTask.  That is,
N * the minimum free stack space there has been (in words, so on a 32 bit machine
N * a value of 1 means 4 bytes) since the task started.  The smaller the returned
N * number the closer the task has come to overflowing its stack.
N *
N * @param xTask Handle of the task associated with the stack to be checked.
N * Set xTask to NULL to check the stack of the calling task.
N *
N * @return The smallest amount of free stack space there has been (in words, so
N * actual spaces on the stack rather than bytes) since the task referenced by
N * xTask was created.
N */
NUBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
XUBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask ) ;
N
N/* When using trace macros it is sometimes necessary to include task.h before
NFreeRTOS.h.  When this is done TaskHookFunction_t will not yet have been defined,
Nso the following two prototypes will cause a compilation error.  This can be
Nfixed by simply guarding against the inclusion of these two prototypes unless
Nthey are explicitly required by the configUSE_APPLICATION_TASK_TAG configuration
Nconstant. */
N#ifdef configUSE_APPLICATION_TASK_TAG
N	#if configUSE_APPLICATION_TASK_TAG == 1
X	#if 0 == 1
S		/**
S		 * task.h
S		 * <pre>void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction );</pre>
S		 *
S		 * Sets pxHookFunction to be the task hook function used by the task xTask.
S		 * Passing xTask as NULL has the effect of setting the calling tasks hook
S		 * function.
S		 */
S		void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction ) PRIVILEGED_FUNCTION;
S
S		/**
S		 * task.h
S		 * <pre>void xTaskGetApplicationTaskTag( TaskHandle_t xTask );</pre>
S		 *
S		 * Returns the pxHookFunction value assigned to the task xTask.
S		 */
S		TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
N	#endif /* configUSE_APPLICATION_TASK_TAG ==1 */
N#endif /* ifdef configUSE_APPLICATION_TASK_TAG */
N
N#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
X#if( 0 > 0 )
S
S	/* Each task contains an array of pointers that is dimensioned by the
S	configNUM_THREAD_LOCAL_STORAGE_POINTERS setting in FreeRTOSConfig.h.  The
S	kernel does not use the pointers itself, so the application writer can use
S	the pointers for any purpose they wish.  The following two functions are
S	used to set and query a pointer respectively. */
S	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue ) PRIVILEGED_FUNCTION;
S	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex ) PRIVILEGED_FUNCTION;
S
N#endif
N
N/**
N * task.h
N * <pre>BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter );</pre>
N *
N * Calls the hook function associated with xTask.  Passing xTask as NULL has
N * the effect of calling the Running tasks (the calling task) hook function.
N *
N * pvParameter is passed to the hook function for the task to interpret as it
N * wants.  The return value is the value returned by the task hook function
N * registered by the user.
N */
NBaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter ) PRIVILEGED_FUNCTION;
XBaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter ) ;
N
N/**
N * xTaskGetIdleTaskHandle() is only available if
N * INCLUDE_xTaskGetIdleTaskHandle is set to 1 in FreeRTOSConfig.h.
N *
N * Simply returns the handle of the idle task.  It is not valid to call
N * xTaskGetIdleTaskHandle() before the scheduler has been started.
N */
NTaskHandle_t xTaskGetIdleTaskHandle( void ) PRIVILEGED_FUNCTION;
XTaskHandle_t xTaskGetIdleTaskHandle( void ) ;
N
N/**
N * configUSE_TRACE_FACILITY must be defined as 1 in FreeRTOSConfig.h for
N * uxTaskGetSystemState() to be available.
N *
N * uxTaskGetSystemState() populates an TaskStatus_t structure for each task in
N * the system.  TaskStatus_t structures contain, among other things, members
N * for the task handle, task name, task priority, task state, and total amount
N * of run time consumed by the task.  See the TaskStatus_t structure
N * definition in this file for the full member list.
N *
N * NOTE:  This function is intended for debugging use only as its use results in
N * the scheduler remaining suspended for an extended period.
N *
N * @param pxTaskStatusArray A pointer to an array of TaskStatus_t structures.
N * The array must contain at least one TaskStatus_t structure for each task
N * that is under the control of the RTOS.  The number of tasks under the control
N * of the RTOS can be determined using the uxTaskGetNumberOfTasks() API function.
N *
N * @param uxArraySize The size of the array pointed to by the pxTaskStatusArray
N * parameter.  The size is specified as the number of indexes in the array, or
N * the number of TaskStatus_t structures contained in the array, not by the
N * number of bytes in the array.
N *
N * @param pulTotalRunTime If configGENERATE_RUN_TIME_STATS is set to 1 in
N * FreeRTOSConfig.h then *pulTotalRunTime is set by uxTaskGetSystemState() to the
N * total run time (as defined by the run time stats clock, see
N * http://www.freertos.org/rtos-run-time-stats.html) since the target booted.
N * pulTotalRunTime can be set to NULL to omit the total run time information.
N *
N * @return The number of TaskStatus_t structures that were populated by
N * uxTaskGetSystemState().  This should equal the number returned by the
N * uxTaskGetNumberOfTasks() API function, but will be zero if the value passed
N * in the uxArraySize parameter was too small.
N *
N * Example usage:
N   <pre>
N    // This example demonstrates how a human readable table of run time stats
N	// information is generated from raw data provided by uxTaskGetSystemState().
N	// The human readable table is written to pcWriteBuffer
N	void vTaskGetRunTimeStats( char *pcWriteBuffer )
N	{
N	TaskStatus_t *pxTaskStatusArray;
N	volatile UBaseType_t uxArraySize, x;
N	uint32_t ulTotalRunTime, ulStatsAsPercentage;
N
N		// Make sure the write buffer does not contain a string.
N		*pcWriteBuffer = 0x00;
N
N		// Take a snapshot of the number of tasks in case it changes while this
N		// function is executing.
N		uxArraySize = uxTaskGetNumberOfTasks();
N
N		// Allocate a TaskStatus_t structure for each task.  An array could be
N		// allocated statically at compile time.
N		pxTaskStatusArray = pvPortMalloc( uxArraySize * sizeof( TaskStatus_t ) );
N
N		if( pxTaskStatusArray != NULL )
N		{
N			// Generate raw status information about each task.
N			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalRunTime );
N
N			// For percentage calculations.
N			ulTotalRunTime /= 100UL;
N
N			// Avoid divide by zero errors.
N			if( ulTotalRunTime > 0 )
N			{
N				// For each populated position in the pxTaskStatusArray array,
N				// format the raw data as human readable ASCII data
N				for( x = 0; x < uxArraySize; x++ )
N				{
N					// What percentage of the total run time has the task used?
N					// This will always be rounded down to the nearest integer.
N					// ulTotalRunTimeDiv100 has already been divided by 100.
N					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalRunTime;
N
N					if( ulStatsAsPercentage > 0UL )
N					{
N						sprintf( pcWriteBuffer, "%s\t\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter, ulStatsAsPercentage );
N					}
N					else
N					{
N						// If the percentage is zero here then the task has
N						// consumed less than 1% of the total run time.
N						sprintf( pcWriteBuffer, "%s\t\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].pcTaskName, pxTaskStatusArray[ x ].ulRunTimeCounter );
N					}
N
N					pcWriteBuffer += strlen( ( char * ) pcWriteBuffer );
N				}
N			}
N
N			// The array is no longer needed, free the memory it consumes.
N			vPortFree( pxTaskStatusArray );
N		}
N	}
N	</pre>
N */
NUBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime ) PRIVILEGED_FUNCTION;
XUBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime ) ;
N
N/**
N * task. h
N * <PRE>void vTaskList( char *pcWriteBuffer );</PRE>
N *
N * configUSE_TRACE_FACILITY and configUSE_STATS_FORMATTING_FUNCTIONS must
N * both be defined as 1 for this function to be available.  See the
N * configuration section of the FreeRTOS.org website for more information.
N *
N * NOTE 1: This function will disable interrupts for its duration.  It is
N * not intended for normal application runtime use but as a debug aid.
N *
N * Lists all the current tasks, along with their current state and stack
N * usage high water mark.
N *
N * Tasks are reported as blocked ('B'), ready ('R'), deleted ('D') or
N * suspended ('S').
N *
N * PLEASE NOTE:
N *
N * This function is provided for convenience only, and is used by many of the
N * demo applications.  Do not consider it to be part of the scheduler.
N *
N * vTaskList() calls uxTaskGetSystemState(), then formats part of the
N * uxTaskGetSystemState() output into a human readable table that displays task
N * names, states and stack usage.
N *
N * vTaskList() has a dependency on the sprintf() C library function that might
N * bloat the code size, use a lot of stack, and provide different results on
N * different platforms.  An alternative, tiny, third party, and limited
N * functionality implementation of sprintf() is provided in many of the
N * FreeRTOS/Demo sub-directories in a file called printf-stdarg.c (note
N * printf-stdarg.c does not provide a full snprintf() implementation!).
N *
N * It is recommended that production systems call uxTaskGetSystemState()
N * directly to get access to raw stats data, rather than indirectly through a
N * call to vTaskList().
N *
N * @param pcWriteBuffer A buffer into which the above mentioned details
N * will be written, in ASCII form.  This buffer is assumed to be large
N * enough to contain the generated report.  Approximately 40 bytes per
N * task should be sufficient.
N *
N * \defgroup vTaskList vTaskList
N * \ingroup TaskUtils
N */
Nvoid vTaskList( char * pcWriteBuffer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
Xvoid vTaskList( char * pcWriteBuffer ) ;  
N
N/**
N * task. h
N * <PRE>void vTaskGetRunTimeStats( char *pcWriteBuffer );</PRE>
N *
N * configGENERATE_RUN_TIME_STATS and configUSE_STATS_FORMATTING_FUNCTIONS
N * must both be defined as 1 for this function to be available.  The application
N * must also then provide definitions for
N * portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() and portGET_RUN_TIME_COUNTER_VALUE()
N * to configure a peripheral timer/counter and return the timers current count
N * value respectively.  The counter should be at least 10 times the frequency of
N * the tick count.
N *
N * NOTE 1: This function will disable interrupts for its duration.  It is
N * not intended for normal application runtime use but as a debug aid.
N *
N * Setting configGENERATE_RUN_TIME_STATS to 1 will result in a total
N * accumulated execution time being stored for each task.  The resolution
N * of the accumulated time value depends on the frequency of the timer
N * configured by the portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() macro.
N * Calling vTaskGetRunTimeStats() writes the total execution time of each
N * task into a buffer, both as an absolute count value and as a percentage
N * of the total system execution time.
N *
N * NOTE 2:
N *
N * This function is provided for convenience only, and is used by many of the
N * demo applications.  Do not consider it to be part of the scheduler.
N *
N * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part of the
N * uxTaskGetSystemState() output into a human readable table that displays the
N * amount of time each task has spent in the Running state in both absolute and
N * percentage terms.
N *
N * vTaskGetRunTimeStats() has a dependency on the sprintf() C library function
N * that might bloat the code size, use a lot of stack, and provide different
N * results on different platforms.  An alternative, tiny, third party, and
N * limited functionality implementation of sprintf() is provided in many of the
N * FreeRTOS/Demo sub-directories in a file called printf-stdarg.c (note
N * printf-stdarg.c does not provide a full snprintf() implementation!).
N *
N * It is recommended that production systems call uxTaskGetSystemState() directly
N * to get access to raw stats data, rather than indirectly through a call to
N * vTaskGetRunTimeStats().
N *
N * @param pcWriteBuffer A buffer into which the execution times will be
N * written, in ASCII form.  This buffer is assumed to be large enough to
N * contain the generated report.  Approximately 40 bytes per task should
N * be sufficient.
N *
N * \defgroup vTaskGetRunTimeStats vTaskGetRunTimeStats
N * \ingroup TaskUtils
N */
Nvoid vTaskGetRunTimeStats( char *pcWriteBuffer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
Xvoid vTaskGetRunTimeStats( char *pcWriteBuffer ) ;  
N
N/**
N * task. h
N * <PRE>BaseType_t xTaskNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction );</PRE>
N *
N * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this
N * function to be available.
N *
N * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private
N * "notification value", which is a 32-bit unsigned integer (uint32_t).
N *
N * Events can be sent to a task using an intermediary object.  Examples of such
N * objects are queues, semaphores, mutexes and event groups.  Task notifications
N * are a method of sending an event directly to a task without the need for such
N * an intermediary object.
N *
N * A notification sent to a task can optionally perform an action, such as
N * update, overwrite or increment the task's notification value.  In that way
N * task notifications can be used to send data to a task, or be used as light
N * weight and fast binary or counting semaphores.
N *
N * A notification sent to a task will remain pending until it is cleared by the
N * task calling xTaskNotifyWait() or ulTaskNotifyTake().  If the task was
N * already in the Blocked state to wait for a notification when the notification
N * arrives then the task will automatically be removed from the Blocked state
N * (unblocked) and the notification cleared.
N *
N * A task can use xTaskNotifyWait() to [optionally] block to wait for a
N * notification to be pending, or ulTaskNotifyTake() to [optionally] block
N * to wait for its notification value to have a non-zero value.  The task does
N * not consume any CPU time while it is in the Blocked state.
N *
N * See http://www.FreeRTOS.org/RTOS-task-notifications.html for details.
N *
N * @param xTaskToNotify The handle of the task being notified.  The handle to a
N * task can be returned from the xTaskCreate() API function used to create the
N * task, and the handle of the currently running task can be obtained by calling
N * xTaskGetCurrentTaskHandle().
N *
N * @param ulValue Data that can be sent with the notification.  How the data is
N * used depends on the value of the eAction parameter.
N *
N * @param eAction Specifies how the notification updates the task's notification
N * value, if at all.  Valid values for eAction are as follows:
N *
N * eSetBits -
N * The task's notification value is bitwise ORed with ulValue.  xTaskNofify()
N * always returns pdPASS in this case.
N *
N * eIncrement -
N * The task's notification value is incremented.  ulValue is not used and
N * xTaskNotify() always returns pdPASS in this case.
N *
N * eSetValueWithOverwrite -
N * The task's notification value is set to the value of ulValue, even if the
N * task being notified had not yet processed the previous notification (the
N * task already had a notification pending).  xTaskNotify() always returns
N * pdPASS in this case.
N *
N * eSetValueWithoutOverwrite -
N * If the task being notified did not already have a notification pending then
N * the task's notification value is set to ulValue and xTaskNotify() will
N * return pdPASS.  If the task being notified already had a notification
N * pending then no action is performed and pdFAIL is returned.
N *
N * eNoAction -
N * The task receives a notification without its notification value being
N * updated.  ulValue is not used and xTaskNotify() always returns pdPASS in
N * this case.
N *
N *  pulPreviousNotificationValue -
N *  Can be used to pass out the subject task's notification value before any
N *  bits are modified by the notify function.
N *
N * @return Dependent on the value of eAction.  See the description of the
N * eAction parameter.
N *
N * \defgroup xTaskNotify xTaskNotify
N * \ingroup TaskNotifications
N */
NBaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue ) PRIVILEGED_FUNCTION;
XBaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue ) ;
N#define xTaskNotify( xTaskToNotify, ulValue, eAction ) xTaskGenericNotify( ( xTaskToNotify ), ( ulValue ), ( eAction ), NULL )
N#define xTaskNotifyAndQuery( xTaskToNotify, ulValue, eAction, pulPreviousNotifyValue ) xTaskGenericNotify( ( xTaskToNotify ), ( ulValue ), ( eAction ), ( pulPreviousNotifyValue ) )
N
N/**
N * task. h
N * <PRE>BaseType_t xTaskNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken );</PRE>
N *
N * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this
N * function to be available.
N *
N * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private
N * "notification value", which is a 32-bit unsigned integer (uint32_t).
N *
N * A version of xTaskNotify() that can be used from an interrupt service routine
N * (ISR).
N *
N * Events can be sent to a task using an intermediary object.  Examples of such
N * objects are queues, semaphores, mutexes and event groups.  Task notifications
N * are a method of sending an event directly to a task without the need for such
N * an intermediary object.
N *
N * A notification sent to a task can optionally perform an action, such as
N * update, overwrite or increment the task's notification value.  In that way
N * task notifications can be used to send data to a task, or be used as light
N * weight and fast binary or counting semaphores.
N *
N * A notification sent to a task will remain pending until it is cleared by the
N * task calling xTaskNotifyWait() or ulTaskNotifyTake().  If the task was
N * already in the Blocked state to wait for a notification when the notification
N * arrives then the task will automatically be removed from the Blocked state
N * (unblocked) and the notification cleared.
N *
N * A task can use xTaskNotifyWait() to [optionally] block to wait for a
N * notification to be pending, or ulTaskNotifyTake() to [optionally] block
N * to wait for its notification value to have a non-zero value.  The task does
N * not consume any CPU time while it is in the Blocked state.
N *
N * See http://www.FreeRTOS.org/RTOS-task-notifications.html for details.
N *
N * @param xTaskToNotify The handle of the task being notified.  The handle to a
N * task can be returned from the xTaskCreate() API function used to create the
N * task, and the handle of the currently running task can be obtained by calling
N * xTaskGetCurrentTaskHandle().
N *
N * @param ulValue Data that can be sent with the notification.  How the data is
N * used depends on the value of the eAction parameter.
N *
N * @param eAction Specifies how the notification updates the task's notification
N * value, if at all.  Valid values for eAction are as follows:
N *
N * eSetBits -
N * The task's notification value is bitwise ORed with ulValue.  xTaskNofify()
N * always returns pdPASS in this case.
N *
N * eIncrement -
N * The task's notification value is incremented.  ulValue is not used and
N * xTaskNotify() always returns pdPASS in this case.
N *
N * eSetValueWithOverwrite -
N * The task's notification value is set to the value of ulValue, even if the
N * task being notified had not yet processed the previous notification (the
N * task already had a notification pending).  xTaskNotify() always returns
N * pdPASS in this case.
N *
N * eSetValueWithoutOverwrite -
N * If the task being notified did not already have a notification pending then
N * the task's notification value is set to ulValue and xTaskNotify() will
N * return pdPASS.  If the task being notified already had a notification
N * pending then no action is performed and pdFAIL is returned.
N *
N * eNoAction -
N * The task receives a notification without its notification value being
N * updated.  ulValue is not used and xTaskNotify() always returns pdPASS in
N * this case.
N *
N * @param pxHigherPriorityTaskWoken  xTaskNotifyFromISR() will set
N * *pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the
N * task to which the notification was sent to leave the Blocked state, and the
N * unblocked task has a priority higher than the currently running task.  If
N * xTaskNotifyFromISR() sets this value to pdTRUE then a context switch should
N * be requested before the interrupt is exited.  How a context switch is
N * requested from an ISR is dependent on the port - see the documentation page
N * for the port in use.
N *
N * @return Dependent on the value of eAction.  See the description of the
N * eAction parameter.
N *
N * \defgroup xTaskNotify xTaskNotify
N * \ingroup TaskNotifications
N */
NBaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken ) PRIVILEGED_FUNCTION;
XBaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken ) ;
N#define xTaskNotifyFromISR( xTaskToNotify, ulValue, eAction, pxHigherPriorityTaskWoken ) xTaskGenericNotifyFromISR( ( xTaskToNotify ), ( ulValue ), ( eAction ), NULL, ( pxHigherPriorityTaskWoken ) )
N#define xTaskNotifyAndQueryFromISR( xTaskToNotify, ulValue, eAction, pulPreviousNotificationValue, pxHigherPriorityTaskWoken ) xTaskGenericNotifyFromISR( ( xTaskToNotify ), ( ulValue ), ( eAction ), ( pulPreviousNotificationValue ), ( pxHigherPriorityTaskWoken ) )
N
N/**
N * task. h
N * <PRE>BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait );</pre>
N *
N * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this
N * function to be available.
N *
N * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private
N * "notification value", which is a 32-bit unsigned integer (uint32_t).
N *
N * Events can be sent to a task using an intermediary object.  Examples of such
N * objects are queues, semaphores, mutexes and event groups.  Task notifications
N * are a method of sending an event directly to a task without the need for such
N * an intermediary object.
N *
N * A notification sent to a task can optionally perform an action, such as
N * update, overwrite or increment the task's notification value.  In that way
N * task notifications can be used to send data to a task, or be used as light
N * weight and fast binary or counting semaphores.
N *
N * A notification sent to a task will remain pending until it is cleared by the
N * task calling xTaskNotifyWait() or ulTaskNotifyTake().  If the task was
N * already in the Blocked state to wait for a notification when the notification
N * arrives then the task will automatically be removed from the Blocked state
N * (unblocked) and the notification cleared.
N *
N * A task can use xTaskNotifyWait() to [optionally] block to wait for a
N * notification to be pending, or ulTaskNotifyTake() to [optionally] block
N * to wait for its notification value to have a non-zero value.  The task does
N * not consume any CPU time while it is in the Blocked state.
N *
N * See http://www.FreeRTOS.org/RTOS-task-notifications.html for details.
N *
N * @param ulBitsToClearOnEntry Bits that are set in ulBitsToClearOnEntry value
N * will be cleared in the calling task's notification value before the task
N * checks to see if any notifications are pending, and optionally blocks if no
N * notifications are pending.  Setting ulBitsToClearOnEntry to ULONG_MAX (if
N * limits.h is included) or 0xffffffffUL (if limits.h is not included) will have
N * the effect of resetting the task's notification value to 0.  Setting
N * ulBitsToClearOnEntry to 0 will leave the task's notification value unchanged.
N *
N * @param ulBitsToClearOnExit If a notification is pending or received before
N * the calling task exits the xTaskNotifyWait() function then the task's
N * notification value (see the xTaskNotify() API function) is passed out using
N * the pulNotificationValue parameter.  Then any bits that are set in
N * ulBitsToClearOnExit will be cleared in the task's notification value (note
N * *pulNotificationValue is set before any bits are cleared).  Setting
N * ulBitsToClearOnExit to ULONG_MAX (if limits.h is included) or 0xffffffffUL
N * (if limits.h is not included) will have the effect of resetting the task's
N * notification value to 0 before the function exits.  Setting
N * ulBitsToClearOnExit to 0 will leave the task's notification value unchanged
N * when the function exits (in which case the value passed out in
N * pulNotificationValue will match the task's notification value).
N *
N * @param pulNotificationValue Used to pass the task's notification value out
N * of the function.  Note the value passed out will not be effected by the
N * clearing of any bits caused by ulBitsToClearOnExit being non-zero.
N *
N * @param xTicksToWait The maximum amount of time that the task should wait in
N * the Blocked state for a notification to be received, should a notification
N * not already be pending when xTaskNotifyWait() was called.  The task
N * will not consume any processing time while it is in the Blocked state.  This
N * is specified in kernel ticks, the macro pdMS_TO_TICSK( value_in_ms ) can be
N * used to convert a time specified in milliseconds to a time specified in
N * ticks.
N *
N * @return If a notification was received (including notifications that were
N * already pending when xTaskNotifyWait was called) then pdPASS is
N * returned.  Otherwise pdFAIL is returned.
N *
N * \defgroup xTaskNotifyWait xTaskNotifyWait
N * \ingroup TaskNotifications
N */
NBaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait ) PRIVILEGED_FUNCTION;
XBaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait ) ;
N
N/**
N * task. h
N * <PRE>BaseType_t xTaskNotifyGive( TaskHandle_t xTaskToNotify );</PRE>
N *
N * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this macro
N * to be available.
N *
N * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private
N * "notification value", which is a 32-bit unsigned integer (uint32_t).
N *
N * Events can be sent to a task using an intermediary object.  Examples of such
N * objects are queues, semaphores, mutexes and event groups.  Task notifications
N * are a method of sending an event directly to a task without the need for such
N * an intermediary object.
N *
N * A notification sent to a task can optionally perform an action, such as
N * update, overwrite or increment the task's notification value.  In that way
N * task notifications can be used to send data to a task, or be used as light
N * weight and fast binary or counting semaphores.
N *
N * xTaskNotifyGive() is a helper macro intended for use when task notifications
N * are used as light weight and faster binary or counting semaphore equivalents.
N * Actual FreeRTOS semaphores are given using the xSemaphoreGive() API function,
N * the equivalent action that instead uses a task notification is
N * xTaskNotifyGive().
N *
N * When task notifications are being used as a binary or counting semaphore
N * equivalent then the task being notified should wait for the notification
N * using the ulTaskNotificationTake() API function rather than the
N * xTaskNotifyWait() API function.
N *
N * See http://www.FreeRTOS.org/RTOS-task-notifications.html for more details.
N *
N * @param xTaskToNotify The handle of the task being notified.  The handle to a
N * task can be returned from the xTaskCreate() API function used to create the
N * task, and the handle of the currently running task can be obtained by calling
N * xTaskGetCurrentTaskHandle().
N *
N * @return xTaskNotifyGive() is a macro that calls xTaskNotify() with the
N * eAction parameter set to eIncrement - so pdPASS is always returned.
N *
N * \defgroup xTaskNotifyGive xTaskNotifyGive
N * \ingroup TaskNotifications
N */
N#define xTaskNotifyGive( xTaskToNotify ) xTaskGenericNotify( ( xTaskToNotify ), ( 0 ), eIncrement, NULL )
N
N/**
N * task. h
N * <PRE>void vTaskNotifyGiveFromISR( TaskHandle_t xTaskHandle, BaseType_t *pxHigherPriorityTaskWoken );
N *
N * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this macro
N * to be available.
N *
N * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private
N * "notification value", which is a 32-bit unsigned integer (uint32_t).
N *
N * A version of xTaskNotifyGive() that can be called from an interrupt service
N * routine (ISR).
N *
N * Events can be sent to a task using an intermediary object.  Examples of such
N * objects are queues, semaphores, mutexes and event groups.  Task notifications
N * are a method of sending an event directly to a task without the need for such
N * an intermediary object.
N *
N * A notification sent to a task can optionally perform an action, such as
N * update, overwrite or increment the task's notification value.  In that way
N * task notifications can be used to send data to a task, or be used as light
N * weight and fast binary or counting semaphores.
N *
N * vTaskNotifyGiveFromISR() is intended for use when task notifications are
N * used as light weight and faster binary or counting semaphore equivalents.
N * Actual FreeRTOS semaphores are given from an ISR using the
N * xSemaphoreGiveFromISR() API function, the equivalent action that instead uses
N * a task notification is vTaskNotifyGiveFromISR().
N *
N * When task notifications are being used as a binary or counting semaphore
N * equivalent then the task being notified should wait for the notification
N * using the ulTaskNotificationTake() API function rather than the
N * xTaskNotifyWait() API function.
N *
N * See http://www.FreeRTOS.org/RTOS-task-notifications.html for more details.
N *
N * @param xTaskToNotify The handle of the task being notified.  The handle to a
N * task can be returned from the xTaskCreate() API function used to create the
N * task, and the handle of the currently running task can be obtained by calling
N * xTaskGetCurrentTaskHandle().
N *
N * @param pxHigherPriorityTaskWoken  vTaskNotifyGiveFromISR() will set
N * *pxHigherPriorityTaskWoken to pdTRUE if sending the notification caused the
N * task to which the notification was sent to leave the Blocked state, and the
N * unblocked task has a priority higher than the currently running task.  If
N * vTaskNotifyGiveFromISR() sets this value to pdTRUE then a context switch
N * should be requested before the interrupt is exited.  How a context switch is
N * requested from an ISR is dependent on the port - see the documentation page
N * for the port in use.
N *
N * \defgroup xTaskNotifyWait xTaskNotifyWait
N * \ingroup TaskNotifications
N */
Nvoid vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken ) PRIVILEGED_FUNCTION;
Xvoid vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken ) ;
N
N/**
N * task. h
N * <PRE>uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait );</pre>
N *
N * configUSE_TASK_NOTIFICATIONS must be undefined or defined as 1 for this
N * function to be available.
N *
N * When configUSE_TASK_NOTIFICATIONS is set to one each task has its own private
N * "notification value", which is a 32-bit unsigned integer (uint32_t).
N *
N * Events can be sent to a task using an intermediary object.  Examples of such
N * objects are queues, semaphores, mutexes and event groups.  Task notifications
N * are a method of sending an event directly to a task without the need for such
N * an intermediary object.
N *
N * A notification sent to a task can optionally perform an action, such as
N * update, overwrite or increment the task's notification value.  In that way
N * task notifications can be used to send data to a task, or be used as light
N * weight and fast binary or counting semaphores.
N *
N * ulTaskNotifyTake() is intended for use when a task notification is used as a
N * faster and lighter weight binary or counting semaphore alternative.  Actual
N * FreeRTOS semaphores are taken using the xSemaphoreTake() API function, the
N * equivalent action that instead uses a task notification is
N * ulTaskNotifyTake().
N *
N * When a task is using its notification value as a binary or counting semaphore
N * other tasks should send notifications to it using the xTaskNotifyGive()
N * macro, or xTaskNotify() function with the eAction parameter set to
N * eIncrement.
N *
N * ulTaskNotifyTake() can either clear the task's notification value to
N * zero on exit, in which case the notification value acts like a binary
N * semaphore, or decrement the task's notification value on exit, in which case
N * the notification value acts like a counting semaphore.
N *
N * A task can use ulTaskNotifyTake() to [optionally] block to wait for a
N * the task's notification value to be non-zero.  The task does not consume any
N * CPU time while it is in the Blocked state.
N *
N * Where as xTaskNotifyWait() will return when a notification is pending,
N * ulTaskNotifyTake() will return when the task's notification value is
N * not zero.
N *
N * See http://www.FreeRTOS.org/RTOS-task-notifications.html for details.
N *
N * @param xClearCountOnExit if xClearCountOnExit is pdFALSE then the task's
N * notification value is decremented when the function exits.  In this way the
N * notification value acts like a counting semaphore.  If xClearCountOnExit is
N * not pdFALSE then the task's notification value is cleared to zero when the
N * function exits.  In this way the notification value acts like a binary
N * semaphore.
N *
N * @param xTicksToWait The maximum amount of time that the task should wait in
N * the Blocked state for the task's notification value to be greater than zero,
N * should the count not already be greater than zero when
N * ulTaskNotifyTake() was called.  The task will not consume any processing
N * time while it is in the Blocked state.  This is specified in kernel ticks,
N * the macro pdMS_TO_TICSK( value_in_ms ) can be used to convert a time
N * specified in milliseconds to a time specified in ticks.
N *
N * @return The task's notification count before it is either cleared to zero or
N * decremented (see the xClearCountOnExit parameter).
N *
N * \defgroup ulTaskNotifyTake ulTaskNotifyTake
N * \ingroup TaskNotifications
N */
Nuint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait ) PRIVILEGED_FUNCTION;
Xuint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait ) ;
N
N/**
N * task. h
N * <PRE>BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask );</pre>
N *
N * If the notification state of the task referenced by the handle xTask is
N * eNotified, then set the task's notification state to eNotWaitingNotification.
N * The task's notification value is not altered.  Set xTask to NULL to clear the
N * notification state of the calling task.
N *
N * @return pdTRUE if the task's notification state was set to
N * eNotWaitingNotification, otherwise pdFALSE.
N * \defgroup xTaskNotifyStateClear xTaskNotifyStateClear
N * \ingroup TaskNotifications
N */
NBaseType_t xTaskNotifyStateClear( TaskHandle_t xTask );
N
N/*-----------------------------------------------------------
N * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
N *----------------------------------------------------------*/
N
N/*
N * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS ONLY
N * INTENDED FOR USE WHEN IMPLEMENTING A PORT OF THE SCHEDULER AND IS
N * AN INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.
N *
N * Called from the real time kernel tick (either preemptive or cooperative),
N * this increments the tick count and checks if any tasks that are blocked
N * for a finite period required removing from a blocked list and placing on
N * a ready list.  If a non-zero value is returned then a context switch is
N * required because either:
N *   + A task was removed from a blocked list because its timeout had expired,
N *     or
N *   + Time slicing is in use and there is a task of equal priority to the
N *     currently running task.
N */
NBaseType_t xTaskIncrementTick( void ) PRIVILEGED_FUNCTION;
XBaseType_t xTaskIncrementTick( void ) ;
N
N/*
N * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN
N * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.
N *
N * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.
N *
N * Removes the calling task from the ready list and places it both
N * on the list of tasks waiting for a particular event, and the
N * list of delayed tasks.  The task will be removed from both lists
N * and replaced on the ready list should either the event occur (and
N * there be no higher priority tasks waiting on the same event) or
N * the delay period expires.
N *
N * The 'unordered' version replaces the event list item value with the
N * xItemValue value, and inserts the list item at the end of the list.
N *
N * The 'ordered' version uses the existing event list item value (which is the
N * owning tasks priority) to insert the list item into the event list is task
N * priority order.
N *
N * @param pxEventList The list containing tasks that are blocked waiting
N * for the event to occur.
N *
N * @param xItemValue The item value to use for the event list item when the
N * event list is not ordered by task priority.
N *
N * @param xTicksToWait The maximum amount of time that the task should wait
N * for the event to occur.  This is specified in kernel ticks,the constant
N * portTICK_PERIOD_MS can be used to convert kernel ticks into a real time
N * period.
N */
Nvoid vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait ) PRIVILEGED_FUNCTION;
Xvoid vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait ) ;
Nvoid vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait ) PRIVILEGED_FUNCTION;
Xvoid vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait ) ;
N
N/*
N * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN
N * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.
N *
N * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.
N *
N * This function performs nearly the same function as vTaskPlaceOnEventList().
N * The difference being that this function does not permit tasks to block
N * indefinitely, whereas vTaskPlaceOnEventList() does.
N *
N */
Nvoid vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely ) PRIVILEGED_FUNCTION;
Xvoid vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely ) ;
N
N/*
N * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS AN
N * INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.
N *
N * THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED.
N *
N * Removes a task from both the specified event list and the list of blocked
N * tasks, and places it on a ready queue.
N *
N * xTaskRemoveFromEventList()/xTaskRemoveFromUnorderedEventList() will be called
N * if either an event occurs to unblock a task, or the block timeout period
N * expires.
N *
N * xTaskRemoveFromEventList() is used when the event list is in task priority
N * order.  It removes the list item from the head of the event list as that will
N * have the highest priority owning task of all the tasks on the event list.
N * xTaskRemoveFromUnorderedEventList() is used when the event list is not
N * ordered and the event list items hold something other than the owning tasks
N * priority.  In this case the event list item value is updated to the value
N * passed in the xItemValue parameter.
N *
N * @return pdTRUE if the task being removed has a higher priority than the task
N * making the call, otherwise pdFALSE.
N */
NBaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList ) PRIVILEGED_FUNCTION;
XBaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList ) ;
NBaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue ) PRIVILEGED_FUNCTION;
XBaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue ) ;
N
N/*
N * THIS FUNCTION MUST NOT BE USED FROM APPLICATION CODE.  IT IS ONLY
N * INTENDED FOR USE WHEN IMPLEMENTING A PORT OF THE SCHEDULER AND IS
N * AN INTERFACE WHICH IS FOR THE EXCLUSIVE USE OF THE SCHEDULER.
N *
N * Sets the pointer to the current TCB to the TCB of the highest priority task
N * that is ready to run.
N */
Nvoid vTaskSwitchContext( void ) PRIVILEGED_FUNCTION;
Xvoid vTaskSwitchContext( void ) ;
N
N/*
N * THESE FUNCTIONS MUST NOT BE USED FROM APPLICATION CODE.  THEY ARE USED BY
N * THE EVENT BITS MODULE.
N */
NTickType_t uxTaskResetEventItemValue( void ) PRIVILEGED_FUNCTION;
XTickType_t uxTaskResetEventItemValue( void ) ;
N
N/*
N * Return the handle of the calling task.
N */
NTaskHandle_t xTaskGetCurrentTaskHandle( void ) PRIVILEGED_FUNCTION;
XTaskHandle_t xTaskGetCurrentTaskHandle( void ) ;
N
N/*
N * Capture the current time status for future reference.
N */
Nvoid vTaskSetTimeOutState( TimeOut_t * const pxTimeOut ) PRIVILEGED_FUNCTION;
Xvoid vTaskSetTimeOutState( TimeOut_t * const pxTimeOut ) ;
N
N/*
N * Compare the time status now with that previously captured to see if the
N * timeout has expired.
N */
NBaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait ) PRIVILEGED_FUNCTION;
XBaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait ) ;
N
N/*
N * Shortcut used by the queue implementation to prevent unnecessary call to
N * taskYIELD();
N */
Nvoid vTaskMissedYield( void ) PRIVILEGED_FUNCTION;
Xvoid vTaskMissedYield( void ) ;
N
N/*
N * Returns the scheduler state as taskSCHEDULER_RUNNING,
N * taskSCHEDULER_NOT_STARTED or taskSCHEDULER_SUSPENDED.
N */
NBaseType_t xTaskGetSchedulerState( void ) PRIVILEGED_FUNCTION;
XBaseType_t xTaskGetSchedulerState( void ) ;
N
N/*
N * Raises the priority of the mutex holder to that of the calling task should
N * the mutex holder have a priority less than the calling task.
N */
Nvoid vTaskPriorityInherit( TaskHandle_t const pxMutexHolder ) PRIVILEGED_FUNCTION;
Xvoid vTaskPriorityInherit( TaskHandle_t const pxMutexHolder ) ;
N
N/*
N * Set the priority of a task back to its proper priority in the case that it
N * inherited a higher priority while it was holding a semaphore.
N */
NBaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder ) PRIVILEGED_FUNCTION;
XBaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder ) ;
N
N/*
N * Generic version of the task creation function which is in turn called by the
N * xTaskCreate() and xTaskCreateRestricted() macros.
N */
NBaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
XBaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) ;  
N
N/*
N * Get the uxTCBNumber assigned to the task referenced by the xTask parameter.
N */
NUBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
XUBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask ) ;
N
N/*
N * Set the uxTaskNumber of the task referenced by the xTask parameter to
N * uxHandle.
N */
Nvoid vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle ) PRIVILEGED_FUNCTION;
Xvoid vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle ) ;
N
N/*
N * Only available when configUSE_TICKLESS_IDLE is set to 1.
N * If tickless mode is being used, or a low power mode is implemented, then
N * the tick interrupt will not execute during idle periods.  When this is the
N * case, the tick count value maintained by the scheduler needs to be kept up
N * to date with the actual execution time by being skipped forward by a time
N * equal to the idle period.
N */
Nvoid vTaskStepTick( const TickType_t xTicksToJump ) PRIVILEGED_FUNCTION;
Xvoid vTaskStepTick( const TickType_t xTicksToJump ) ;
N
N/*
N * Only avilable when configUSE_TICKLESS_IDLE is set to 1.
N * Provided for use within portSUPPRESS_TICKS_AND_SLEEP() to allow the port
N * specific sleep function to determine if it is ok to proceed with the sleep,
N * and if it is ok to proceed, if it is ok to sleep indefinitely.
N *
N * This function is necessary because portSUPPRESS_TICKS_AND_SLEEP() is only
N * called with the scheduler suspended, not from within a critical section.  It
N * is therefore possible for an interrupt to request a context switch between
N * portSUPPRESS_TICKS_AND_SLEEP() and the low power mode actually being
N * entered.  eTaskConfirmSleepModeStatus() should be called from a short
N * critical section between the timer being stopped and the sleep mode being
N * entered to ensure it is ok to proceed into the sleep mode.
N */
NeSleepModeStatus eTaskConfirmSleepModeStatus( void ) PRIVILEGED_FUNCTION;
XeSleepModeStatus eTaskConfirmSleepModeStatus( void ) ;
N
N/*
N * For internal use only.  Increment the mutex held count when a mutex is
N * taken and return the handle of the task that has taken the mutex.
N */
Nvoid *pvTaskIncrementMutexHeldCount( void ) PRIVILEGED_FUNCTION;
Xvoid *pvTaskIncrementMutexHeldCount( void ) ;
N
N#ifdef __cplusplus
S}
N#endif
N#endif /* INC_TASK_H */
N
N
N
L 82 "..\..\FreeRTOS\tasks.c" 2
N#include "timers.h"
L 1 "..\..\FreeRTOS\include\timers.h" 1
N/*
N    FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
N    All rights reserved
N
N    VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
N
N    ***************************************************************************
N    >>!   NOTE: The modification to the GPL is included to allow you to     !<<
N    >>!   distribute a combined work that includes FreeRTOS without being   !<<
N    >>!   obliged to provide the source code for proprietary components     !<<
N    >>!   outside of the FreeRTOS kernel.                                   !<<
N    ***************************************************************************
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  Full license text is available on the following
N    link: http://www.freertos.org/a00114.html
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS provides completely free yet professionally developed,    *
N     *    robust, strictly quality controlled, supported, and cross          *
N     *    platform software that is more than just the market leader, it     *
N     *    is the industry's de facto standard.                               *
N     *                                                                       *
N     *    Help yourself get started quickly while simultaneously helping     *
N     *    to support the FreeRTOS project by purchasing a FreeRTOS           *
N     *    tutorial book, reference manual, or both:                          *
N     *    http://www.FreeRTOS.org/Documentation                              *
N     *                                                                       *
N    ***************************************************************************
N
N    http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
N    the FAQ page "My application does not run, what could be wrong?".  Have you
N    defined configASSERT()?
N
N    http://www.FreeRTOS.org/support - In return for receiving this top quality
N    embedded software for free we request you assist our global community by
N    participating in the support forum.
N
N    http://www.FreeRTOS.org/training - Investing in training allows your team to
N    be as productive as possible as early as possible.  Now you can receive
N    FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
N    Ltd, and the world's leading authority on the world's leading RTOS.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, a DOS
N    compatible FAT file system, and our tiny thread aware UDP/IP stack.
N
N    http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
N    Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
N    Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
N    licenses offer ticketed support, indemnification and commercial middleware.
N
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety
N    engineered and independently SIL3 certified version for use in safety and
N    mission critical applications that require provable dependability.
N
N    1 tab == 4 spaces!
N*/
N
N
N#ifndef TIMERS_H
N#define TIMERS_H
N
N#ifndef INC_FREERTOS_H
S	#error "include FreeRTOS.h must appear in source files before include timers.h"
N#endif
N
N/*lint -e537 This headers are only multiply included if the application code
Nhappens to also be including task.h. */
N#include "task.h"
N/*lint +e537 */
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/*-----------------------------------------------------------
N * MACROS AND DEFINITIONS
N *----------------------------------------------------------*/
N
N/* IDs for commands that can be sent/received on the timer queue.  These are to
Nbe used solely through the macros that make up the public software timer API,
Nas defined below.  The commands that are sent from interrupts must use the
Nhighest numbers as tmrFIRST_FROM_ISR_COMMAND is used to determine if the task
Nor interrupt version of the queue send function should be used. */
N#define tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR 	( ( BaseType_t ) -2 )
N#define tmrCOMMAND_EXECUTE_CALLBACK				( ( BaseType_t ) -1 )
N#define tmrCOMMAND_START_DONT_TRACE				( ( BaseType_t ) 0 )
N#define tmrCOMMAND_START					    ( ( BaseType_t ) 1 )
N#define tmrCOMMAND_RESET						( ( BaseType_t ) 2 )
N#define tmrCOMMAND_STOP							( ( BaseType_t ) 3 )
N#define tmrCOMMAND_CHANGE_PERIOD				( ( BaseType_t ) 4 )
N#define tmrCOMMAND_DELETE						( ( BaseType_t ) 5 )
N
N#define tmrFIRST_FROM_ISR_COMMAND				( ( BaseType_t ) 6 )
N#define tmrCOMMAND_START_FROM_ISR				( ( BaseType_t ) 6 )
N#define tmrCOMMAND_RESET_FROM_ISR				( ( BaseType_t ) 7 )
N#define tmrCOMMAND_STOP_FROM_ISR				( ( BaseType_t ) 8 )
N#define tmrCOMMAND_CHANGE_PERIOD_FROM_ISR		( ( BaseType_t ) 9 )
N
N
N/**
N * Type by which software timers are referenced.  For example, a call to
N * xTimerCreate() returns an TimerHandle_t variable that can then be used to
N * reference the subject timer in calls to other software timer API functions
N * (for example, xTimerStart(), xTimerReset(), etc.).
N */
Ntypedef void * TimerHandle_t;
N
N/*
N * Defines the prototype to which timer callback functions must conform.
N */
Ntypedef void (*TimerCallbackFunction_t)( TimerHandle_t xTimer );
N
N/*
N * Defines the prototype to which functions used with the
N * xTimerPendFunctionCallFromISR() function must conform.
N */
Ntypedef void (*PendedFunction_t)( void *, uint32_t );
N
N/**
N * TimerHandle_t xTimerCreate( 	const char * const pcTimerName,
N * 								TickType_t xTimerPeriodInTicks,
N * 								UBaseType_t uxAutoReload,
N * 								void * pvTimerID,
N * 								TimerCallbackFunction_t pxCallbackFunction );
N *
N * Creates a new software timer instance.  This allocates the storage required
N * by the new timer, initialises the new timers internal state, and returns a
N * handle by which the new timer can be referenced.
N *
N * Timers are created in the dormant state.  The xTimerStart(), xTimerReset(),
N * xTimerStartFromISR(), xTimerResetFromISR(), xTimerChangePeriod() and
N * xTimerChangePeriodFromISR() API functions can all be used to transition a
N * timer into the active state.
N *
N * @param pcTimerName A text name that is assigned to the timer.  This is done
N * purely to assist debugging.  The kernel itself only ever references a timer
N * by its handle, and never by its name.
N *
N * @param xTimerPeriodInTicks The timer period.  The time is defined in tick
N * periods so the constant portTICK_PERIOD_MS can be used to convert a time that
N * has been specified in milliseconds.  For example, if the timer must expire
N * after 100 ticks, then xTimerPeriodInTicks should be set to 100.
N * Alternatively, if the timer must expire after 500ms, then xPeriod can be set
N * to ( 500 / portTICK_PERIOD_MS ) provided configTICK_RATE_HZ is less than or
N * equal to 1000.
N *
N * @param uxAutoReload If uxAutoReload is set to pdTRUE then the timer will
N * expire repeatedly with a frequency set by the xTimerPeriodInTicks parameter.
N * If uxAutoReload is set to pdFALSE then the timer will be a one-shot timer and
N * enter the dormant state after it expires.
N *
N * @param pvTimerID An identifier that is assigned to the timer being created.
N * Typically this would be used in the timer callback function to identify which
N * timer expired when the same callback function is assigned to more than one
N * timer.
N *
N * @param pxCallbackFunction The function to call when the timer expires.
N * Callback functions must have the prototype defined by TimerCallbackFunction_t,
N * which is	"void vCallbackFunction( TimerHandle_t xTimer );".
N *
N * @return If the timer is successfully created then a handle to the newly
N * created timer is returned.  If the timer cannot be created (because either
N * there is insufficient FreeRTOS heap remaining to allocate the timer
N * structures, or the timer period was set to 0) then NULL is returned.
N *
N * Example usage:
N * @verbatim
N * #define NUM_TIMERS 5
N *
N * // An array to hold handles to the created timers.
N * TimerHandle_t xTimers[ NUM_TIMERS ];
N *
N * // An array to hold a count of the number of times each timer expires.
N * int32_t lExpireCounters[ NUM_TIMERS ] = { 0 };
N *
N * // Define a callback function that will be used by multiple timer instances.
N * // The callback function does nothing but count the number of times the
N * // associated timer expires, and stop the timer once the timer has expired
N * // 10 times.
N * void vTimerCallback( TimerHandle_t pxTimer )
N * {
N * int32_t lArrayIndex;
N * const int32_t xMaxExpiryCountBeforeStopping = 10;
N *
N * 	   // Optionally do something if the pxTimer parameter is NULL.
N * 	   configASSERT( pxTimer );
N *
N *     // Which timer expired?
N *     lArrayIndex = ( int32_t ) pvTimerGetTimerID( pxTimer );
N *
N *     // Increment the number of times that pxTimer has expired.
N *     lExpireCounters[ lArrayIndex ] += 1;
N *
N *     // If the timer has expired 10 times then stop it from running.
N *     if( lExpireCounters[ lArrayIndex ] == xMaxExpiryCountBeforeStopping )
N *     {
N *         // Do not use a block time if calling a timer API function from a
N *         // timer callback function, as doing so could cause a deadlock!
N *         xTimerStop( pxTimer, 0 );
N *     }
N * }
N *
N * void main( void )
N * {
N * int32_t x;
N *
N *     // Create then start some timers.  Starting the timers before the scheduler
N *     // has been started means the timers will start running immediately that
N *     // the scheduler starts.
N *     for( x = 0; x < NUM_TIMERS; x++ )
N *     {
N *         xTimers[ x ] = xTimerCreate(    "Timer",       // Just a text name, not used by the kernel.
N *                                         ( 100 * x ),   // The timer period in ticks.
N *                                         pdTRUE,        // The timers will auto-reload themselves when they expire.
N *                                         ( void * ) x,  // Assign each timer a unique id equal to its array index.
N *                                         vTimerCallback // Each timer calls the same callback when it expires.
N *                                     );
N *
N *         if( xTimers[ x ] == NULL )
N *         {
N *             // The timer was not created.
N *         }
N *         else
N *         {
N *             // Start the timer.  No block time is specified, and even if one was
N *             // it would be ignored because the scheduler has not yet been
N *             // started.
N *             if( xTimerStart( xTimers[ x ], 0 ) != pdPASS )
N *             {
N *                 // The timer could not be set into the Active state.
N *             }
N *         }
N *     }
N *
N *     // ...
N *     // Create tasks here.
N *     // ...
N *
N *     // Starting the scheduler will start the timers running as they have already
N *     // been set into the active state.
N *     xTaskStartScheduler();
N *
N *     // Should not reach here.
N *     for( ;; );
N * }
N * @endverbatim
N */
NTimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
XTimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) ;  
N
N/**
N * void *pvTimerGetTimerID( TimerHandle_t xTimer );
N *
N * Returns the ID assigned to the timer.
N *
N * IDs are assigned to timers using the pvTimerID parameter of the call to
N * xTimerCreated() that was used to create the timer, and by calling the
N * vTimerSetTimerID() API function.
N *
N * If the same callback function is assigned to multiple timers then the timer
N * ID can be used as time specific (timer local) storage.
N *
N * @param xTimer The timer being queried.
N *
N * @return The ID assigned to the timer being queried.
N *
N * Example usage:
N *
N * See the xTimerCreate() API function example usage scenario.
N */
Nvoid *pvTimerGetTimerID( const TimerHandle_t xTimer ) PRIVILEGED_FUNCTION;
Xvoid *pvTimerGetTimerID( const TimerHandle_t xTimer ) ;
N
N/**
N * void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID );
N *
N * Sets the ID assigned to the timer.
N *
N * IDs are assigned to timers using the pvTimerID parameter of the call to
N * xTimerCreated() that was used to create the timer.
N *
N * If the same callback function is assigned to multiple timers then the timer
N * ID can be used as time specific (timer local) storage.
N *
N * @param xTimer The timer being updated.
N *
N * @param pvNewID The ID to assign to the timer.
N *
N * Example usage:
N *
N * See the xTimerCreate() API function example usage scenario.
N */
Nvoid vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID ) PRIVILEGED_FUNCTION;
Xvoid vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID ) ;
N
N/**
N * BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer );
N *
N * Queries a timer to see if it is active or dormant.
N *
N * A timer will be dormant if:
N *     1) It has been created but not started, or
N *     2) It is an expired one-shot timer that has not been restarted.
N *
N * Timers are created in the dormant state.  The xTimerStart(), xTimerReset(),
N * xTimerStartFromISR(), xTimerResetFromISR(), xTimerChangePeriod() and
N * xTimerChangePeriodFromISR() API functions can all be used to transition a timer into the
N * active state.
N *
N * @param xTimer The timer being queried.
N *
N * @return pdFALSE will be returned if the timer is dormant.  A value other than
N * pdFALSE will be returned if the timer is active.
N *
N * Example usage:
N * @verbatim
N * // This function assumes xTimer has already been created.
N * void vAFunction( TimerHandle_t xTimer )
N * {
N *     if( xTimerIsTimerActive( xTimer ) != pdFALSE ) // or more simply and equivalently "if( xTimerIsTimerActive( xTimer ) )"
N *     {
N *         // xTimer is active, do something.
N *     }
N *     else
N *     {
N *         // xTimer is not active, do something else.
N *     }
N * }
N * @endverbatim
N */
NBaseType_t xTimerIsTimerActive( TimerHandle_t xTimer ) PRIVILEGED_FUNCTION;
XBaseType_t xTimerIsTimerActive( TimerHandle_t xTimer ) ;
N
N/**
N * TaskHandle_t xTimerGetTimerDaemonTaskHandle( void );
N *
N * xTimerGetTimerDaemonTaskHandle() is only available if
N * INCLUDE_xTimerGetTimerDaemonTaskHandle is set to 1 in FreeRTOSConfig.h.
N *
N * Simply returns the handle of the timer service/daemon task.  It it not valid
N * to call xTimerGetTimerDaemonTaskHandle() before the scheduler has been started.
N */
NTaskHandle_t xTimerGetTimerDaemonTaskHandle( void ) PRIVILEGED_FUNCTION;
XTaskHandle_t xTimerGetTimerDaemonTaskHandle( void ) ;
N
N/**
N * BaseType_t xTimerStart( TimerHandle_t xTimer, TickType_t xTicksToWait );
N *
N * Timer functionality is provided by a timer service/daemon task.  Many of the
N * public FreeRTOS timer API functions send commands to the timer service task
N * through a queue called the timer command queue.  The timer command queue is
N * private to the kernel itself and is not directly accessible to application
N * code.  The length of the timer command queue is set by the
N * configTIMER_QUEUE_LENGTH configuration constant.
N *
N * xTimerStart() starts a timer that was previously created using the
N * xTimerCreate() API function.  If the timer had already been started and was
N * already in the active state, then xTimerStart() has equivalent functionality
N * to the xTimerReset() API function.
N *
N * Starting a timer ensures the timer is in the active state.  If the timer
N * is not stopped, deleted, or reset in the mean time, the callback function
N * associated with the timer will get called 'n' ticks after xTimerStart() was
N * called, where 'n' is the timers defined period.
N *
N * It is valid to call xTimerStart() before the scheduler has been started, but
N * when this is done the timer will not actually start until the scheduler is
N * started, and the timers expiry time will be relative to when the scheduler is
N * started, not relative to when xTimerStart() was called.
N *
N * The configUSE_TIMERS configuration constant must be set to 1 for xTimerStart()
N * to be available.
N *
N * @param xTimer The handle of the timer being started/restarted.
N *
N * @param xTicksToWait Specifies the time, in ticks, that the calling task should
N * be held in the Blocked state to wait for the start command to be successfully
N * sent to the timer command queue, should the queue already be full when
N * xTimerStart() was called.  xTicksToWait is ignored if xTimerStart() is called
N * before the scheduler is started.
N *
N * @return pdFAIL will be returned if the start command could not be sent to
N * the timer command queue even after xTicksToWait ticks had passed.  pdPASS will
N * be returned if the command was successfully sent to the timer command queue.
N * When the command is actually processed will depend on the priority of the
N * timer service/daemon task relative to other tasks in the system, although the
N * timers expiry time is relative to when xTimerStart() is actually called.  The
N * timer service/daemon task priority is set by the configTIMER_TASK_PRIORITY
N * configuration constant.
N *
N * Example usage:
N *
N * See the xTimerCreate() API function example usage scenario.
N *
N */
N#define xTimerStart( xTimer, xTicksToWait ) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_START, ( xTaskGetTickCount() ), NULL, ( xTicksToWait ) )
N
N/**
N * BaseType_t xTimerStop( TimerHandle_t xTimer, TickType_t xTicksToWait );
N *
N * Timer functionality is provided by a timer service/daemon task.  Many of the
N * public FreeRTOS timer API functions send commands to the timer service task
N * through a queue called the timer command queue.  The timer command queue is
N * private to the kernel itself and is not directly accessible to application
N * code.  The length of the timer command queue is set by the
N * configTIMER_QUEUE_LENGTH configuration constant.
N *
N * xTimerStop() stops a timer that was previously started using either of the
N * The xTimerStart(), xTimerReset(), xTimerStartFromISR(), xTimerResetFromISR(),
N * xTimerChangePeriod() or xTimerChangePeriodFromISR() API functions.
N *
N * Stopping a timer ensures the timer is not in the active state.
N *
N * The configUSE_TIMERS configuration constant must be set to 1 for xTimerStop()
N * to be available.
N *
N * @param xTimer The handle of the timer being stopped.
N *
N * @param xTicksToWait Specifies the time, in ticks, that the calling task should
N * be held in the Blocked state to wait for the stop command to be successfully
N * sent to the timer command queue, should the queue already be full when
N * xTimerStop() was called.  xTicksToWait is ignored if xTimerStop() is called
N * before the scheduler is started.
N *
N * @return pdFAIL will be returned if the stop command could not be sent to
N * the timer command queue even after xTicksToWait ticks had passed.  pdPASS will
N * be returned if the command was successfully sent to the timer command queue.
N * When the command is actually processed will depend on the priority of the
N * timer service/daemon task relative to other tasks in the system.  The timer
N * service/daemon task priority is set by the configTIMER_TASK_PRIORITY
N * configuration constant.
N *
N * Example usage:
N *
N * See the xTimerCreate() API function example usage scenario.
N *
N */
N#define xTimerStop( xTimer, xTicksToWait ) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_STOP, 0U, NULL, ( xTicksToWait ) )
N
N/**
N * BaseType_t xTimerChangePeriod( 	TimerHandle_t xTimer,
N *										TickType_t xNewPeriod,
N *										TickType_t xTicksToWait );
N *
N * Timer functionality is provided by a timer service/daemon task.  Many of the
N * public FreeRTOS timer API functions send commands to the timer service task
N * through a queue called the timer command queue.  The timer command queue is
N * private to the kernel itself and is not directly accessible to application
N * code.  The length of the timer command queue is set by the
N * configTIMER_QUEUE_LENGTH configuration constant.
N *
N * xTimerChangePeriod() changes the period of a timer that was previously
N * created using the xTimerCreate() API function.
N *
N * xTimerChangePeriod() can be called to change the period of an active or
N * dormant state timer.
N *
N * The configUSE_TIMERS configuration constant must be set to 1 for
N * xTimerChangePeriod() to be available.
N *
N * @param xTimer The handle of the timer that is having its period changed.
N *
N * @param xNewPeriod The new period for xTimer. Timer periods are specified in
N * tick periods, so the constant portTICK_PERIOD_MS can be used to convert a time
N * that has been specified in milliseconds.  For example, if the timer must
N * expire after 100 ticks, then xNewPeriod should be set to 100.  Alternatively,
N * if the timer must expire after 500ms, then xNewPeriod can be set to
N * ( 500 / portTICK_PERIOD_MS ) provided configTICK_RATE_HZ is less than
N * or equal to 1000.
N *
N * @param xTicksToWait Specifies the time, in ticks, that the calling task should
N * be held in the Blocked state to wait for the change period command to be
N * successfully sent to the timer command queue, should the queue already be
N * full when xTimerChangePeriod() was called.  xTicksToWait is ignored if
N * xTimerChangePeriod() is called before the scheduler is started.
N *
N * @return pdFAIL will be returned if the change period command could not be
N * sent to the timer command queue even after xTicksToWait ticks had passed.
N * pdPASS will be returned if the command was successfully sent to the timer
N * command queue.  When the command is actually processed will depend on the
N * priority of the timer service/daemon task relative to other tasks in the
N * system.  The timer service/daemon task priority is set by the
N * configTIMER_TASK_PRIORITY configuration constant.
N *
N * Example usage:
N * @verbatim
N * // This function assumes xTimer has already been created.  If the timer
N * // referenced by xTimer is already active when it is called, then the timer
N * // is deleted.  If the timer referenced by xTimer is not active when it is
N * // called, then the period of the timer is set to 500ms and the timer is
N * // started.
N * void vAFunction( TimerHandle_t xTimer )
N * {
N *     if( xTimerIsTimerActive( xTimer ) != pdFALSE ) // or more simply and equivalently "if( xTimerIsTimerActive( xTimer ) )"
N *     {
N *         // xTimer is already active - delete it.
N *         xTimerDelete( xTimer );
N *     }
N *     else
N *     {
N *         // xTimer is not active, change its period to 500ms.  This will also
N *         // cause the timer to start.  Block for a maximum of 100 ticks if the
N *         // change period command cannot immediately be sent to the timer
N *         // command queue.
N *         if( xTimerChangePeriod( xTimer, 500 / portTICK_PERIOD_MS, 100 ) == pdPASS )
N *         {
N *             // The command was successfully sent.
N *         }
N *         else
N *         {
N *             // The command could not be sent, even after waiting for 100 ticks
N *             // to pass.  Take appropriate action here.
N *         }
N *     }
N * }
N * @endverbatim
N */
N #define xTimerChangePeriod( xTimer, xNewPeriod, xTicksToWait ) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_CHANGE_PERIOD, ( xNewPeriod ), NULL, ( xTicksToWait ) )
N
N/**
N * BaseType_t xTimerDelete( TimerHandle_t xTimer, TickType_t xTicksToWait );
N *
N * Timer functionality is provided by a timer service/daemon task.  Many of the
N * public FreeRTOS timer API functions send commands to the timer service task
N * through a queue called the timer command queue.  The timer command queue is
N * private to the kernel itself and is not directly accessible to application
N * code.  The length of the timer command queue is set by the
N * configTIMER_QUEUE_LENGTH configuration constant.
N *
N * xTimerDelete() deletes a timer that was previously created using the
N * xTimerCreate() API function.
N *
N * The configUSE_TIMERS configuration constant must be set to 1 for
N * xTimerDelete() to be available.
N *
N * @param xTimer The handle of the timer being deleted.
N *
N * @param xTicksToWait Specifies the time, in ticks, that the calling task should
N * be held in the Blocked state to wait for the delete command to be
N * successfully sent to the timer command queue, should the queue already be
N * full when xTimerDelete() was called.  xTicksToWait is ignored if xTimerDelete()
N * is called before the scheduler is started.
N *
N * @return pdFAIL will be returned if the delete command could not be sent to
N * the timer command queue even after xTicksToWait ticks had passed.  pdPASS will
N * be returned if the command was successfully sent to the timer command queue.
N * When the command is actually processed will depend on the priority of the
N * timer service/daemon task relative to other tasks in the system.  The timer
N * service/daemon task priority is set by the configTIMER_TASK_PRIORITY
N * configuration constant.
N *
N * Example usage:
N *
N * See the xTimerChangePeriod() API function example usage scenario.
N */
N#define xTimerDelete( xTimer, xTicksToWait ) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_DELETE, 0U, NULL, ( xTicksToWait ) )
N
N/**
N * BaseType_t xTimerReset( TimerHandle_t xTimer, TickType_t xTicksToWait );
N *
N * Timer functionality is provided by a timer service/daemon task.  Many of the
N * public FreeRTOS timer API functions send commands to the timer service task
N * through a queue called the timer command queue.  The timer command queue is
N * private to the kernel itself and is not directly accessible to application
N * code.  The length of the timer command queue is set by the
N * configTIMER_QUEUE_LENGTH configuration constant.
N *
N * xTimerReset() re-starts a timer that was previously created using the
N * xTimerCreate() API function.  If the timer had already been started and was
N * already in the active state, then xTimerReset() will cause the timer to
N * re-evaluate its expiry time so that it is relative to when xTimerReset() was
N * called.  If the timer was in the dormant state then xTimerReset() has
N * equivalent functionality to the xTimerStart() API function.
N *
N * Resetting a timer ensures the timer is in the active state.  If the timer
N * is not stopped, deleted, or reset in the mean time, the callback function
N * associated with the timer will get called 'n' ticks after xTimerReset() was
N * called, where 'n' is the timers defined period.
N *
N * It is valid to call xTimerReset() before the scheduler has been started, but
N * when this is done the timer will not actually start until the scheduler is
N * started, and the timers expiry time will be relative to when the scheduler is
N * started, not relative to when xTimerReset() was called.
N *
N * The configUSE_TIMERS configuration constant must be set to 1 for xTimerReset()
N * to be available.
N *
N * @param xTimer The handle of the timer being reset/started/restarted.
N *
N * @param xTicksToWait Specifies the time, in ticks, that the calling task should
N * be held in the Blocked state to wait for the reset command to be successfully
N * sent to the timer command queue, should the queue already be full when
N * xTimerReset() was called.  xTicksToWait is ignored if xTimerReset() is called
N * before the scheduler is started.
N *
N * @return pdFAIL will be returned if the reset command could not be sent to
N * the timer command queue even after xTicksToWait ticks had passed.  pdPASS will
N * be returned if the command was successfully sent to the timer command queue.
N * When the command is actually processed will depend on the priority of the
N * timer service/daemon task relative to other tasks in the system, although the
N * timers expiry time is relative to when xTimerStart() is actually called.  The
N * timer service/daemon task priority is set by the configTIMER_TASK_PRIORITY
N * configuration constant.
N *
N * Example usage:
N * @verbatim
N * // When a key is pressed, an LCD back-light is switched on.  If 5 seconds pass
N * // without a key being pressed, then the LCD back-light is switched off.  In
N * // this case, the timer is a one-shot timer.
N *
N * TimerHandle_t xBacklightTimer = NULL;
N *
N * // The callback function assigned to the one-shot timer.  In this case the
N * // parameter is not used.
N * void vBacklightTimerCallback( TimerHandle_t pxTimer )
N * {
N *     // The timer expired, therefore 5 seconds must have passed since a key
N *     // was pressed.  Switch off the LCD back-light.
N *     vSetBacklightState( BACKLIGHT_OFF );
N * }
N *
N * // The key press event handler.
N * void vKeyPressEventHandler( char cKey )
N * {
N *     // Ensure the LCD back-light is on, then reset the timer that is
N *     // responsible for turning the back-light off after 5 seconds of
N *     // key inactivity.  Wait 10 ticks for the command to be successfully sent
N *     // if it cannot be sent immediately.
N *     vSetBacklightState( BACKLIGHT_ON );
N *     if( xTimerReset( xBacklightTimer, 100 ) != pdPASS )
N *     {
N *         // The reset command was not executed successfully.  Take appropriate
N *         // action here.
N *     }
N *
N *     // Perform the rest of the key processing here.
N * }
N *
N * void main( void )
N * {
N * int32_t x;
N *
N *     // Create then start the one-shot timer that is responsible for turning
N *     // the back-light off if no keys are pressed within a 5 second period.
N *     xBacklightTimer = xTimerCreate( "BacklightTimer",           // Just a text name, not used by the kernel.
N *                                     ( 5000 / portTICK_PERIOD_MS), // The timer period in ticks.
N *                                     pdFALSE,                    // The timer is a one-shot timer.
N *                                     0,                          // The id is not used by the callback so can take any value.
N *                                     vBacklightTimerCallback     // The callback function that switches the LCD back-light off.
N *                                   );
N *
N *     if( xBacklightTimer == NULL )
N *     {
N *         // The timer was not created.
N *     }
N *     else
N *     {
N *         // Start the timer.  No block time is specified, and even if one was
N *         // it would be ignored because the scheduler has not yet been
N *         // started.
N *         if( xTimerStart( xBacklightTimer, 0 ) != pdPASS )
N *         {
N *             // The timer could not be set into the Active state.
N *         }
N *     }
N *
N *     // ...
N *     // Create tasks here.
N *     // ...
N *
N *     // Starting the scheduler will start the timer running as it has already
N *     // been set into the active state.
N *     xTaskStartScheduler();
N *
N *     // Should not reach here.
N *     for( ;; );
N * }
N * @endverbatim
N */
N#define xTimerReset( xTimer, xTicksToWait ) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_RESET, ( xTaskGetTickCount() ), NULL, ( xTicksToWait ) )
N
N/**
N * BaseType_t xTimerStartFromISR( 	TimerHandle_t xTimer,
N *									BaseType_t *pxHigherPriorityTaskWoken );
N *
N * A version of xTimerStart() that can be called from an interrupt service
N * routine.
N *
N * @param xTimer The handle of the timer being started/restarted.
N *
N * @param pxHigherPriorityTaskWoken The timer service/daemon task spends most
N * of its time in the Blocked state, waiting for messages to arrive on the timer
N * command queue.  Calling xTimerStartFromISR() writes a message to the timer
N * command queue, so has the potential to transition the timer service/daemon
N * task out of the Blocked state.  If calling xTimerStartFromISR() causes the
N * timer service/daemon task to leave the Blocked state, and the timer service/
N * daemon task has a priority equal to or greater than the currently executing
N * task (the task that was interrupted), then *pxHigherPriorityTaskWoken will
N * get set to pdTRUE internally within the xTimerStartFromISR() function.  If
N * xTimerStartFromISR() sets this value to pdTRUE then a context switch should
N * be performed before the interrupt exits.
N *
N * @return pdFAIL will be returned if the start command could not be sent to
N * the timer command queue.  pdPASS will be returned if the command was
N * successfully sent to the timer command queue.  When the command is actually
N * processed will depend on the priority of the timer service/daemon task
N * relative to other tasks in the system, although the timers expiry time is
N * relative to when xTimerStartFromISR() is actually called.  The timer
N * service/daemon task priority is set by the configTIMER_TASK_PRIORITY
N * configuration constant.
N *
N * Example usage:
N * @verbatim
N * // This scenario assumes xBacklightTimer has already been created.  When a
N * // key is pressed, an LCD back-light is switched on.  If 5 seconds pass
N * // without a key being pressed, then the LCD back-light is switched off.  In
N * // this case, the timer is a one-shot timer, and unlike the example given for
N * // the xTimerReset() function, the key press event handler is an interrupt
N * // service routine.
N *
N * // The callback function assigned to the one-shot timer.  In this case the
N * // parameter is not used.
N * void vBacklightTimerCallback( TimerHandle_t pxTimer )
N * {
N *     // The timer expired, therefore 5 seconds must have passed since a key
N *     // was pressed.  Switch off the LCD back-light.
N *     vSetBacklightState( BACKLIGHT_OFF );
N * }
N *
N * // The key press interrupt service routine.
N * void vKeyPressEventInterruptHandler( void )
N * {
N * BaseType_t xHigherPriorityTaskWoken = pdFALSE;
N *
N *     // Ensure the LCD back-light is on, then restart the timer that is
N *     // responsible for turning the back-light off after 5 seconds of
N *     // key inactivity.  This is an interrupt service routine so can only
N *     // call FreeRTOS API functions that end in "FromISR".
N *     vSetBacklightState( BACKLIGHT_ON );
N *
N *     // xTimerStartFromISR() or xTimerResetFromISR() could be called here
N *     // as both cause the timer to re-calculate its expiry time.
N *     // xHigherPriorityTaskWoken was initialised to pdFALSE when it was
N *     // declared (in this function).
N *     if( xTimerStartFromISR( xBacklightTimer, &xHigherPriorityTaskWoken ) != pdPASS )
N *     {
N *         // The start command was not executed successfully.  Take appropriate
N *         // action here.
N *     }
N *
N *     // Perform the rest of the key processing here.
N *
N *     // If xHigherPriorityTaskWoken equals pdTRUE, then a context switch
N *     // should be performed.  The syntax required to perform a context switch
N *     // from inside an ISR varies from port to port, and from compiler to
N *     // compiler.  Inspect the demos for the port you are using to find the
N *     // actual syntax required.
N *     if( xHigherPriorityTaskWoken != pdFALSE )
N *     {
N *         // Call the interrupt safe yield function here (actual function
N *         // depends on the FreeRTOS port being used).
N *     }
N * }
N * @endverbatim
N */
N#define xTimerStartFromISR( xTimer, pxHigherPriorityTaskWoken ) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_START_FROM_ISR, ( xTaskGetTickCountFromISR() ), ( pxHigherPriorityTaskWoken ), 0U )
N
N/**
N * BaseType_t xTimerStopFromISR( 	TimerHandle_t xTimer,
N *									BaseType_t *pxHigherPriorityTaskWoken );
N *
N * A version of xTimerStop() that can be called from an interrupt service
N * routine.
N *
N * @param xTimer The handle of the timer being stopped.
N *
N * @param pxHigherPriorityTaskWoken The timer service/daemon task spends most
N * of its time in the Blocked state, waiting for messages to arrive on the timer
N * command queue.  Calling xTimerStopFromISR() writes a message to the timer
N * command queue, so has the potential to transition the timer service/daemon
N * task out of the Blocked state.  If calling xTimerStopFromISR() causes the
N * timer service/daemon task to leave the Blocked state, and the timer service/
N * daemon task has a priority equal to or greater than the currently executing
N * task (the task that was interrupted), then *pxHigherPriorityTaskWoken will
N * get set to pdTRUE internally within the xTimerStopFromISR() function.  If
N * xTimerStopFromISR() sets this value to pdTRUE then a context switch should
N * be performed before the interrupt exits.
N *
N * @return pdFAIL will be returned if the stop command could not be sent to
N * the timer command queue.  pdPASS will be returned if the command was
N * successfully sent to the timer command queue.  When the command is actually
N * processed will depend on the priority of the timer service/daemon task
N * relative to other tasks in the system.  The timer service/daemon task
N * priority is set by the configTIMER_TASK_PRIORITY configuration constant.
N *
N * Example usage:
N * @verbatim
N * // This scenario assumes xTimer has already been created and started.  When
N * // an interrupt occurs, the timer should be simply stopped.
N *
N * // The interrupt service routine that stops the timer.
N * void vAnExampleInterruptServiceRoutine( void )
N * {
N * BaseType_t xHigherPriorityTaskWoken = pdFALSE;
N *
N *     // The interrupt has occurred - simply stop the timer.
N *     // xHigherPriorityTaskWoken was set to pdFALSE where it was defined
N *     // (within this function).  As this is an interrupt service routine, only
N *     // FreeRTOS API functions that end in "FromISR" can be used.
N *     if( xTimerStopFromISR( xTimer, &xHigherPriorityTaskWoken ) != pdPASS )
N *     {
N *         // The stop command was not executed successfully.  Take appropriate
N *         // action here.
N *     }
N *
N *     // If xHigherPriorityTaskWoken equals pdTRUE, then a context switch
N *     // should be performed.  The syntax required to perform a context switch
N *     // from inside an ISR varies from port to port, and from compiler to
N *     // compiler.  Inspect the demos for the port you are using to find the
N *     // actual syntax required.
N *     if( xHigherPriorityTaskWoken != pdFALSE )
N *     {
N *         // Call the interrupt safe yield function here (actual function
N *         // depends on the FreeRTOS port being used).
N *     }
N * }
N * @endverbatim
N */
N#define xTimerStopFromISR( xTimer, pxHigherPriorityTaskWoken ) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_STOP_FROM_ISR, 0, ( pxHigherPriorityTaskWoken ), 0U )
N
N/**
N * BaseType_t xTimerChangePeriodFromISR( TimerHandle_t xTimer,
N *										 TickType_t xNewPeriod,
N *										 BaseType_t *pxHigherPriorityTaskWoken );
N *
N * A version of xTimerChangePeriod() that can be called from an interrupt
N * service routine.
N *
N * @param xTimer The handle of the timer that is having its period changed.
N *
N * @param xNewPeriod The new period for xTimer. Timer periods are specified in
N * tick periods, so the constant portTICK_PERIOD_MS can be used to convert a time
N * that has been specified in milliseconds.  For example, if the timer must
N * expire after 100 ticks, then xNewPeriod should be set to 100.  Alternatively,
N * if the timer must expire after 500ms, then xNewPeriod can be set to
N * ( 500 / portTICK_PERIOD_MS ) provided configTICK_RATE_HZ is less than
N * or equal to 1000.
N *
N * @param pxHigherPriorityTaskWoken The timer service/daemon task spends most
N * of its time in the Blocked state, waiting for messages to arrive on the timer
N * command queue.  Calling xTimerChangePeriodFromISR() writes a message to the
N * timer command queue, so has the potential to transition the timer service/
N * daemon task out of the Blocked state.  If calling xTimerChangePeriodFromISR()
N * causes the timer service/daemon task to leave the Blocked state, and the
N * timer service/daemon task has a priority equal to or greater than the
N * currently executing task (the task that was interrupted), then
N * *pxHigherPriorityTaskWoken will get set to pdTRUE internally within the
N * xTimerChangePeriodFromISR() function.  If xTimerChangePeriodFromISR() sets
N * this value to pdTRUE then a context switch should be performed before the
N * interrupt exits.
N *
N * @return pdFAIL will be returned if the command to change the timers period
N * could not be sent to the timer command queue.  pdPASS will be returned if the
N * command was successfully sent to the timer command queue.  When the command
N * is actually processed will depend on the priority of the timer service/daemon
N * task relative to other tasks in the system.  The timer service/daemon task
N * priority is set by the configTIMER_TASK_PRIORITY configuration constant.
N *
N * Example usage:
N * @verbatim
N * // This scenario assumes xTimer has already been created and started.  When
N * // an interrupt occurs, the period of xTimer should be changed to 500ms.
N *
N * // The interrupt service routine that changes the period of xTimer.
N * void vAnExampleInterruptServiceRoutine( void )
N * {
N * BaseType_t xHigherPriorityTaskWoken = pdFALSE;
N *
N *     // The interrupt has occurred - change the period of xTimer to 500ms.
N *     // xHigherPriorityTaskWoken was set to pdFALSE where it was defined
N *     // (within this function).  As this is an interrupt service routine, only
N *     // FreeRTOS API functions that end in "FromISR" can be used.
N *     if( xTimerChangePeriodFromISR( xTimer, &xHigherPriorityTaskWoken ) != pdPASS )
N *     {
N *         // The command to change the timers period was not executed
N *         // successfully.  Take appropriate action here.
N *     }
N *
N *     // If xHigherPriorityTaskWoken equals pdTRUE, then a context switch
N *     // should be performed.  The syntax required to perform a context switch
N *     // from inside an ISR varies from port to port, and from compiler to
N *     // compiler.  Inspect the demos for the port you are using to find the
N *     // actual syntax required.
N *     if( xHigherPriorityTaskWoken != pdFALSE )
N *     {
N *         // Call the interrupt safe yield function here (actual function
N *         // depends on the FreeRTOS port being used).
N *     }
N * }
N * @endverbatim
N */
N#define xTimerChangePeriodFromISR( xTimer, xNewPeriod, pxHigherPriorityTaskWoken ) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_CHANGE_PERIOD_FROM_ISR, ( xNewPeriod ), ( pxHigherPriorityTaskWoken ), 0U )
N
N/**
N * BaseType_t xTimerResetFromISR( 	TimerHandle_t xTimer,
N *									BaseType_t *pxHigherPriorityTaskWoken );
N *
N * A version of xTimerReset() that can be called from an interrupt service
N * routine.
N *
N * @param xTimer The handle of the timer that is to be started, reset, or
N * restarted.
N *
N * @param pxHigherPriorityTaskWoken The timer service/daemon task spends most
N * of its time in the Blocked state, waiting for messages to arrive on the timer
N * command queue.  Calling xTimerResetFromISR() writes a message to the timer
N * command queue, so has the potential to transition the timer service/daemon
N * task out of the Blocked state.  If calling xTimerResetFromISR() causes the
N * timer service/daemon task to leave the Blocked state, and the timer service/
N * daemon task has a priority equal to or greater than the currently executing
N * task (the task that was interrupted), then *pxHigherPriorityTaskWoken will
N * get set to pdTRUE internally within the xTimerResetFromISR() function.  If
N * xTimerResetFromISR() sets this value to pdTRUE then a context switch should
N * be performed before the interrupt exits.
N *
N * @return pdFAIL will be returned if the reset command could not be sent to
N * the timer command queue.  pdPASS will be returned if the command was
N * successfully sent to the timer command queue.  When the command is actually
N * processed will depend on the priority of the timer service/daemon task
N * relative to other tasks in the system, although the timers expiry time is
N * relative to when xTimerResetFromISR() is actually called.  The timer service/daemon
N * task priority is set by the configTIMER_TASK_PRIORITY configuration constant.
N *
N * Example usage:
N * @verbatim
N * // This scenario assumes xBacklightTimer has already been created.  When a
N * // key is pressed, an LCD back-light is switched on.  If 5 seconds pass
N * // without a key being pressed, then the LCD back-light is switched off.  In
N * // this case, the timer is a one-shot timer, and unlike the example given for
N * // the xTimerReset() function, the key press event handler is an interrupt
N * // service routine.
N *
N * // The callback function assigned to the one-shot timer.  In this case the
N * // parameter is not used.
N * void vBacklightTimerCallback( TimerHandle_t pxTimer )
N * {
N *     // The timer expired, therefore 5 seconds must have passed since a key
N *     // was pressed.  Switch off the LCD back-light.
N *     vSetBacklightState( BACKLIGHT_OFF );
N * }
N *
N * // The key press interrupt service routine.
N * void vKeyPressEventInterruptHandler( void )
N * {
N * BaseType_t xHigherPriorityTaskWoken = pdFALSE;
N *
N *     // Ensure the LCD back-light is on, then reset the timer that is
N *     // responsible for turning the back-light off after 5 seconds of
N *     // key inactivity.  This is an interrupt service routine so can only
N *     // call FreeRTOS API functions that end in "FromISR".
N *     vSetBacklightState( BACKLIGHT_ON );
N *
N *     // xTimerStartFromISR() or xTimerResetFromISR() could be called here
N *     // as both cause the timer to re-calculate its expiry time.
N *     // xHigherPriorityTaskWoken was initialised to pdFALSE when it was
N *     // declared (in this function).
N *     if( xTimerResetFromISR( xBacklightTimer, &xHigherPriorityTaskWoken ) != pdPASS )
N *     {
N *         // The reset command was not executed successfully.  Take appropriate
N *         // action here.
N *     }
N *
N *     // Perform the rest of the key processing here.
N *
N *     // If xHigherPriorityTaskWoken equals pdTRUE, then a context switch
N *     // should be performed.  The syntax required to perform a context switch
N *     // from inside an ISR varies from port to port, and from compiler to
N *     // compiler.  Inspect the demos for the port you are using to find the
N *     // actual syntax required.
N *     if( xHigherPriorityTaskWoken != pdFALSE )
N *     {
N *         // Call the interrupt safe yield function here (actual function
N *         // depends on the FreeRTOS port being used).
N *     }
N * }
N * @endverbatim
N */
N#define xTimerResetFromISR( xTimer, pxHigherPriorityTaskWoken ) xTimerGenericCommand( ( xTimer ), tmrCOMMAND_RESET_FROM_ISR, ( xTaskGetTickCountFromISR() ), ( pxHigherPriorityTaskWoken ), 0U )
N
N
N/**
N * BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend,
N *                                          void *pvParameter1,
N *                                          uint32_t ulParameter2,
N *                                          BaseType_t *pxHigherPriorityTaskWoken );
N *
N *
N * Used from application interrupt service routines to defer the execution of a
N * function to the RTOS daemon task (the timer service task, hence this function
N * is implemented in timers.c and is prefixed with 'Timer').
N *
N * Ideally an interrupt service routine (ISR) is kept as short as possible, but
N * sometimes an ISR either has a lot of processing to do, or needs to perform
N * processing that is not deterministic.  In these cases
N * xTimerPendFunctionCallFromISR() can be used to defer processing of a function
N * to the RTOS daemon task.
N *
N * A mechanism is provided that allows the interrupt to return directly to the
N * task that will subsequently execute the pended callback function.  This
N * allows the callback function to execute contiguously in time with the
N * interrupt - just as if the callback had executed in the interrupt itself.
N *
N * @param xFunctionToPend The function to execute from the timer service/
N * daemon task.  The function must conform to the PendedFunction_t
N * prototype.
N *
N * @param pvParameter1 The value of the callback function's first parameter.
N * The parameter has a void * type to allow it to be used to pass any type.
N * For example, unsigned longs can be cast to a void *, or the void * can be
N * used to point to a structure.
N *
N * @param ulParameter2 The value of the callback function's second parameter.
N *
N * @param pxHigherPriorityTaskWoken As mentioned above, calling this function
N * will result in a message being sent to the timer daemon task.  If the
N * priority of the timer daemon task (which is set using
N * configTIMER_TASK_PRIORITY in FreeRTOSConfig.h) is higher than the priority of
N * the currently running task (the task the interrupt interrupted) then
N * *pxHigherPriorityTaskWoken will be set to pdTRUE within
N * xTimerPendFunctionCallFromISR(), indicating that a context switch should be
N * requested before the interrupt exits.  For that reason
N * *pxHigherPriorityTaskWoken must be initialised to pdFALSE.  See the
N * example code below.
N *
N * @return pdPASS is returned if the message was successfully sent to the
N * timer daemon task, otherwise pdFALSE is returned.
N *
N * Example usage:
N * @verbatim
N *
N *	// The callback function that will execute in the context of the daemon task.
N *  // Note callback functions must all use this same prototype.
N *  void vProcessInterface( void *pvParameter1, uint32_t ulParameter2 )
N *	{
N *		BaseType_t xInterfaceToService;
N *
N *		// The interface that requires servicing is passed in the second
N *      // parameter.  The first parameter is not used in this case.
N *		xInterfaceToService = ( BaseType_t ) ulParameter2;
N *
N *		// ...Perform the processing here...
N *	}
N *
N *	// An ISR that receives data packets from multiple interfaces
N *  void vAnISR( void )
N *	{
N *		BaseType_t xInterfaceToService, xHigherPriorityTaskWoken;
N *
N *		// Query the hardware to determine which interface needs processing.
N *		xInterfaceToService = prvCheckInterfaces();
N *
N *      // The actual processing is to be deferred to a task.  Request the
N *      // vProcessInterface() callback function is executed, passing in the
N *		// number of the interface that needs processing.  The interface to
N *		// service is passed in the second parameter.  The first parameter is
N *		// not used in this case.
N *		xHigherPriorityTaskWoken = pdFALSE;
N *		xTimerPendFunctionCallFromISR( vProcessInterface, NULL, ( uint32_t ) xInterfaceToService, &xHigherPriorityTaskWoken );
N *
N *		// If xHigherPriorityTaskWoken is now set to pdTRUE then a context
N *		// switch should be requested.  The macro used is port specific and will
N *		// be either portYIELD_FROM_ISR() or portEND_SWITCHING_ISR() - refer to
N *		// the documentation page for the port being used.
N *		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
N *
N *	}
N * @endverbatim
N */
NBaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken ) PRIVILEGED_FUNCTION;
XBaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken ) ;
N
N /**
N  * BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend,
N  *                                    void *pvParameter1,
N  *                                    uint32_t ulParameter2,
N  *                                    TickType_t xTicksToWait );
N  *
N  *
N  * Used to defer the execution of a function to the RTOS daemon task (the timer
N  * service task, hence this function is implemented in timers.c and is prefixed
N  * with 'Timer').
N  *
N  * @param xFunctionToPend The function to execute from the timer service/
N  * daemon task.  The function must conform to the PendedFunction_t
N  * prototype.
N  *
N  * @param pvParameter1 The value of the callback function's first parameter.
N  * The parameter has a void * type to allow it to be used to pass any type.
N  * For example, unsigned longs can be cast to a void *, or the void * can be
N  * used to point to a structure.
N  *
N  * @param ulParameter2 The value of the callback function's second parameter.
N  *
N  * @param xTicksToWait Calling this function will result in a message being
N  * sent to the timer daemon task on a queue.  xTicksToWait is the amount of
N  * time the calling task should remain in the Blocked state (so not using any
N  * processing time) for space to become available on the timer queue if the
N  * queue is found to be full.
N  *
N  * @return pdPASS is returned if the message was successfully sent to the
N  * timer daemon task, otherwise pdFALSE is returned.
N  *
N  */
NBaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, TickType_t xTicksToWait ) PRIVILEGED_FUNCTION;
XBaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, TickType_t xTicksToWait ) ;
N
N/**
N * const char * const pcTimerGetTimerName( TimerHandle_t xTimer );
N *
N * Returns the name that was assigned to a timer when the timer was created.
N *
N * @param xTimer The handle of the timer being queried.
N *
N * @return The name assigned to the timer specified by the xTimer parameter.
N */
Nconst char * pcTimerGetTimerName( TimerHandle_t xTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
Xconst char * pcTimerGetTimerName( TimerHandle_t xTimer ) ;  
N
N/*
N * Functions beyond this part are not part of the public API and are intended
N * for use by the kernel only.
N */
NBaseType_t xTimerCreateTimerTask( void ) PRIVILEGED_FUNCTION;
XBaseType_t xTimerCreateTimerTask( void ) ;
NBaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait ) PRIVILEGED_FUNCTION;
XBaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait ) ;
N
N#ifdef __cplusplus
S}
N#endif
N#endif /* TIMERS_H */
N
N
N
L 83 "..\..\FreeRTOS\tasks.c" 2
N#include "StackMacros.h"
L 1 "..\..\FreeRTOS\include\StackMacros.h" 1
N/*
N    FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
N    All rights reserved
N
N    VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
N
N    This file is part of the FreeRTOS distribution.
N
N    FreeRTOS is free software; you can redistribute it and/or modify it under
N    the terms of the GNU General Public License (version 2) as published by the
N    Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
N
N    ***************************************************************************
N    >>!   NOTE: The modification to the GPL is included to allow you to     !<<
N    >>!   distribute a combined work that includes FreeRTOS without being   !<<
N    >>!   obliged to provide the source code for proprietary components     !<<
N    >>!   outside of the FreeRTOS kernel.                                   !<<
N    ***************************************************************************
N
N    FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
N    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
N    FOR A PARTICULAR PURPOSE.  Full license text is available on the following
N    link: http://www.freertos.org/a00114.html
N
N    ***************************************************************************
N     *                                                                       *
N     *    FreeRTOS provides completely free yet professionally developed,    *
N     *    robust, strictly quality controlled, supported, and cross          *
N     *    platform software that is more than just the market leader, it     *
N     *    is the industry's de facto standard.                               *
N     *                                                                       *
N     *    Help yourself get started quickly while simultaneously helping     *
N     *    to support the FreeRTOS project by purchasing a FreeRTOS           *
N     *    tutorial book, reference manual, or both:                          *
N     *    http://www.FreeRTOS.org/Documentation                              *
N     *                                                                       *
N    ***************************************************************************
N
N    http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
N    the FAQ page "My application does not run, what could be wrong?".  Have you
N    defined configASSERT()?
N
N    http://www.FreeRTOS.org/support - In return for receiving this top quality
N    embedded software for free we request you assist our global community by
N    participating in the support forum.
N
N    http://www.FreeRTOS.org/training - Investing in training allows your team to
N    be as productive as possible as early as possible.  Now you can receive
N    FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
N    Ltd, and the world's leading authority on the world's leading RTOS.
N
N    http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
N    including FreeRTOS+Trace - an indispensable productivity tool, a DOS
N    compatible FAT file system, and our tiny thread aware UDP/IP stack.
N
N    http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
N    Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
N
N    http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
N    Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
N    licenses offer ticketed support, indemnification and commercial middleware.
N
N    http://www.SafeRTOS.com - High Integrity Systems also provide a safety
N    engineered and independently SIL3 certified version for use in safety and
N    mission critical applications that require provable dependability.
N
N    1 tab == 4 spaces!
N*/
N
N#ifndef STACK_MACROS_H
N#define STACK_MACROS_H
N
N/*
N * Call the stack overflow hook function if the stack of the task being swapped
N * out is currently overflowed, or looks like it might have overflowed in the
N * past.
N *
N * Setting configCHECK_FOR_STACK_OVERFLOW to 1 will cause the macro to check
N * the current stack state only - comparing the current top of stack value to
N * the stack limit.  Setting configCHECK_FOR_STACK_OVERFLOW to greater than 1
N * will also cause the last few stack bytes to be checked to ensure the value
N * to which the bytes were set when the task was created have not been
N * overwritten.  Note this second test does not guarantee that an overflowed
N * stack will always be recognised.
N */
N
N/*-----------------------------------------------------------*/
N
N#if( ( configCHECK_FOR_STACK_OVERFLOW == 1 ) && ( portSTACK_GROWTH < 0 ) )
X#if( ( 0 == 1 ) && ( ( -1 ) < 0 ) )
S
S	/* Only the current stack state is to be checked. */
S	#define taskCHECK_FOR_STACK_OVERFLOW()																\
S	{																									\
S		/* Is the currently saved stack pointer within the stack limit? */								\
S		if( pxCurrentTCB->pxTopOfStack <= pxCurrentTCB->pxStack )										\
S		{																								\
S			vApplicationStackOverflowHook( ( TaskHandle_t ) pxCurrentTCB, pxCurrentTCB->pcTaskName );	\
S		}																								\
S	}
X	#define taskCHECK_FOR_STACK_OVERFLOW()																	{																											 										if( pxCurrentTCB->pxTopOfStack <= pxCurrentTCB->pxStack )												{																											vApplicationStackOverflowHook( ( TaskHandle_t ) pxCurrentTCB, pxCurrentTCB->pcTaskName );			}																									}
S
N#endif /* configCHECK_FOR_STACK_OVERFLOW == 1 */
N/*-----------------------------------------------------------*/
N
N#if( ( configCHECK_FOR_STACK_OVERFLOW == 1 ) && ( portSTACK_GROWTH > 0 ) )
X#if( ( 0 == 1 ) && ( ( -1 ) > 0 ) )
S
S	/* Only the current stack state is to be checked. */
S	#define taskCHECK_FOR_STACK_OVERFLOW()																\
S	{																									\
S																										\
S		/* Is the currently saved stack pointer within the stack limit? */								\
S		if( pxCurrentTCB->pxTopOfStack >= pxCurrentTCB->pxEndOfStack )									\
S		{																								\
S			vApplicationStackOverflowHook( ( TaskHandle_t ) pxCurrentTCB, pxCurrentTCB->pcTaskName );	\
S		}																								\
S	}
X	#define taskCHECK_FOR_STACK_OVERFLOW()																	{																																																					 										if( pxCurrentTCB->pxTopOfStack >= pxCurrentTCB->pxEndOfStack )											{																											vApplicationStackOverflowHook( ( TaskHandle_t ) pxCurrentTCB, pxCurrentTCB->pcTaskName );			}																									}
S
N#endif /* configCHECK_FOR_STACK_OVERFLOW == 1 */
N/*-----------------------------------------------------------*/
N
N#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) && ( portSTACK_GROWTH < 0 ) )
X#if( ( 0 > 1 ) && ( ( -1 ) < 0 ) )
S
S	#define taskCHECK_FOR_STACK_OVERFLOW()																\
S	{																									\
S		const uint32_t * const pulStack = ( uint32_t * ) pxCurrentTCB->pxStack;							\
S		const uint32_t ulCheckValue = ( uint32_t ) 0xa5a5a5a5;											\
S																										\
S		if( ( pulStack[ 0 ] != ulCheckValue ) ||												\
S			( pulStack[ 1 ] != ulCheckValue ) ||												\
S			( pulStack[ 2 ] != ulCheckValue ) ||												\
S			( pulStack[ 3 ] != ulCheckValue ) )												\
S		{																								\
S			vApplicationStackOverflowHook( ( TaskHandle_t ) pxCurrentTCB, pxCurrentTCB->pcTaskName );	\
S		}																								\
S	}
X	#define taskCHECK_FOR_STACK_OVERFLOW()																	{																											const uint32_t * const pulStack = ( uint32_t * ) pxCurrentTCB->pxStack;									const uint32_t ulCheckValue = ( uint32_t ) 0xa5a5a5a5;																																							if( ( pulStack[ 0 ] != ulCheckValue ) ||															( pulStack[ 1 ] != ulCheckValue ) ||															( pulStack[ 2 ] != ulCheckValue ) ||															( pulStack[ 3 ] != ulCheckValue ) )														{																											vApplicationStackOverflowHook( ( TaskHandle_t ) pxCurrentTCB, pxCurrentTCB->pcTaskName );			}																									}
S
N#endif /* #if( configCHECK_FOR_STACK_OVERFLOW > 1 ) */
N/*-----------------------------------------------------------*/
N
N#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) && ( portSTACK_GROWTH > 0 ) )
X#if( ( 0 > 1 ) && ( ( -1 ) > 0 ) )
S
S	#define taskCHECK_FOR_STACK_OVERFLOW()																								\
S	{																																	\
S	int8_t *pcEndOfStack = ( int8_t * ) pxCurrentTCB->pxEndOfStack;																		\
S	static const uint8_t ucExpectedStackBytes[] = {	tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE,		\
S													tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE,		\
S													tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE,		\
S													tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE,		\
S													tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE };	\
S																																		\
S																																		\
S		pcEndOfStack -= sizeof( ucExpectedStackBytes );																					\
S																																		\
S		/* Has the extremity of the task stack ever been written over? */																\
S		if( memcmp( ( void * ) pcEndOfStack, ( void * ) ucExpectedStackBytes, sizeof( ucExpectedStackBytes ) ) != 0 )					\
S		{																																\
S			vApplicationStackOverflowHook( ( TaskHandle_t ) pxCurrentTCB, pxCurrentTCB->pcTaskName );									\
S		}																																\
S	}
X	#define taskCHECK_FOR_STACK_OVERFLOW()																									{																																		int8_t *pcEndOfStack = ( int8_t * ) pxCurrentTCB->pxEndOfStack;																			static const uint8_t ucExpectedStackBytes[] = {	tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE,															tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE,															tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE,															tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE,															tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE, tskSTACK_FILL_BYTE };																																																																							pcEndOfStack -= sizeof( ucExpectedStackBytes );																																																									 																		if( memcmp( ( void * ) pcEndOfStack, ( void * ) ucExpectedStackBytes, sizeof( ucExpectedStackBytes ) ) != 0 )							{																																			vApplicationStackOverflowHook( ( TaskHandle_t ) pxCurrentTCB, pxCurrentTCB->pcTaskName );											}																																	}
S
N#endif /* #if( configCHECK_FOR_STACK_OVERFLOW > 1 ) */
N/*-----------------------------------------------------------*/
N
N/* Remove stack overflow macro if not being used. */
N#ifndef taskCHECK_FOR_STACK_OVERFLOW
N	#define taskCHECK_FOR_STACK_OVERFLOW()
N#endif
N
N
N
N#endif /* STACK_MACROS_H */
N
L 84 "..\..\FreeRTOS\tasks.c" 2
N
N/* Lint e961 and e750 are suppressed as a MISRA exception justified because the
NMPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
Nheader files above, but not in this file, in order to generate the correct
Nprivileged Vs unprivileged linkage and placement. */
N#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
N
N/* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
Nfunctions but without including stdio.h here. */
N#if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
X#if ( 0 == 1 )
S	/* At the bottom of this file are two optional functions that can be used
S	to generate human readable text from the raw data generated by the
S	uxTaskGetSystemState() function.  Note the formatting functions are provided
S	for convenience only, and are NOT considered part of the kernel. */
S	#include <stdio.h>
N#endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
N
N/* Sanity check the configuration. */
N#if( configUSE_TICKLESS_IDLE != 0 )
X#if( 0 != 0 )
S	#if( INCLUDE_vTaskSuspend != 1 )
S		#error INCLUDE_vTaskSuspend must be set to 1 if configUSE_TICKLESS_IDLE is not set to 0
S	#endif /* INCLUDE_vTaskSuspend */
N#endif /* configUSE_TICKLESS_IDLE */
N
N/*
N * Defines the size, in words, of the stack allocated to the idle task.
N */
N#define tskIDLE_STACK_SIZE	configMINIMAL_STACK_SIZE
N
N#if( configUSE_PREEMPTION == 0 )
X#if( 1 == 0 )
S	/* If the cooperative scheduler is being used then a yield should not be
S	performed just because a higher priority task has been woken. */
S	#define taskYIELD_IF_USING_PREEMPTION()
N#else
N	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
N#endif
N
N/* Value that can be assigned to the eNotifyState member of the TCB. */
Ntypedef enum
N{
N	eNotWaitingNotification = 0,
N	eWaitingNotification,
N	eNotified
N} eNotifyValue;
N
N/*
N * Task control block.  A task control block (TCB) is allocated for each task,
N * and stores task state information, including a pointer to the task's context
N * (the task's run time environment, including register values)
N */
Ntypedef struct tskTaskControlBlock
N{
N	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the tasks stack.  THIS MUST BE THE FIRST MEMBER OF THE TCB STRUCT. */
N
N	#if ( portUSING_MPU_WRAPPERS == 1 )
X	#if ( 0 == 1 )
S		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MUST BE THE SECOND MEMBER OF THE TCB STRUCT. */
S		BaseType_t		xUsingStaticallyAllocatedStack; /* Set to pdTRUE if the stack is a statically allocated array, and pdFALSE if the stack is dynamically allocated. */
N	#endif
N
N	ListItem_t			xGenericListItem;	/*< The list that the state list item of a task is reference from denotes the state of that task (Ready, Blocked, Suspended ). */
N	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
N	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
N	StackType_t			*pxStack;			/*< Points to the start of the stack. */
N	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.  Facilitates debugging only. */ /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
X	char				pcTaskName[ ( 16 ) ];   
N
N	#if ( portSTACK_GROWTH > 0 )
X	#if ( ( -1 ) > 0 )
S		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack grows up from low memory. */
N	#endif
N
N	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
X	#if ( 0 == 1 )
S		UBaseType_t 	uxCriticalNesting; 	/*< Holds the critical section nesting depth for ports that do not maintain their own count in the port layer. */
N	#endif
N
N	#if ( configUSE_TRACE_FACILITY == 1 )
X	#if ( 0 == 1 )
S		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It allows debuggers to determine when a task has been deleted and then recreated. */
S		UBaseType_t  	uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. */
N	#endif
N
N	#if ( configUSE_MUTEXES == 1 )
X	#if ( 1 == 1 )
N		UBaseType_t 	uxBasePriority;		/*< The priority last assigned to the task - used by the priority inheritance mechanism. */
N		UBaseType_t 	uxMutexesHeld;
N	#endif
N
N	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
X	#if ( 0 == 1 )
S		TaskHookFunction_t pxTaskTag;
N	#endif
N
N	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
X	#if( 0 > 0 )
S		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
N	#endif
N
N	#if ( configGENERATE_RUN_TIME_STATS == 1 )
X	#if ( 0 == 1 )
S		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state. */
N	#endif
N
N	#if ( configUSE_NEWLIB_REENTRANT == 1 )
X	#if ( 0 == 1 )
S		/* Allocate a Newlib reent structure that is specific to this task.
S		Note Newlib support has been included by popular demand, but is not
S		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
S		responsible for resulting newlib operation.  User must be familiar with
S		newlib and must provide system-wide implementations of the necessary
S		stubs. Be warned that (at the time of writing) the current newlib design
S		implements a system-wide malloc() that must be provided with locks. */
S		struct 	_reent xNewLib_reent;
N	#endif
N
N	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
X	#if ( 1 == 1 )
N		volatile uint32_t ulNotifiedValue;
N		volatile eNotifyValue eNotifyState;
N	#endif
N
N} tskTCB;
N
N/* The old tskTCB name is maintained above then typedefed to the new TCB_t name
Nbelow to enable the use of older kernel aware debuggers. */
Ntypedef tskTCB TCB_t;
N
N/*
N * Some kernel aware debuggers require the data the debugger needs access to to
N * be global, rather than file scope.
N */
N#ifdef portREMOVE_STATIC_QUALIFIER
S	#define static
N#endif
N
N/*lint -e956 A manual analysis and inspection has been used to determine which
Nstatic variables must be declared volatile. */
N
NPRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
X TCB_t * volatile pxCurrentTCB = 0;
N
N/* Lists for ready and blocked tasks. --------------------*/
NPRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks. */
X static List_t pxReadyTasksLists[ ( 6 ) ]; 
NPRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
X static List_t xDelayedTaskList1;						 
NPRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one for delays that have overflowed the current tick count. */
X static List_t xDelayedTaskList2;						 
NPRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list currently being used. */
X static List_t * volatile pxDelayedTaskList;				 
NPRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task list currently being used to hold tasks that have overflowed the current tick count. */
X static List_t * volatile pxOverflowDelayedTaskList;		 
NPRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the scheduler was suspended.  They will be moved to the ready list when the scheduler is resumed. */
X static List_t xPendingReadyList;						 
N
N#if ( INCLUDE_vTaskDelete == 1 )
X#if ( 1 == 1 )
N
N	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but their memory not yet freed. */
X	 static List_t xTasksWaitingTermination;				 
N	PRIVILEGED_DATA static volatile UBaseType_t uxTasksDeleted = ( UBaseType_t ) 0U;
X	 static volatile UBaseType_t uxTasksDeleted = ( UBaseType_t ) 0U;
N
N#endif
N
N#if ( INCLUDE_vTaskSuspend == 1 )
X#if ( 1 == 1 )
N
N	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
X	 static List_t xSuspendedTaskList;					 
N
N#endif
N
N#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
X#if ( 0 == 1 )
S
S	PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;			/*< Holds the handle of the idle task.  The idle task is created automatically when the scheduler is started. */
S
N#endif
N
N/* Other file private variables. --------------------------------*/
NPRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
X static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
NPRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
X static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
NPRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
X static volatile UBaseType_t uxTopReadyPriority 		= ( ( UBaseType_t ) 0U );
NPRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
X static volatile BaseType_t xSchedulerRunning 		= ( ( BaseType_t ) 0 );
NPRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
X static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
NPRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
X static volatile BaseType_t xYieldPending 			= ( ( BaseType_t ) 0 );
NPRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
X static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
NPRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
X static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
NPRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialised to portMAX_DELAY before the scheduler starts. */
X static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U;  
N
N/* Context switches are held pending while the scheduler is suspended.  Also,
Ninterrupts must not manipulate the xGenericListItem of a TCB, or any of the
Nlists the xGenericListItem can be referenced from, if the scheduler is suspended.
NIf an interrupt needs to unblock a task while the scheduler is suspended then it
Nmoves the task's event list item into the xPendingReadyList, ready for the
Nkernel to move the task from the pending ready list into the real ready list
Nwhen the scheduler is unsuspended.  The pending ready list itself can only be
Naccessed from a critical section. */
NPRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
X static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) ( ( BaseType_t ) 0 );
N
N#if ( configGENERATE_RUN_TIME_STATS == 1 )
X#if ( 0 == 1 )
S
S	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter the last time a task was switched in. */
S	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution time as defined by the run time counter clock. */
S
N#endif
N
N/*lint +e956 */
N
N/* Debugging and trace facilities private variables and macros. ------------*/
N
N/*
N * The value used to fill the stack of a task when the task is created.  This
N * is used purely for checking the high water mark for tasks.
N */
N#define tskSTACK_FILL_BYTE	( 0xa5U )
N
N/*
N * Macros used by vListTask to indicate which state a task is in.
N */
N#define tskBLOCKED_CHAR		( 'B' )
N#define tskREADY_CHAR		( 'R' )
N#define tskDELETED_CHAR		( 'D' )
N#define tskSUSPENDED_CHAR	( 'S' )
N
N/*-----------------------------------------------------------*/
N
N#if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
X#if ( 1 == 0 )
S
S	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
S	performed in a generic way that is not optimised to any particular
S	microcontroller architecture. */
S
S	/* uxTopReadyPriority holds the priority of the highest priority ready
S	state task. */
S	#define taskRECORD_READY_PRIORITY( uxPriority )														\
S	{																									\
S		if( ( uxPriority ) > uxTopReadyPriority )														\
S		{																								\
S			uxTopReadyPriority = ( uxPriority );														\
S		}																								\
S	} /* taskRECORD_READY_PRIORITY */
X	#define taskRECORD_READY_PRIORITY( uxPriority )															{																											if( ( uxPriority ) > uxTopReadyPriority )																{																											uxTopReadyPriority = ( uxPriority );																}																									}  
S
S	/*-----------------------------------------------------------*/
S
S	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
S	{																									\
S		/* Find the highest priority queue that contains ready tasks. */								\
S		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )						\
S		{																								\
S			configASSERT( uxTopReadyPriority );															\
S			--uxTopReadyPriority;																		\
S		}																								\
S																										\
S		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
S		the	same priority get an equal share of the processor time. */									\
S		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );		\
S	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
X	#define taskSELECT_HIGHEST_PRIORITY_TASK()																{																											 										while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )								{																											configASSERT( uxTopReadyPriority );																		--uxTopReadyPriority;																				}																																																				 											listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );			}  
S
S	/*-----------------------------------------------------------*/
S
S	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
S	they are only required when a port optimised method of task selection is
S	being used. */
S	#define taskRESET_READY_PRIORITY( uxPriority )
S	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
S
N#else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
N
N	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
N	performed in a way that is tailored to the particular microcontroller
N	architecture being used. */
N
N	/* A port optimised version is provided.  Call the port defined macros. */
N	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyPriority )
N
N	/*-----------------------------------------------------------*/
N
N	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
N	{																								\
N	UBaseType_t uxTopPriority;																		\
N																									\
N		/* Find the highest priority queue that contains ready tasks. */							\
N		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
N		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
N		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
N	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
X	#define taskSELECT_HIGHEST_PRIORITY_TASK()															{																									UBaseType_t uxTopPriority;																																													 									portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );										configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );				listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			}  
N
N	/*-----------------------------------------------------------*/
N
N	/* A port optimised version is provided, call it only if the TCB being reset
N	is being referenced from a ready list.  If it is referenced from a delayed
N	or suspended list then it won't be in a ready list. */
N	#define taskRESET_READY_PRIORITY( uxPriority )														\
N	{																									\
N		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
N		{																								\
N			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
N		}																								\
N	}
X	#define taskRESET_READY_PRIORITY( uxPriority )															{																											if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )			{																											portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );									}																									}
N
N#endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
N
N/*-----------------------------------------------------------*/
N
N/* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
Ncount overflows. */
N#define taskSWITCH_DELAYED_LISTS()																	\
N{																									\
N	List_t *pxTemp;																					\
N																									\
N	/* The delayed tasks list should be empty when the lists are switched. */						\
N	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
N																									\
N	pxTemp = pxDelayedTaskList;																		\
N	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
N	pxOverflowDelayedTaskList = pxTemp;																\
N	xNumOfOverflows++;																				\
N	prvResetNextTaskUnblockTime();																	\
N}
X#define taskSWITCH_DELAYED_LISTS()																	{																										List_t *pxTemp;																																															 							configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );																																				pxTemp = pxDelayedTaskList;																			pxDelayedTaskList = pxOverflowDelayedTaskList;														pxOverflowDelayedTaskList = pxTemp;																	xNumOfOverflows++;																					prvResetNextTaskUnblockTime();																	}
N
N/*-----------------------------------------------------------*/
N
N/*
N * Place the task represented by pxTCB into the appropriate ready list for
N * the task.  It is inserted at the end of the list.
N */
N#define prvAddTaskToReadyList( pxTCB )																\
N	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
N	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
N	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) )
X#define prvAddTaskToReadyList( pxTCB )																	traceMOVED_TASK_TO_READY_STATE( pxTCB );															taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );													vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) )
N/*-----------------------------------------------------------*/
N
N/*
N * Several functions take an TaskHandle_t parameter that can optionally be NULL,
N * where NULL is used to indicate that the handle of the currently executing
N * task should be used in place of the parameter.  This macro simply checks to
N * see if the parameter is NULL and returns a pointer to the appropriate TCB.
N */
N#define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( TCB_t * ) ( pxHandle ) )
N
N/* The item value of the event list item is normally used to hold the priority
Nof the task to which it belongs (coded to allow it to be held in reverse
Npriority order).  However, it is occasionally borrowed for other purposes.  It
Nis important its value is not updated due to a task priority change while it is
Nbeing used for another purpose.  The following bit definition is used to inform
Nthe scheduler that the value should not be changed - in which case it is the
Nresponsibility of whichever module is using the value to ensure it gets set back
Nto its original value when it is released. */
N#if configUSE_16_BIT_TICKS == 1
X#if 0 == 1
S	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
N#else
N	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
N#endif
N
N/* Callback function prototypes. --------------------------*/
N#if configCHECK_FOR_STACK_OVERFLOW > 0
X#if 0 > 0
S	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
N#endif
N
N#if configUSE_TICK_HOOK > 0
X#if 0 > 0
S	extern void vApplicationTickHook( void );
N#endif
N
N/* File private functions. --------------------------------*/
N
N/*
N * Utility to ready a TCB for a given task.  Mainly just copies the parameters
N * into the TCB structure.
N */
Nstatic void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
Xstatic void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) ;  
N
N/**
N * Utility task that simply returns pdTRUE if the task referenced by xTask is
N * currently in the Suspended state, or pdFALSE if the task referenced by xTask
N * is in any other state.
N */
N#if ( INCLUDE_vTaskSuspend == 1 )
X#if ( 1 == 1 )
N	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
X	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) ;
N#endif /* INCLUDE_vTaskSuspend */
N
N/*
N * Utility to ready all the lists used by the scheduler.  This is called
N * automatically upon the creation of the first task.
N */
Nstatic void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
Xstatic void prvInitialiseTaskLists( void ) ;
N
N/*
N * The idle task, which as all tasks is implemented as a never ending loop.
N * The idle task is automatically created and added to the ready lists upon
N * creation of the first user task.
N *
N * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
N * language extensions.  The equivalent prototype for this function is:
N *
N * void prvIdleTask( void *pvParameters );
N *
N */
Nstatic portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
Xstatic void prvIdleTask( void *pvParameters );
N
N/*
N * Utility to free all memory allocated by the scheduler to hold a TCB,
N * including the stack pointed to by the TCB.
N *
N * This does not free memory allocated by the task itself (i.e. memory
N * allocated by calls to pvPortMalloc from within the tasks application code).
N */
N#if ( INCLUDE_vTaskDelete == 1 )
X#if ( 1 == 1 )
N
N	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
X	static void prvDeleteTCB( TCB_t *pxTCB ) ;
N
N#endif
N
N/*
N * Used only by the idle task.  This checks to see if anything has been placed
N * in the list of tasks waiting to be deleted.  If so the task is cleaned up
N * and its TCB deleted.
N */
Nstatic void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
Xstatic void prvCheckTasksWaitingTermination( void ) ;
N
N/*
N * The currently executing task is entering the Blocked state.  Add the task to
N * either the current or the overflow delayed task list.
N */
Nstatic void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake ) PRIVILEGED_FUNCTION;
Xstatic void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake ) ;
N
N/*
N * Allocates memory from the heap for a TCB and associated stack.  Checks the
N * allocation was successful.
N */
Nstatic TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer ) PRIVILEGED_FUNCTION;
Xstatic TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer ) ;
N
N/*
N * Fills an TaskStatus_t structure with information on each task that is
N * referenced from the pxList list (which may be a ready list, a delayed list,
N * a suspended list, etc.).
N *
N * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
N * NORMAL APPLICATION CODE.
N */
N#if ( configUSE_TRACE_FACILITY == 1 )
X#if ( 0 == 1 )
S
S	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState ) PRIVILEGED_FUNCTION;
S
N#endif
N
N/*
N * When a task is created, the stack of the task is filled with a known value.
N * This function determines the 'high water mark' of the task stack by
N * determining how much of the stack remains at the original preset value.
N */
N#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
X#if ( ( 0 == 1 ) || ( 0 == 1 ) )
S
S	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
S
N#endif
N
N/*
N * Return the amount of time, in ticks, that will pass before the kernel will
N * next move a task from the Blocked state to the Running state.
N *
N * This conditional compilation should use inequality to 0, not equality to 1.
N * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
N * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
N * set to a value other than 1.
N */
N#if ( configUSE_TICKLESS_IDLE != 0 )
X#if ( 0 != 0 )
S
S	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
S
N#endif
N
N/*
N * Set xNextTaskUnblockTime to the time at which the next Blocked state task
N * will exit the Blocked state.
N */
Nstatic void prvResetNextTaskUnblockTime( void );
N
N#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
X#if ( ( 0 == 1 ) && ( 0 > 0 ) )
S
S	/*
S	 * Helper function used to pad task names with spaces when printing out
S	 * human readable tables of task information.
S	 */
S	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName );
S
N#endif
N/*-----------------------------------------------------------*/
N
NBaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
N{
NBaseType_t xReturn;
NTCB_t * pxNewTCB;
NStackType_t *pxTopOfStack;
N
N	configASSERT( pxTaskCode );
X	if( ( pxTaskCode ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
X	if( ( ( ( uxPriority & ( UBaseType_t ) ( ~( ( UBaseType_t ) 0x00 ) ) ) < ( UBaseType_t ) ( 6 ) ) ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N
N	/* Allocate the memory required by the TCB and stack for the new task,
N	checking that the allocation was successful. */
N	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
N
N	if( pxNewTCB != NULL )
X	if( pxNewTCB != 0 )
N	{
N		#if( portUSING_MPU_WRAPPERS == 1 )
X		#if( 0 == 1 )
S			/* Should the task be created in privileged mode? */
S			BaseType_t xRunPrivileged;
S			if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
S			{
S				xRunPrivileged = pdTRUE;
S			}
S			else
S			{
S				xRunPrivileged = pdFALSE;
S			}
S			uxPriority &= ~portPRIVILEGE_BIT;
S
S			if( puxStackBuffer != NULL )
S			{
S				/* The application provided its own stack.  Note this so no
S				attempt is made to delete the stack should that task be
S				deleted. */
S				pxNewTCB->xUsingStaticallyAllocatedStack = pdTRUE;
S			}
S			else
S			{
S				/* The stack was allocated dynamically.  Note this so it can be
S				deleted again if the task is deleted. */
S				pxNewTCB->xUsingStaticallyAllocatedStack = pdFALSE;
S			}
N		#endif /* portUSING_MPU_WRAPPERS == 1 */
N
N		/* Calculate the top of stack address.  This depends on whether the
N		stack grows from high memory to low (as per the 80x86) or vice versa.
N		portSTACK_GROWTH is used to make the result positive or negative as
N		required by the port. */
N		#if( portSTACK_GROWTH < 0 )
X		#if( ( -1 ) < 0 )
N		{
N			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
N			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
X			pxTopOfStack = ( StackType_t * ) ( ( ( uint32_t ) pxTopOfStack ) & ( ~( ( uint32_t ) ( 0x0007 ) ) ) );  
N
N			/* Check the alignment of the calculated top of stack is correct. */
N			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
X			if( ( ( ( ( uint32_t ) pxTopOfStack & ( uint32_t ) ( 0x0007 ) ) == 0UL ) ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N		}
N		#else /* portSTACK_GROWTH */
S		{
S			pxTopOfStack = pxNewTCB->pxStack;
S
S			/* Check the alignment of the stack buffer is correct. */
S			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
S
S			/* If we want to use stack checking on architectures that use
S			a positive stack growth direction then we also need to store the
S			other extreme of the stack space. */
S			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
S		}
N		#endif /* portSTACK_GROWTH */
N
N		/* Setup the newly allocated TCB with the initial state of the task. */
N		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
N
N		/* Initialize the TCB stack to look as if the task was already running,
N		but had been interrupted by the scheduler.  The return address is set
N		to the start of the task function. Once the stack has been initialised
N		the	top of stack variable is updated. */
N		#if( portUSING_MPU_WRAPPERS == 1 )
X		#if( 0 == 1 )
S		{
S			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
S		}
N		#else /* portUSING_MPU_WRAPPERS */
N		{
N			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
N		}
N		#endif /* portUSING_MPU_WRAPPERS */
N
N		if( ( void * ) pxCreatedTask != NULL )
X		if( ( void * ) pxCreatedTask != 0 )
N		{
N			/* Pass the TCB out - in an anonymous way.  The calling function/
N			task can use this as a handle to delete the task later if
N			required.*/
N			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
N		}
N		else
N		{
N			mtCOVERAGE_TEST_MARKER();
X			;
N		}
N
N		/* Ensure interrupts don't access the task lists while they are being
N		updated. */
N		taskENTER_CRITICAL();
X		vPortEnterCritical();
N		{
N			uxCurrentNumberOfTasks++;
N			if( pxCurrentTCB == NULL )
X			if( pxCurrentTCB == 0 )
N			{
N				/* There are no other tasks, or all the other tasks are in
N				the suspended state - make this the current task. */
N				pxCurrentTCB =  pxNewTCB;
N
N				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
N				{
N					/* This is the first task to be created so do the preliminary
N					initialisation required.  We will not recover if this call
N					fails, but we will report the failure. */
N					prvInitialiseTaskLists();
N				}
N				else
N				{
N					mtCOVERAGE_TEST_MARKER();
X					;
N				}
N			}
N			else
N			{
N				/* If the scheduler is not already running, make this task the
N				current task if it is the highest priority task to be created
N				so far. */
N				if( xSchedulerRunning == pdFALSE )
X				if( xSchedulerRunning == ( ( BaseType_t ) 0 ) )
N				{
N					if( pxCurrentTCB->uxPriority <= uxPriority )
N					{
N						pxCurrentTCB = pxNewTCB;
N					}
N					else
N					{
N						mtCOVERAGE_TEST_MARKER();
X						;
N					}
N				}
N				else
N				{
N					mtCOVERAGE_TEST_MARKER();
X					;
N				}
N			}
N
N			uxTaskNumber++;
N
N			#if ( configUSE_TRACE_FACILITY == 1 )
X			#if ( 0 == 1 )
S			{
S				/* Add a counter into the TCB for tracing only. */
S				pxNewTCB->uxTCBNumber = uxTaskNumber;
S			}
N			#endif /* configUSE_TRACE_FACILITY */
N			traceTASK_CREATE( pxNewTCB );
X			;
N
N			prvAddTaskToReadyList( pxNewTCB );
X			; ( uxTopReadyPriority ) |= ( 1UL << ( ( pxNewTCB )->uxPriority ) ); vListInsertEnd( &( pxReadyTasksLists[ ( pxNewTCB )->uxPriority ] ), &( ( pxNewTCB )->xGenericListItem ) );
N
N			xReturn = pdPASS;
X			xReturn = ( ( ( BaseType_t ) 1 ) );
N			portSETUP_TCB( pxNewTCB );
X			( void ) pxNewTCB;
N		}
N		taskEXIT_CRITICAL();
X		vPortExitCritical();
N	}
N	else
N	{
N		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
X		xReturn = ( -1 );
N		traceTASK_CREATE_FAILED();
X		;
N	}
N
N	if( xReturn == pdPASS )
X	if( xReturn == ( ( ( BaseType_t ) 1 ) ) )
N	{
N		if( xSchedulerRunning != pdFALSE )
X		if( xSchedulerRunning != ( ( BaseType_t ) 0 ) )
N		{
N			/* If the created task is of a higher priority than the current task
N			then it should run now. */
N			if( pxCurrentTCB->uxPriority < uxPriority )
N			{
N				taskYIELD_IF_USING_PREEMPTION();
X				vPortYield();
N			}
N			else
N			{
N				mtCOVERAGE_TEST_MARKER();
X				;
N			}
N		}
N		else
N		{
N			mtCOVERAGE_TEST_MARKER();
X			;
N		}
N	}
N
N	return xReturn;
N}
N/*-----------------------------------------------------------*/
N
N#if ( INCLUDE_vTaskDelete == 1 )
X#if ( 1 == 1 )
N
N	void vTaskDelete( TaskHandle_t xTaskToDelete )
N	{
N	TCB_t *pxTCB;
N
N		taskENTER_CRITICAL();
X		vPortEnterCritical();
N		{
N			/* If null is passed in here then it is the calling task that is
N			being deleted. */
N			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
X			pxTCB = ( ( ( xTaskToDelete ) == 0 ) ? ( TCB_t * ) pxCurrentTCB : ( TCB_t * ) ( xTaskToDelete ) );
N
N			/* Remove task from the ready list and place in the	termination list.
N			This will stop the task from be scheduled.  The idle task will check
N			the termination list and free up any memory allocated by the
N			scheduler for the TCB and stack. */
N			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
N			{
N				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
X				{ if( ( ( &( pxReadyTasksLists[ ( pxTCB->uxPriority ) ] ) )->uxNumberOfItems ) == ( UBaseType_t ) 0 ) { ( ( uxTopReadyPriority ) ) &= ~( 1UL << ( ( pxTCB->uxPriority ) ) ); } };
N			}
N			else
N			{
N				mtCOVERAGE_TEST_MARKER();
X				;
N			}
N
N			/* Is the task waiting on an event also? */
N			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
X			if( ( ( &( pxTCB->xEventListItem ) )->pvContainer ) != 0 )
N			{
N				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
N			}
N			else
N			{
N				mtCOVERAGE_TEST_MARKER();
X				;
N			}
N
N			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
N
N			/* Increment the ucTasksDeleted variable so the idle task knows
N			there is a task that has been deleted and that it should therefore
N			check the xTasksWaitingTermination list. */
N			++uxTasksDeleted;
N
N			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
N			can detect that the task lists need re-generating. */
N			uxTaskNumber++;
N
N			traceTASK_DELETE( pxTCB );
X			;
N		}
N		taskEXIT_CRITICAL();
X		vPortExitCritical();
N
N		/* Force a reschedule if it is the currently running task that has just
N		been deleted. */
N		if( xSchedulerRunning != pdFALSE )
X		if( xSchedulerRunning != ( ( BaseType_t ) 0 ) )
N		{
N			if( pxTCB == pxCurrentTCB )
N			{
N				configASSERT( uxSchedulerSuspended == 0 );
X				if( ( uxSchedulerSuspended == 0 ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N
N				/* The pre-delete hook is primarily for the Windows simulator,
N				in which Windows specific clean up operations are performed,
N				after which it is not possible to yield away from this task -
N				hence xYieldPending is used to latch that a context switch is
N				required. */
N				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
X				;
N				portYIELD_WITHIN_API();
X				vPortYield();
N			}
N			else
N			{
N				/* Reset the next expected unblock time in case it referred to
N				the task that has just been deleted. */
N				taskENTER_CRITICAL();
X				vPortEnterCritical();
N				{
N					prvResetNextTaskUnblockTime();
N				}
N				taskEXIT_CRITICAL();
X				vPortExitCritical();
N			}
N		}
N	}
N
N#endif /* INCLUDE_vTaskDelete */
N/*-----------------------------------------------------------*/
N
N#if ( INCLUDE_vTaskDelayUntil == 1 )
X#if ( 1 == 1 )
N
N	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
N	{
N	TickType_t xTimeToWake;
N	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
X	BaseType_t xAlreadyYielded, xShouldDelay = ( ( BaseType_t ) 0 );
N
N		configASSERT( pxPreviousWakeTime );
X		if( ( pxPreviousWakeTime ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N		configASSERT( ( xTimeIncrement > 0U ) );
X		if( ( ( xTimeIncrement > 0U ) ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N		configASSERT( uxSchedulerSuspended == 0 );
X		if( ( uxSchedulerSuspended == 0 ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N
N		vTaskSuspendAll();
N		{
N			/* Minor optimisation.  The tick count cannot change in this
N			block. */
N			const TickType_t xConstTickCount = xTickCount;
N
N			/* Generate the tick time at which the task wants to wake. */
N			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
N
N			if( xConstTickCount < *pxPreviousWakeTime )
N			{
N				/* The tick count has overflowed since this function was
N				lasted called.  In this case the only time we should ever
N				actually delay is if the wake time has also	overflowed,
N				and the wake time is greater than the tick time.  When this
N				is the case it is as if neither time had overflowed. */
N				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
N				{
N					xShouldDelay = pdTRUE;
X					xShouldDelay = ( ( BaseType_t ) 1 );
N				}
N				else
N				{
N					mtCOVERAGE_TEST_MARKER();
X					;
N				}
N			}
N			else
N			{
N				/* The tick time has not overflowed.  In this case we will
N				delay if either the wake time has overflowed, and/or the
N				tick time is less than the wake time. */
N				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
N				{
N					xShouldDelay = pdTRUE;
X					xShouldDelay = ( ( BaseType_t ) 1 );
N				}
N				else
N				{
N					mtCOVERAGE_TEST_MARKER();
X					;
N				}
N			}
N
N			/* Update the wake time ready for the next call. */
N			*pxPreviousWakeTime = xTimeToWake;
N
N			if( xShouldDelay != pdFALSE )
X			if( xShouldDelay != ( ( BaseType_t ) 0 ) )
N			{
N				traceTASK_DELAY_UNTIL();
X				;
N
N				/* Remove the task from the ready list before adding it to the
N				blocked list as the same list item is used for both lists. */
N				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
N				{
N					/* The current task must be in a ready list, so there is
N					no need to check, and the port reset macro can be called
N					directly. */
N					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
X					( uxTopReadyPriority ) &= ~( 1UL << ( pxCurrentTCB->uxPriority ) );
N				}
N				else
N				{
N					mtCOVERAGE_TEST_MARKER();
X					;
N				}
N
N				prvAddCurrentTaskToDelayedList( xTimeToWake );
N			}
N			else
N			{
N				mtCOVERAGE_TEST_MARKER();
X				;
N			}
N		}
N		xAlreadyYielded = xTaskResumeAll();
N
N		/* Force a reschedule if xTaskResumeAll has not already done so, we may
N		have put ourselves to sleep. */
N		if( xAlreadyYielded == pdFALSE )
X		if( xAlreadyYielded == ( ( BaseType_t ) 0 ) )
N		{
N			portYIELD_WITHIN_API();
X			vPortYield();
N		}
N		else
N		{
N			mtCOVERAGE_TEST_MARKER();
X			;
N		}
N	}
N
N#endif /* INCLUDE_vTaskDelayUntil */
N/*-----------------------------------------------------------*/
N
N#if ( INCLUDE_vTaskDelay == 1 )
X#if ( 1 == 1 )
N
N	void vTaskDelay( const TickType_t xTicksToDelay )
N	{
N	TickType_t xTimeToWake;
N	BaseType_t xAlreadyYielded = pdFALSE;
X	BaseType_t xAlreadyYielded = ( ( BaseType_t ) 0 );
N
N
N		/* A delay time of zero just forces a reschedule. */
N		if( xTicksToDelay > ( TickType_t ) 0U )
N		{
N			configASSERT( uxSchedulerSuspended == 0 );
X			if( ( uxSchedulerSuspended == 0 ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N			vTaskSuspendAll();
N			{
N				traceTASK_DELAY();
X				;
N
N				/* A task that is removed from the event list while the
N				scheduler is suspended will not get placed in the ready
N				list or removed from the blocked list until the scheduler
N				is resumed.
N
N				This task cannot be in an event list as it is the currently
N				executing task. */
N
N				/* Calculate the time to wake - this may overflow but this is
N				not a problem. */
N				xTimeToWake = xTickCount + xTicksToDelay;
N
N				/* We must remove ourselves from the ready list before adding
N				ourselves to the blocked list as the same list item is used for
N				both lists. */
N				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
N				{
N					/* The current task must be in a ready list, so there is
N					no need to check, and the port reset macro can be called
N					directly. */
N					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
X					( uxTopReadyPriority ) &= ~( 1UL << ( pxCurrentTCB->uxPriority ) );
N				}
N				else
N				{
N					mtCOVERAGE_TEST_MARKER();
X					;
N				}
N				prvAddCurrentTaskToDelayedList( xTimeToWake );
N			}
N			xAlreadyYielded = xTaskResumeAll();
N		}
N		else
N		{
N			mtCOVERAGE_TEST_MARKER();
X			;
N		}
N
N		/* Force a reschedule if xTaskResumeAll has not already done so, we may
N		have put ourselves to sleep. */
N		if( xAlreadyYielded == pdFALSE )
X		if( xAlreadyYielded == ( ( BaseType_t ) 0 ) )
N		{
N			portYIELD_WITHIN_API();
X			vPortYield();
N		}
N		else
N		{
N			mtCOVERAGE_TEST_MARKER();
X			;
N		}
N	}
N
N#endif /* INCLUDE_vTaskDelay */
N/*-----------------------------------------------------------*/
N
N#if ( INCLUDE_eTaskGetState == 1 )
X#if ( 0 == 1 )
S
S	eTaskState eTaskGetState( TaskHandle_t xTask )
S	{
S	eTaskState eReturn;
S	List_t *pxStateList;
S	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
S
S		configASSERT( pxTCB );
S
S		if( pxTCB == pxCurrentTCB )
S		{
S			/* The task calling this function is querying its own state. */
S			eReturn = eRunning;
S		}
S		else
S		{
S			taskENTER_CRITICAL();
S			{
S				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xGenericListItem ) );
S			}
S			taskEXIT_CRITICAL();
S
S			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
S			{
S				/* The task being queried is referenced from one of the Blocked
S				lists. */
S				eReturn = eBlocked;
S			}
S
S			#if ( INCLUDE_vTaskSuspend == 1 )
S				else if( pxStateList == &xSuspendedTaskList )
S				{
S					/* The task being queried is referenced from the suspended
S					list.  Is it genuinely suspended or is it block
S					indefinitely? */
S					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
S					{
S						eReturn = eSuspended;
S					}
S					else
S					{
S						eReturn = eBlocked;
S					}
S				}
S			#endif
S
S			#if ( INCLUDE_vTaskDelete == 1 )
S				else if( pxStateList == &xTasksWaitingTermination )
S				{
S					/* The task being queried is referenced from the deleted
S					tasks list. */
S					eReturn = eDeleted;
S				}
S			#endif
S
S			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
S			{
S				/* If the task is not in any other state, it must be in the
S				Ready (including pending ready) state. */
S				eReturn = eReady;
S			}
S		}
S
S		return eReturn;
S	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
S
N#endif /* INCLUDE_eTaskGetState */
N/*-----------------------------------------------------------*/
N
N#if ( INCLUDE_uxTaskPriorityGet == 1 )
X#if ( 1 == 1 )
N
N	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
N	{
N	TCB_t *pxTCB;
N	UBaseType_t uxReturn;
N
N		taskENTER_CRITICAL();
X		vPortEnterCritical();
N		{
N			/* If null is passed in here then it is the priority of the that
N			called uxTaskPriorityGet() that is being queried. */
N			pxTCB = prvGetTCBFromHandle( xTask );
X			pxTCB = ( ( ( xTask ) == 0 ) ? ( TCB_t * ) pxCurrentTCB : ( TCB_t * ) ( xTask ) );
N			uxReturn = pxTCB->uxPriority;
N		}
N		taskEXIT_CRITICAL();
X		vPortExitCritical();
N
N		return uxReturn;
N	}
N
N#endif /* INCLUDE_uxTaskPriorityGet */
N/*-----------------------------------------------------------*/
N
N#if ( INCLUDE_uxTaskPriorityGet == 1 )
X#if ( 1 == 1 )
N
N	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
N	{
N	TCB_t *pxTCB;
N	UBaseType_t uxReturn, uxSavedInterruptState;
N
N		/* RTOS ports that support interrupt nesting have the concept of a
N		maximum	system call (or maximum API call) interrupt priority.
N		Interrupts that are	above the maximum system call priority are keep
N		permanently enabled, even when the RTOS kernel is in a critical section,
N		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
N		is defined in FreeRTOSConfig.h then
N		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
N		failure if a FreeRTOS API function is called from an interrupt that has
N		been assigned a priority above the configured maximum system call
N		priority.  Only FreeRTOS functions that end in FromISR can be called
N		from interrupts	that have been assigned a priority at or (logically)
N		below the maximum system call interrupt priority.  FreeRTOS maintains a
N		separate interrupt safe API to ensure interrupt entry is as fast and as
N		simple as possible.  More information (albeit Cortex-M specific) is
N		provided on the following link:
N		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
N		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
X		vPortValidateInterruptPriority();
N
N		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
X		uxSavedInterruptState = ulPortSetInterruptMask();
N		{
N			/* If null is passed in here then it is the priority of the calling
N			task that is being queried. */
N			pxTCB = prvGetTCBFromHandle( xTask );
X			pxTCB = ( ( ( xTask ) == 0 ) ? ( TCB_t * ) pxCurrentTCB : ( TCB_t * ) ( xTask ) );
N			uxReturn = pxTCB->uxPriority;
N		}
N		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
X		vPortClearInterruptMask(uxSavedInterruptState);
N
N		return uxReturn;
N	}
N
N#endif /* INCLUDE_uxTaskPriorityGet */
N/*-----------------------------------------------------------*/
N
N#if ( INCLUDE_vTaskPrioritySet == 1 )
X#if ( 1 == 1 )
N
N	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
N	{
N	TCB_t *pxTCB;
N	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
N	BaseType_t xYieldRequired = pdFALSE;
X	BaseType_t xYieldRequired = ( ( BaseType_t ) 0 );
N
N		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
X		if( ( ( uxNewPriority < ( 6 ) ) ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N
N		/* Ensure the new priority is valid. */
N		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
X		if( uxNewPriority >= ( UBaseType_t ) ( 6 ) )
N		{
N			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
X			uxNewPriority = ( UBaseType_t ) ( 6 ) - ( UBaseType_t ) 1U;
N		}
N		else
N		{
N			mtCOVERAGE_TEST_MARKER();
X			;
N		}
N
N		taskENTER_CRITICAL();
X		vPortEnterCritical();
N		{
N			/* If null is passed in here then it is the priority of the calling
N			task that is being changed. */
N			pxTCB = prvGetTCBFromHandle( xTask );
X			pxTCB = ( ( ( xTask ) == 0 ) ? ( TCB_t * ) pxCurrentTCB : ( TCB_t * ) ( xTask ) );
N
N			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
X			;
N
N			#if ( configUSE_MUTEXES == 1 )
X			#if ( 1 == 1 )
N			{
N				uxCurrentBasePriority = pxTCB->uxBasePriority;
N			}
N			#else
S			{
S				uxCurrentBasePriority = pxTCB->uxPriority;
S			}
N			#endif
N
N			if( uxCurrentBasePriority != uxNewPriority )
N			{
N				/* The priority change may have readied a task of higher
N				priority than the calling task. */
N				if( uxNewPriority > uxCurrentBasePriority )
N				{
N					if( pxTCB != pxCurrentTCB )
N					{
N						/* The priority of a task other than the currently
N						running task is being raised.  Is the priority being
N						raised above that of the running task? */
N						if( uxNewPriority >= pxCurrentTCB->uxPriority )
N						{
N							xYieldRequired = pdTRUE;
X							xYieldRequired = ( ( BaseType_t ) 1 );
N						}
N						else
N						{
N							mtCOVERAGE_TEST_MARKER();
X							;
N						}
N					}
N					else
N					{
N						/* The priority of the running task is being raised,
N						but the running task must already be the highest
N						priority task able to run so no yield is required. */
N					}
N				}
N				else if( pxTCB == pxCurrentTCB )
N				{
N					/* Setting the priority of the running task down means
N					there may now be another task of higher priority that
N					is ready to execute. */
N					xYieldRequired = pdTRUE;
X					xYieldRequired = ( ( BaseType_t ) 1 );
N				}
N				else
N				{
N					/* Setting the priority of any other task down does not
N					require a yield as the running task must be above the
N					new priority of the task being modified. */
N				}
N
N				/* Remember the ready list the task might be referenced from
N				before its uxPriority member is changed so the
N				taskRESET_READY_PRIORITY() macro can function correctly. */
N				uxPriorityUsedOnEntry = pxTCB->uxPriority;
N
N				#if ( configUSE_MUTEXES == 1 )
X				#if ( 1 == 1 )
N				{
N					/* Only change the priority being used if the task is not
N					currently using an inherited priority. */
N					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
N					{
N						pxTCB->uxPriority = uxNewPriority;
N					}
N					else
N					{
N						mtCOVERAGE_TEST_MARKER();
X						;
N					}
N
N					/* The base priority gets set whatever. */
N					pxTCB->uxBasePriority = uxNewPriority;
N				}
N				#else
S				{
S					pxTCB->uxPriority = uxNewPriority;
S				}
N				#endif
N
N				/* Only reset the event list item value if the value is not
N				being used for anything else. */
N				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
X				if( ( ( ( &( pxTCB->xEventListItem ) )->xItemValue ) & 0x80000000UL ) == 0UL )
N				{
N					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
X					( ( &( pxTCB->xEventListItem ) )->xItemValue = ( ( ( TickType_t ) ( 6 ) - ( TickType_t ) uxNewPriority ) ) );  
N				}
N				else
N				{
N					mtCOVERAGE_TEST_MARKER();
X					;
N				}
N
N				/* If the task is in the blocked or suspended list we need do
N				nothing more than change it's priority variable. However, if
N				the task is in a ready list it needs to be removed and placed
N				in the list appropriate to its new priority. */
N				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
X				if( ( ( BaseType_t ) ( ( &( pxTCB->xGenericListItem ) )->pvContainer == ( void * ) ( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ) ) ) ) != ( ( BaseType_t ) 0 ) )
N				{
N					/* The task is currently in its ready list - remove before adding
N					it to it's new ready list.  As we are in a critical section we
N					can do this even if the scheduler is suspended. */
N					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
N					{
N						/* It is known that the task is in its ready list so
N						there is no need to check again and the port level
N						reset macro can be called directly. */
N						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
X						( uxTopReadyPriority ) &= ~( 1UL << ( uxPriorityUsedOnEntry ) );
N					}
N					else
N					{
N						mtCOVERAGE_TEST_MARKER();
X						;
N					}
N					prvAddTaskToReadyList( pxTCB );
X					; ( uxTopReadyPriority ) |= ( 1UL << ( ( pxTCB )->uxPriority ) ); vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) );
N				}
N				else
N				{
N					mtCOVERAGE_TEST_MARKER();
X					;
N				}
N
N				if( xYieldRequired == pdTRUE )
X				if( xYieldRequired == ( ( BaseType_t ) 1 ) )
N				{
N					taskYIELD_IF_USING_PREEMPTION();
X					vPortYield();
N				}
N				else
N				{
N					mtCOVERAGE_TEST_MARKER();
X					;
N				}
N
N				/* Remove compiler warning about unused variables when the port
N				optimised task selection is not being used. */
N				( void ) uxPriorityUsedOnEntry;
N			}
N		}
N		taskEXIT_CRITICAL();
X		vPortExitCritical();
N	}
N
N#endif /* INCLUDE_vTaskPrioritySet */
N/*-----------------------------------------------------------*/
N
N#if ( INCLUDE_vTaskSuspend == 1 )
X#if ( 1 == 1 )
N
N	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
N	{
N	TCB_t *pxTCB;
N
N		taskENTER_CRITICAL();
X		vPortEnterCritical();
N		{
N			/* If null is passed in here then it is the running task that is
N			being suspended. */
N			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
X			pxTCB = ( ( ( xTaskToSuspend ) == 0 ) ? ( TCB_t * ) pxCurrentTCB : ( TCB_t * ) ( xTaskToSuspend ) );
N
N			traceTASK_SUSPEND( pxTCB );
X			;
N
N			/* Remove task from the ready/delayed list and place in the
N			suspended list. */
N			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
N			{
N				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
X				{ if( ( ( &( pxReadyTasksLists[ ( pxTCB->uxPriority ) ] ) )->uxNumberOfItems ) == ( UBaseType_t ) 0 ) { ( ( uxTopReadyPriority ) ) &= ~( 1UL << ( ( pxTCB->uxPriority ) ) ); } };
N			}
N			else
N			{
N				mtCOVERAGE_TEST_MARKER();
X				;
N			}
N
N			/* Is the task waiting on an event also? */
N			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
X			if( ( ( &( pxTCB->xEventListItem ) )->pvContainer ) != 0 )
N			{
N				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
N			}
N			else
N			{
N				mtCOVERAGE_TEST_MARKER();
X				;
N			}
N
N			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
N		}
N		taskEXIT_CRITICAL();
X		vPortExitCritical();
N
N		if( pxTCB == pxCurrentTCB )
N		{
N			if( xSchedulerRunning != pdFALSE )
X			if( xSchedulerRunning != ( ( BaseType_t ) 0 ) )
N			{
N				/* The current task has just been suspended. */
N				configASSERT( uxSchedulerSuspended == 0 );
X				if( ( uxSchedulerSuspended == 0 ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N				portYIELD_WITHIN_API();
X				vPortYield();
N			}
N			else
N			{
N				/* The scheduler is not running, but the task that was pointed
N				to by pxCurrentTCB has just been suspended and pxCurrentTCB
N				must be adjusted to point to a different task. */
N				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
X				if( ( ( &xSuspendedTaskList )->uxNumberOfItems ) == uxCurrentNumberOfTasks )
N				{
N					/* No other tasks are ready, so set pxCurrentTCB back to
N					NULL so when the next task is created pxCurrentTCB will
N					be set to point to it no matter what its relative priority
N					is. */
N					pxCurrentTCB = NULL;
X					pxCurrentTCB = 0;
N				}
N				else
N				{
N					vTaskSwitchContext();
N				}
N			}
N		}
N		else
N		{
N			if( xSchedulerRunning != pdFALSE )
X			if( xSchedulerRunning != ( ( BaseType_t ) 0 ) )
N			{
N				/* A task other than the currently running task was suspended,
N				reset the next expected unblock time in case it referred to the
N				task that is now in the Suspended state. */
N				taskENTER_CRITICAL();
X				vPortEnterCritical();
N				{
N					prvResetNextTaskUnblockTime();
N				}
N				taskEXIT_CRITICAL();
X				vPortExitCritical();
N			}
N			else
N			{
N				mtCOVERAGE_TEST_MARKER();
X				;
N			}
N		}
N	}
N
N#endif /* INCLUDE_vTaskSuspend */
N/*-----------------------------------------------------------*/
N
N#if ( INCLUDE_vTaskSuspend == 1 )
X#if ( 1 == 1 )
N
N	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
N	{
N	BaseType_t xReturn = pdFALSE;
X	BaseType_t xReturn = ( ( BaseType_t ) 0 );
N	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
N
N		/* Accesses xPendingReadyList so must be called from a critical
N		section. */
N
N		/* It does not make sense to check if the calling task is suspended. */
N		configASSERT( xTask );
X		if( ( xTask ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N
N		/* Is the task being resumed actually in the suspended list? */
N		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
X		if( ( ( BaseType_t ) ( ( &( pxTCB->xGenericListItem ) )->pvContainer == ( void * ) ( &xSuspendedTaskList ) ) ) != ( ( BaseType_t ) 0 ) )
N		{
N			/* Has the task already been resumed from within an ISR? */
N			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
X			if( ( ( BaseType_t ) ( ( &( pxTCB->xEventListItem ) )->pvContainer == ( void * ) ( &xPendingReadyList ) ) ) == ( ( BaseType_t ) 0 ) )
N			{
N				/* Is it in the suspended list because it is in the	Suspended
N				state, or because is is blocked with no timeout? */
N				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
X				if( ( ( BaseType_t ) ( ( &( pxTCB->xEventListItem ) )->pvContainer == ( void * ) ( 0 ) ) ) != ( ( BaseType_t ) 0 ) )
N				{
N					xReturn = pdTRUE;
X					xReturn = ( ( BaseType_t ) 1 );
N				}
N				else
N				{
N					mtCOVERAGE_TEST_MARKER();
X					;
N				}
N			}
N			else
N			{
N				mtCOVERAGE_TEST_MARKER();
X				;
N			}
N		}
N		else
N		{
N			mtCOVERAGE_TEST_MARKER();
X			;
N		}
N
N		return xReturn;
N	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
N
N#endif /* INCLUDE_vTaskSuspend */
N/*-----------------------------------------------------------*/
N
N#if ( INCLUDE_vTaskSuspend == 1 )
X#if ( 1 == 1 )
N
N	void vTaskResume( TaskHandle_t xTaskToResume )
N	{
N	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
N
N		/* It does not make sense to resume the calling task. */
N		configASSERT( xTaskToResume );
X		if( ( xTaskToResume ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N
N		/* The parameter cannot be NULL as it is impossible to resume the
N		currently executing task. */
N		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
X		if( ( pxTCB != 0 ) && ( pxTCB != pxCurrentTCB ) )
N		{
N			taskENTER_CRITICAL();
X			vPortEnterCritical();
N			{
N				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
X				if( prvTaskIsTaskSuspended( pxTCB ) == ( ( BaseType_t ) 1 ) )
N				{
N					traceTASK_RESUME( pxTCB );
X					;
N
N					/* As we are in a critical section we can access the ready
N					lists even if the scheduler is suspended. */
N					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
N					prvAddTaskToReadyList( pxTCB );
X					; ( uxTopReadyPriority ) |= ( 1UL << ( ( pxTCB )->uxPriority ) ); vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) );
N
N					/* We may have just resumed a higher priority task. */
N					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
N					{
N						/* This yield may not cause the task just resumed to run,
N						but will leave the lists in the correct state for the
N						next yield. */
N						taskYIELD_IF_USING_PREEMPTION();
X						vPortYield();
N					}
N					else
N					{
N						mtCOVERAGE_TEST_MARKER();
X						;
N					}
N				}
N				else
N				{
N					mtCOVERAGE_TEST_MARKER();
X					;
N				}
N			}
N			taskEXIT_CRITICAL();
X			vPortExitCritical();
N		}
N		else
N		{
N			mtCOVERAGE_TEST_MARKER();
X			;
N		}
N	}
N
N#endif /* INCLUDE_vTaskSuspend */
N
N/*-----------------------------------------------------------*/
N
N#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
X#if ( ( 1 == 1 ) && ( 1 == 1 ) )
N
N	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
N	{
N	BaseType_t xYieldRequired = pdFALSE;
X	BaseType_t xYieldRequired = ( ( BaseType_t ) 0 );
N	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
N	UBaseType_t uxSavedInterruptStatus;
N
N		configASSERT( xTaskToResume );
X		if( ( xTaskToResume ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N
N		/* RTOS ports that support interrupt nesting have the concept of a
N		maximum	system call (or maximum API call) interrupt priority.
N		Interrupts that are	above the maximum system call priority are keep
N		permanently enabled, even when the RTOS kernel is in a critical section,
N		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
N		is defined in FreeRTOSConfig.h then
N		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
N		failure if a FreeRTOS API function is called from an interrupt that has
N		been assigned a priority above the configured maximum system call
N		priority.  Only FreeRTOS functions that end in FromISR can be called
N		from interrupts	that have been assigned a priority at or (logically)
N		below the maximum system call interrupt priority.  FreeRTOS maintains a
N		separate interrupt safe API to ensure interrupt entry is as fast and as
N		simple as possible.  More information (albeit Cortex-M specific) is
N		provided on the following link:
N		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
N		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
X		vPortValidateInterruptPriority();
N
N		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
X		uxSavedInterruptStatus = ulPortSetInterruptMask();
N		{
N			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
X			if( prvTaskIsTaskSuspended( pxTCB ) == ( ( BaseType_t ) 1 ) )
N			{
N				traceTASK_RESUME_FROM_ISR( pxTCB );
X				;
N
N				/* Check the ready lists can be accessed. */
N				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
X				if( uxSchedulerSuspended == ( UBaseType_t ) ( ( BaseType_t ) 0 ) )
N				{
N					/* Ready lists can be accessed so move the task from the
N					suspended list to the ready list directly. */
N					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
N					{
N						xYieldRequired = pdTRUE;
X						xYieldRequired = ( ( BaseType_t ) 1 );
N					}
N					else
N					{
N						mtCOVERAGE_TEST_MARKER();
X						;
N					}
N
N					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
N					prvAddTaskToReadyList( pxTCB );
X					; ( uxTopReadyPriority ) |= ( 1UL << ( ( pxTCB )->uxPriority ) ); vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) );
N				}
N				else
N				{
N					/* The delayed or ready lists cannot be accessed so the task
N					is held in the pending ready list until the scheduler is
N					unsuspended. */
N					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
N				}
N			}
N			else
N			{
N				mtCOVERAGE_TEST_MARKER();
X				;
N			}
N		}
N		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
X		vPortClearInterruptMask(uxSavedInterruptStatus);
N
N		return xYieldRequired;
N	}
N
N#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
N/*-----------------------------------------------------------*/
N
Nvoid vTaskStartScheduler( void )
N{
NBaseType_t xReturn;
N
N	/* Add the idle task at the lowest priority. */
N	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
X	#if ( 0 == 1 )
S	{
S		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
S		be returned by the xTaskGetIdleTaskHandle() function. */
S		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
S	}
N	#else
N	{
N		/* Create the idle task without storing its handle. */
N		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
X		xReturn = xTaskGenericCreate( ( prvIdleTask ), ( "IDLE" ), ( ( ( unsigned short ) 128 ) ), ( ( void * ) 0 ), ( ( ( ( UBaseType_t ) 0U ) | ( ( UBaseType_t ) 0x00 ) ) ), ( 0 ), ( 0 ), ( 0 ) );   
N	}
N	#endif /* INCLUDE_xTaskGetIdleTaskHandle */
N
N	#if ( configUSE_TIMERS == 1 )
X	#if ( 1 == 1 )
N	{
N		if( xReturn == pdPASS )
X		if( xReturn == ( ( ( BaseType_t ) 1 ) ) )
N		{
N			xReturn = xTimerCreateTimerTask();
N		}
N		else
N		{
N			mtCOVERAGE_TEST_MARKER();
X			;
N		}
N	}
N	#endif /* configUSE_TIMERS */
N
N	if( xReturn == pdPASS )
X	if( xReturn == ( ( ( BaseType_t ) 1 ) ) )
N	{
N		/* Interrupts are turned off here, to ensure a tick does not occur
N		before or during the call to xPortStartScheduler().  The stacks of
N		the created tasks contain a status word with interrupts switched on
N		so interrupts will automatically get re-enabled when the first task
N		starts to run. */
N		portDISABLE_INTERRUPTS();
X		ulPortSetInterruptMask();
N
N		#if ( configUSE_NEWLIB_REENTRANT == 1 )
X		#if ( 0 == 1 )
S		{
S			/* Switch Newlib's _impure_ptr variable to point to the _reent
S			structure specific to the task that will run first. */
S			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
S		}
N		#endif /* configUSE_NEWLIB_REENTRANT */
N
N		xNextTaskUnblockTime = portMAX_DELAY;
X		xNextTaskUnblockTime = ( TickType_t ) 0xffffffffUL;
N		xSchedulerRunning = pdTRUE;
X		xSchedulerRunning = ( ( BaseType_t ) 1 );
N		xTickCount = ( TickType_t ) 0U;
N
N		/* If configGENERATE_RUN_TIME_STATS is defined then the following
N		macro must be defined to configure the timer/counter used to generate
N		the run time counter time base. */
N		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
X		;
N
N		/* Setting up the timer tick is hardware specific and thus in the
N		portable interface. */
N		if( xPortStartScheduler() != pdFALSE )
X		if( xPortStartScheduler() != ( ( BaseType_t ) 0 ) )
N		{
N			/* Should not reach here as if the scheduler is running the
N			function will not return. */
N		}
N		else
N		{
N			/* Should only reach here if a task calls xTaskEndScheduler(). */
N		}
N	}
N	else
N	{
N		/* This line will only be reached if the kernel could not be started,
N		because there was not enough FreeRTOS heap to create the idle task
N		or the timer task. */
N		configASSERT( xReturn );
X		if( ( xReturn ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N	}
N}
N/*-----------------------------------------------------------*/
N
Nvoid vTaskEndScheduler( void )
N{
N	/* Stop the scheduler interrupts and call the portable scheduler end
N	routine so the original ISRs can be restored if necessary.  The port
N	layer must ensure interrupts enable	bit is left in the correct state. */
N	portDISABLE_INTERRUPTS();
X	ulPortSetInterruptMask();
N	xSchedulerRunning = pdFALSE;
X	xSchedulerRunning = ( ( BaseType_t ) 0 );
N	vPortEndScheduler();
N}
N/*----------------------------------------------------------*/
N
Nvoid vTaskSuspendAll( void )
N{
N	/* A critical section is not required as the variable is of type
N	BaseType_t.  Please read Richard Barry's reply in the following link to a
N	post in the FreeRTOS support forum before reporting this as a bug! -
N	http://goo.gl/wu4acr */
N	++uxSchedulerSuspended;
N}
N/*----------------------------------------------------------*/
N
N#if ( configUSE_TICKLESS_IDLE != 0 )
X#if ( 0 != 0 )
S
S	static TickType_t prvGetExpectedIdleTime( void )
S	{
S	TickType_t xReturn;
S
S		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
S		{
S			xReturn = 0;
S		}
S		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
S		{
S			/* There are other idle priority tasks in the ready state.  If
S			time slicing is used then the very next tick interrupt must be
S			processed. */
S			xReturn = 0;
S		}
S		else
S		{
S			xReturn = xNextTaskUnblockTime - xTickCount;
S		}
S
S		return xReturn;
S	}
S
N#endif /* configUSE_TICKLESS_IDLE */
N/*----------------------------------------------------------*/
N
NBaseType_t xTaskResumeAll( void )
N{
NTCB_t *pxTCB;
NBaseType_t xAlreadyYielded = pdFALSE;
XBaseType_t xAlreadyYielded = ( ( BaseType_t ) 0 );
N
N	/* If uxSchedulerSuspended is zero then this function does not match a
N	previous call to vTaskSuspendAll(). */
N	configASSERT( uxSchedulerSuspended );
X	if( ( uxSchedulerSuspended ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N
N	/* It is possible that an ISR caused a task to be removed from an event
N	list while the scheduler was suspended.  If this was the case then the
N	removed task will have been added to the xPendingReadyList.  Once the
N	scheduler has been resumed it is safe to move all the pending ready
N	tasks from this list into their appropriate ready list. */
N	taskENTER_CRITICAL();
X	vPortEnterCritical();
N	{
N		--uxSchedulerSuspended;
N
N		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
X		if( uxSchedulerSuspended == ( UBaseType_t ) ( ( BaseType_t ) 0 ) )
N		{
N			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
N			{
N				/* Move any readied tasks from the pending list into the
N				appropriate ready list. */
N				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
X				while( ( ( BaseType_t ) ( ( &xPendingReadyList )->uxNumberOfItems == ( UBaseType_t ) 0 ) ) == ( ( BaseType_t ) 0 ) )
N				{
N					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
X					pxTCB = ( TCB_t * ) ( (&( ( ( &xPendingReadyList ) )->xListEnd ))->pxNext->pvOwner );
N					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
N					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
N					prvAddTaskToReadyList( pxTCB );
X					; ( uxTopReadyPriority ) |= ( 1UL << ( ( pxTCB )->uxPriority ) ); vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) );
N
N					/* If the moved task has a priority higher than the current
N					task then a yield must be performed. */
N					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
N					{
N						xYieldPending = pdTRUE;
X						xYieldPending = ( ( BaseType_t ) 1 );
N					}
N					else
N					{
N						mtCOVERAGE_TEST_MARKER();
X						;
N					}
N				}
N
N				/* If any ticks occurred while the scheduler was suspended then
N				they should be processed now.  This ensures the tick count does
N				not	slip, and that any delayed tasks are resumed at the correct
N				time. */
N				if( uxPendedTicks > ( UBaseType_t ) 0U )
N				{
N					while( uxPendedTicks > ( UBaseType_t ) 0U )
N					{
N						if( xTaskIncrementTick() != pdFALSE )
X						if( xTaskIncrementTick() != ( ( BaseType_t ) 0 ) )
N						{
N							xYieldPending = pdTRUE;
X							xYieldPending = ( ( BaseType_t ) 1 );
N						}
N						else
N						{
N							mtCOVERAGE_TEST_MARKER();
X							;
N						}
N						--uxPendedTicks;
N					}
N				}
N				else
N				{
N					mtCOVERAGE_TEST_MARKER();
X					;
N				}
N
N				if( xYieldPending == pdTRUE )
X				if( xYieldPending == ( ( BaseType_t ) 1 ) )
N				{
N					#if( configUSE_PREEMPTION != 0 )
X					#if( 1 != 0 )
N					{
N						xAlreadyYielded = pdTRUE;
X						xAlreadyYielded = ( ( BaseType_t ) 1 );
N					}
N					#endif
N					taskYIELD_IF_USING_PREEMPTION();
X					vPortYield();
N				}
N				else
N				{
N					mtCOVERAGE_TEST_MARKER();
X					;
N				}
N			}
N		}
N		else
N		{
N			mtCOVERAGE_TEST_MARKER();
X			;
N		}
N	}
N	taskEXIT_CRITICAL();
X	vPortExitCritical();
N
N	return xAlreadyYielded;
N}
N/*-----------------------------------------------------------*/
N
NTickType_t xTaskGetTickCount( void )
N{
NTickType_t xTicks;
N
N	/* Critical section required if running on a 16 bit processor. */
N	portTICK_TYPE_ENTER_CRITICAL();
X	;
N	{
N		xTicks = xTickCount;
N	}
N	portTICK_TYPE_EXIT_CRITICAL();
X	;
N
N	return xTicks;
N}
N/*-----------------------------------------------------------*/
N
NTickType_t xTaskGetTickCountFromISR( void )
N{
NTickType_t xReturn;
NUBaseType_t uxSavedInterruptStatus;
N
N	/* RTOS ports that support interrupt nesting have the concept of a maximum
N	system call (or maximum API call) interrupt priority.  Interrupts that are
N	above the maximum system call priority are kept permanently enabled, even
N	when the RTOS kernel is in a critical section, but cannot make any calls to
N	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
N	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
N	failure if a FreeRTOS API function is called from an interrupt that has been
N	assigned a priority above the configured maximum system call priority.
N	Only FreeRTOS functions that end in FromISR can be called from interrupts
N	that have been assigned a priority at or (logically) below the maximum
N	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
N	safe API to ensure interrupt entry is as fast and as simple as possible.
N	More information (albeit Cortex-M specific) is provided on the following
N	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
N	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
X	vPortValidateInterruptPriority();
N
N	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
X	uxSavedInterruptStatus = 0;
N	{
N		xReturn = xTickCount;
N	}
N	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
X	( void ) uxSavedInterruptStatus;
N
N	return xReturn;
N}
N/*-----------------------------------------------------------*/
N
NUBaseType_t uxTaskGetNumberOfTasks( void )
N{
N	/* A critical section is not required because the variables are of type
N	BaseType_t. */
N	return uxCurrentNumberOfTasks;
N}
N/*-----------------------------------------------------------*/
N
N#if ( INCLUDE_pcTaskGetTaskName == 1 )
X#if ( 0 == 1 )
S
S	char *pcTaskGetTaskName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
S	{
S	TCB_t *pxTCB;
S
S		/* If null is passed in here then the name of the calling task is being queried. */
S		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
S		configASSERT( pxTCB );
S		return &( pxTCB->pcTaskName[ 0 ] );
S	}
S
N#endif /* INCLUDE_pcTaskGetTaskName */
N/*-----------------------------------------------------------*/
N
N#if ( configUSE_TRACE_FACILITY == 1 )
X#if ( 0 == 1 )
S
S	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
S	{
S	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
S
S		vTaskSuspendAll();
S		{
S			/* Is there a space in the array for each task in the system? */
S			if( uxArraySize >= uxCurrentNumberOfTasks )
S			{
S				/* Fill in an TaskStatus_t structure with information on each
S				task in the Ready state. */
S				do
S				{
S					uxQueue--;
S					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
S
S				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
S
S				/* Fill in an TaskStatus_t structure with information on each
S				task in the Blocked state. */
S				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
S				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
S
S				#if( INCLUDE_vTaskDelete == 1 )
S				{
S					/* Fill in an TaskStatus_t structure with information on
S					each task that has been deleted but not yet cleaned up. */
S					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
S				}
S				#endif
S
S				#if ( INCLUDE_vTaskSuspend == 1 )
S				{
S					/* Fill in an TaskStatus_t structure with information on
S					each task in the Suspended state. */
S					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
S				}
S				#endif
S
S				#if ( configGENERATE_RUN_TIME_STATS == 1)
S				{
S					if( pulTotalRunTime != NULL )
S					{
S						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
S							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
S						#else
S							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
S						#endif
S					}
S				}
S				#else
S				{
S					if( pulTotalRunTime != NULL )
S					{
S						*pulTotalRunTime = 0;
S					}
S				}
S				#endif
S			}
S			else
S			{
S				mtCOVERAGE_TEST_MARKER();
S			}
S		}
S		( void ) xTaskResumeAll();
S
S		return uxTask;
S	}
S
N#endif /* configUSE_TRACE_FACILITY */
N/*----------------------------------------------------------*/
N
N#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
X#if ( 0 == 1 )
S
S	TaskHandle_t xTaskGetIdleTaskHandle( void )
S	{
S		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
S		started, then xIdleTaskHandle will be NULL. */
S		configASSERT( ( xIdleTaskHandle != NULL ) );
S		return xIdleTaskHandle;
S	}
S
N#endif /* INCLUDE_xTaskGetIdleTaskHandle */
N/*----------------------------------------------------------*/
N
N/* This conditional compilation should use inequality to 0, not equality to 1.
NThis is to ensure vTaskStepTick() is available when user defined low power mode
Nimplementations require configUSE_TICKLESS_IDLE to be set to a value other than
N1. */
N#if ( configUSE_TICKLESS_IDLE != 0 )
X#if ( 0 != 0 )
S
S	void vTaskStepTick( const TickType_t xTicksToJump )
S	{
S		/* Correct the tick count value after a period during which the tick
S		was suppressed.  Note this does *not* call the tick hook function for
S		each stepped tick. */
S		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
S		xTickCount += xTicksToJump;
S		traceINCREASE_TICK_COUNT( xTicksToJump );
S	}
S
N#endif /* configUSE_TICKLESS_IDLE */
N/*----------------------------------------------------------*/
N
NBaseType_t xTaskIncrementTick( void )
N{
NTCB_t * pxTCB;
NTickType_t xItemValue;
NBaseType_t xSwitchRequired = pdFALSE;
XBaseType_t xSwitchRequired = ( ( BaseType_t ) 0 );
N
N	/* Called by the portable layer each time a tick interrupt occurs.
N	Increments the tick then checks to see if the new tick value will cause any
N	tasks to be unblocked. */
N	traceTASK_INCREMENT_TICK( xTickCount );
X	;
N	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
X	if( uxSchedulerSuspended == ( UBaseType_t ) ( ( BaseType_t ) 0 ) )
N	{
N		/* Increment the RTOS tick, switching the delayed and overflowed
N		delayed lists if it wraps to 0. */
N		++xTickCount;
N
N		{
N			/* Minor optimisation.  The tick count cannot change in this
N			block. */
N			const TickType_t xConstTickCount = xTickCount;
N
N			if( xConstTickCount == ( TickType_t ) 0U )
N			{
N				taskSWITCH_DELAYED_LISTS();
X				{ List_t *pxTemp; if( ( ( ( ( BaseType_t ) ( ( pxDelayedTaskList )->uxNumberOfItems == ( UBaseType_t ) 0 ) ) ) ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); }; pxTemp = pxDelayedTaskList; pxDelayedTaskList = pxOverflowDelayedTaskList; pxOverflowDelayedTaskList = pxTemp; xNumOfOverflows++; prvResetNextTaskUnblockTime(); };
N			}
N			else
N			{
N				mtCOVERAGE_TEST_MARKER();
X				;
N			}
N
N			/* See if this tick has made a timeout expire.  Tasks are stored in
N			the	queue in the order of their wake time - meaning once one task
N			has been found whose block time has not expired there is no need to
N			look any further down the list. */
N			if( xConstTickCount >= xNextTaskUnblockTime )
N			{
N				for( ;; )
N				{
N					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
X					if( ( ( BaseType_t ) ( ( pxDelayedTaskList )->uxNumberOfItems == ( UBaseType_t ) 0 ) ) != ( ( BaseType_t ) 0 ) )
N					{
N						/* The delayed list is empty.  Set xNextTaskUnblockTime
N						to the maximum possible value so it is extremely
N						unlikely that the
N						if( xTickCount >= xNextTaskUnblockTime ) test will pass
N						next time through. */
N						xNextTaskUnblockTime = portMAX_DELAY;
X						xNextTaskUnblockTime = ( TickType_t ) 0xffffffffUL;
N						break;
N					}
N					else
N					{
N						/* The delayed list is not empty, get the value of the
N						item at the head of the delayed list.  This is the time
N						at which the task at the head of the delayed list must
N						be removed from the Blocked state. */
N						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
X						pxTCB = ( TCB_t * ) ( (&( ( pxDelayedTaskList )->xListEnd ))->pxNext->pvOwner );
N						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
X						xItemValue = ( ( &( pxTCB->xGenericListItem ) )->xItemValue );
N
N						if( xConstTickCount < xItemValue )
N						{
N							/* It is not time to unblock this item yet, but the
N							item value is the time at which the task at the head
N							of the blocked list must be removed from the Blocked
N							state -	so record the item value in
N							xNextTaskUnblockTime. */
N							xNextTaskUnblockTime = xItemValue;
N							break;
N						}
N						else
N						{
N							mtCOVERAGE_TEST_MARKER();
X							;
N						}
N
N						/* It is time to remove the item from the Blocked state. */
N						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
N
N						/* Is the task waiting on an event also?  If so remove
N						it from the event list. */
N						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
X						if( ( ( &( pxTCB->xEventListItem ) )->pvContainer ) != 0 )
N						{
N							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
N						}
N						else
N						{
N							mtCOVERAGE_TEST_MARKER();
X							;
N						}
N
N						/* Place the unblocked task into the appropriate ready
N						list. */
N						prvAddTaskToReadyList( pxTCB );
X						; ( uxTopReadyPriority ) |= ( 1UL << ( ( pxTCB )->uxPriority ) ); vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) );
N
N						/* A task being unblocked cannot cause an immediate
N						context switch if preemption is turned off. */
N						#if (  configUSE_PREEMPTION == 1 )
X						#if (  1 == 1 )
N						{
N							/* Preemption is on, but a context switch should
N							only be performed if the unblocked task has a
N							priority that is equal to or higher than the
N							currently executing task. */
N							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
N							{
N								xSwitchRequired = pdTRUE;
X								xSwitchRequired = ( ( BaseType_t ) 1 );
N							}
N							else
N							{
N								mtCOVERAGE_TEST_MARKER();
X								;
N							}
N						}
N						#endif /* configUSE_PREEMPTION */
N					}
N				}
N			}
N		}
N
N		/* Tasks of equal priority to the currently running task will share
N		processing time (time slice) if preemption is on, and the application
N		writer has not explicitly turned time slicing off. */
N		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
X		#if ( ( 1 == 1 ) && ( 1 == 1 ) )
N		{
N			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
X			if( ( ( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) )->uxNumberOfItems ) > ( UBaseType_t ) 1 )
N			{
N				xSwitchRequired = pdTRUE;
X				xSwitchRequired = ( ( BaseType_t ) 1 );
N			}
N			else
N			{
N				mtCOVERAGE_TEST_MARKER();
X				;
N			}
N		}
N		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
N
N		#if ( configUSE_TICK_HOOK == 1 )
X		#if ( 0 == 1 )
S		{
S			/* Guard against the tick hook being called when the pended tick
S			count is being unwound (when the scheduler is being unlocked). */
S			if( uxPendedTicks == ( UBaseType_t ) 0U )
S			{
S				vApplicationTickHook();
S			}
S			else
S			{
S				mtCOVERAGE_TEST_MARKER();
S			}
S		}
N		#endif /* configUSE_TICK_HOOK */
N	}
N	else
N	{
N		++uxPendedTicks;
N
N		/* The tick hook gets called at regular intervals, even if the
N		scheduler is locked. */
N		#if ( configUSE_TICK_HOOK == 1 )
X		#if ( 0 == 1 )
S		{
S			vApplicationTickHook();
S		}
N		#endif
N	}
N
N	#if ( configUSE_PREEMPTION == 1 )
X	#if ( 1 == 1 )
N	{
N		if( xYieldPending != pdFALSE )
X		if( xYieldPending != ( ( BaseType_t ) 0 ) )
N		{
N			xSwitchRequired = pdTRUE;
X			xSwitchRequired = ( ( BaseType_t ) 1 );
N		}
N		else
N		{
N			mtCOVERAGE_TEST_MARKER();
X			;
N		}
N	}
N	#endif /* configUSE_PREEMPTION */
N
N	return xSwitchRequired;
N}
N/*-----------------------------------------------------------*/
N
N#if ( configUSE_APPLICATION_TASK_TAG == 1 )
X#if ( 0 == 1 )
S
S	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
S	{
S	TCB_t *xTCB;
S
S		/* If xTask is NULL then it is the task hook of the calling task that is
S		getting set. */
S		if( xTask == NULL )
S		{
S			xTCB = ( TCB_t * ) pxCurrentTCB;
S		}
S		else
S		{
S			xTCB = ( TCB_t * ) xTask;
S		}
S
S		/* Save the hook function in the TCB.  A critical section is required as
S		the value can be accessed from an interrupt. */
S		taskENTER_CRITICAL();
S			xTCB->pxTaskTag = pxHookFunction;
S		taskEXIT_CRITICAL();
S	}
S
N#endif /* configUSE_APPLICATION_TASK_TAG */
N/*-----------------------------------------------------------*/
N
N#if ( configUSE_APPLICATION_TASK_TAG == 1 )
X#if ( 0 == 1 )
S
S	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
S	{
S	TCB_t *xTCB;
S	TaskHookFunction_t xReturn;
S
S		/* If xTask is NULL then we are setting our own task hook. */
S		if( xTask == NULL )
S		{
S			xTCB = ( TCB_t * ) pxCurrentTCB;
S		}
S		else
S		{
S			xTCB = ( TCB_t * ) xTask;
S		}
S
S		/* Save the hook function in the TCB.  A critical section is required as
S		the value can be accessed from an interrupt. */
S		taskENTER_CRITICAL();
S		{
S			xReturn = xTCB->pxTaskTag;
S		}
S		taskEXIT_CRITICAL();
S
S		return xReturn;
S	}
S
N#endif /* configUSE_APPLICATION_TASK_TAG */
N/*-----------------------------------------------------------*/
N
N#if ( configUSE_APPLICATION_TASK_TAG == 1 )
X#if ( 0 == 1 )
S
S	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
S	{
S	TCB_t *xTCB;
S	BaseType_t xReturn;
S
S		/* If xTask is NULL then we are calling our own task hook. */
S		if( xTask == NULL )
S		{
S			xTCB = ( TCB_t * ) pxCurrentTCB;
S		}
S		else
S		{
S			xTCB = ( TCB_t * ) xTask;
S		}
S
S		if( xTCB->pxTaskTag != NULL )
S		{
S			xReturn = xTCB->pxTaskTag( pvParameter );
S		}
S		else
S		{
S			xReturn = pdFAIL;
S		}
S
S		return xReturn;
S	}
S
N#endif /* configUSE_APPLICATION_TASK_TAG */
N/*-----------------------------------------------------------*/
N
Nvoid vTaskSwitchContext( void )
N{
N	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
X	if( uxSchedulerSuspended != ( UBaseType_t ) ( ( BaseType_t ) 0 ) )
N	{
N		/* The scheduler is currently suspended - do not allow a context
N		switch. */
N		xYieldPending = pdTRUE;
X		xYieldPending = ( ( BaseType_t ) 1 );
N	}
N	else
N	{
N		xYieldPending = pdFALSE;
X		xYieldPending = ( ( BaseType_t ) 0 );
N		traceTASK_SWITCHED_OUT();
X		;
N
N		#if ( configGENERATE_RUN_TIME_STATS == 1 )
X		#if ( 0 == 1 )
S		{
S				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
S					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
S				#else
S					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
S				#endif
S
S				/* Add the amount of time the task has been running to the
S				accumulated	time so far.  The time the task started running was
S				stored in ulTaskSwitchedInTime.  Note that there is no overflow
S				protection here	so count values are only valid until the timer
S				overflows.  The guard against negative values is to protect
S				against suspect run time stat counter implementations - which
S				are provided by the application, not the kernel. */
S				if( ulTotalRunTime > ulTaskSwitchedInTime )
S				{
S					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
S				}
S				else
S				{
S					mtCOVERAGE_TEST_MARKER();
S				}
S				ulTaskSwitchedInTime = ulTotalRunTime;
S		}
N		#endif /* configGENERATE_RUN_TIME_STATS */
N
N		/* Check for stack overflow, if configured. */
N		taskCHECK_FOR_STACK_OVERFLOW();
X		;
N
N		/* Select a new task to run using either the generic C or port
N		optimised asm code. */
N		taskSELECT_HIGHEST_PRIORITY_TASK();
X		{ UBaseType_t uxTopPriority; uxTopPriority = ( 31 - __clz( ( uxTopReadyPriority ) ) ); if( ( ( ( &( pxReadyTasksLists[ uxTopPriority ] ) )->uxNumberOfItems ) > 0 ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); }; { List_t * const pxConstList = ( &( pxReadyTasksLists[ uxTopPriority ] ) ); ( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext; if( ( void * ) ( pxConstList )->pxIndex == ( void * ) &( ( pxConstList )->xListEnd ) ) { ( pxConstList )->pxIndex = ( pxConstList )->pxIndex->pxNext; } ( pxCurrentTCB ) = ( pxConstList )->pxIndex->pvOwner; }; };
N		traceTASK_SWITCHED_IN();
X		;
N
N		#if ( configUSE_NEWLIB_REENTRANT == 1 )
X		#if ( 0 == 1 )
S		{
S			/* Switch Newlib's _impure_ptr variable to point to the _reent
S			structure specific to this task. */
S			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
S		}
N		#endif /* configUSE_NEWLIB_REENTRANT */
N	}
N}
N/*-----------------------------------------------------------*/
N
Nvoid vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
N{
NTickType_t xTimeToWake;
N
N	configASSERT( pxEventList );
X	if( ( pxEventList ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N
N	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
N	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
N
N	/* Place the event list item of the TCB in the appropriate event list.
N	This is placed in the list in priority order so the highest priority task
N	is the first to be woken by the event.  The queue that contains the event
N	list is locked, preventing simultaneous access from interrupts. */
N	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
N
N	/* The task must be removed from from the ready list before it is added to
N	the blocked list as the same list item is used for both lists.  Exclusive
N	access to the ready lists guaranteed because the scheduler is locked. */
N	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
N	{
N		/* The current task must be in a ready list, so there is no need to
N		check, and the port reset macro can be called directly. */
N		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
X		( uxTopReadyPriority ) &= ~( 1UL << ( pxCurrentTCB->uxPriority ) );
N	}
N	else
N	{
N		mtCOVERAGE_TEST_MARKER();
X		;
N	}
N
N	#if ( INCLUDE_vTaskSuspend == 1 )
X	#if ( 1 == 1 )
N	{
N		if( xTicksToWait == portMAX_DELAY )
X		if( xTicksToWait == ( TickType_t ) 0xffffffffUL )
N		{
N			/* Add the task to the suspended task list instead of a delayed task
N			list to ensure the task is not woken by a timing event.  It will
N			block indefinitely. */
N			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
N		}
N		else
N		{
N			/* Calculate the time at which the task should be woken if the event
N			does not occur.  This may overflow but this doesn't matter, the
N			scheduler will handle it. */
N			xTimeToWake = xTickCount + xTicksToWait;
N			prvAddCurrentTaskToDelayedList( xTimeToWake );
N		}
N	}
N	#else /* INCLUDE_vTaskSuspend */
S	{
S			/* Calculate the time at which the task should be woken if the event does
S			not occur.  This may overflow but this doesn't matter, the scheduler
S			will handle it. */
S			xTimeToWake = xTickCount + xTicksToWait;
S			prvAddCurrentTaskToDelayedList( xTimeToWake );
S	}
N	#endif /* INCLUDE_vTaskSuspend */
N}
N/*-----------------------------------------------------------*/
N
Nvoid vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
N{
NTickType_t xTimeToWake;
N
N	configASSERT( pxEventList );
X	if( ( pxEventList ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N
N	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
N	the event groups implementation. */
N	configASSERT( uxSchedulerSuspended != 0 );
X	if( ( uxSchedulerSuspended != 0 ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N
N	/* Store the item value in the event list item.  It is safe to access the
N	event list item here as interrupts won't access the event list item of a
N	task that is not in the Blocked state. */
N	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
X	( ( &( pxCurrentTCB->xEventListItem ) )->xItemValue = ( xItemValue | 0x80000000UL ) );
N
N	/* Place the event list item of the TCB at the end of the appropriate event
N	list.  It is safe to access the event list here because it is part of an
N	event group implementation - and interrupts don't access event groups
N	directly (instead they access them indirectly by pending function calls to
N	the task level). */
N	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
N
N	/* The task must be removed from the ready list before it is added to the
N	blocked list.  Exclusive access can be assured to the ready list as the
N	scheduler is locked. */
N	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
N	{
N		/* The current task must be in a ready list, so there is no need to
N		check, and the port reset macro can be called directly. */
N		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
X		( uxTopReadyPriority ) &= ~( 1UL << ( pxCurrentTCB->uxPriority ) );
N	}
N	else
N	{
N		mtCOVERAGE_TEST_MARKER();
X		;
N	}
N
N	#if ( INCLUDE_vTaskSuspend == 1 )
X	#if ( 1 == 1 )
N	{
N		if( xTicksToWait == portMAX_DELAY )
X		if( xTicksToWait == ( TickType_t ) 0xffffffffUL )
N		{
N			/* Add the task to the suspended task list instead of a delayed task
N			list to ensure it is not woken by a timing event.  It will block
N			indefinitely. */
N			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
N		}
N		else
N		{
N			/* Calculate the time at which the task should be woken if the event
N			does not occur.  This may overflow but this doesn't matter, the
N			kernel will manage it correctly. */
N			xTimeToWake = xTickCount + xTicksToWait;
N			prvAddCurrentTaskToDelayedList( xTimeToWake );
N		}
N	}
N	#else /* INCLUDE_vTaskSuspend */
S	{
S			/* Calculate the time at which the task should be woken if the event does
S			not occur.  This may overflow but this doesn't matter, the kernel
S			will manage it correctly. */
S			xTimeToWake = xTickCount + xTicksToWait;
S			prvAddCurrentTaskToDelayedList( xTimeToWake );
S	}
N	#endif /* INCLUDE_vTaskSuspend */
N}
N/*-----------------------------------------------------------*/
N
N#if configUSE_TIMERS == 1
X#if 1 == 1
N
N	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
N	{
N	TickType_t xTimeToWake;
N
N		configASSERT( pxEventList );
X		if( ( pxEventList ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N
N		/* This function should not be called by application code hence the
N		'Restricted' in its name.  It is not part of the public API.  It is
N		designed for use by kernel code, and has special calling requirements -
N		it should be called with the scheduler suspended. */
N
N
N		/* Place the event list item of the TCB in the appropriate event list.
N		In this case it is assume that this is the only task that is going to
N		be waiting on this event list, so the faster vListInsertEnd() function
N		can be used in place of vListInsert. */
N		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
N
N		/* We must remove this task from the ready list before adding it to the
N		blocked list as the same list item is used for both lists.  This
N		function is called with the scheduler locked so interrupts will not
N		access the lists at the same time. */
N		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
N		{
N			/* The current task must be in a ready list, so there is no need to
N			check, and the port reset macro can be called directly. */
N			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
X			( uxTopReadyPriority ) &= ~( 1UL << ( pxCurrentTCB->uxPriority ) );
N		}
N		else
N		{
N			mtCOVERAGE_TEST_MARKER();
X			;
N		}
N
N		/* If vTaskSuspend() is available then the suspended task list is also
N		available and a task that is blocking indefinitely can enter the
N		suspended state (it is not really suspended as it will re-enter the
N		Ready state when the event it is waiting indefinitely for occurs).
N		Blocking indefinitely is useful when using tickless idle mode as when
N		all tasks are blocked indefinitely all timers can be turned off. */
N		#if( INCLUDE_vTaskSuspend == 1 )
X		#if( 1 == 1 )
N		{
N			if( xWaitIndefinitely == pdTRUE )
X			if( xWaitIndefinitely == ( ( BaseType_t ) 1 ) )
N			{
N				/* Add the task to the suspended task list instead of a delayed
N				task list to ensure the task is not woken by a timing event.  It
N				will block indefinitely. */
N				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
N			}
N			else
N			{
N				/* Calculate the time at which the task should be woken if the
N				event does not occur.  This may overflow but this doesn't
N				matter. */
N				xTimeToWake = xTickCount + xTicksToWait;
N				traceTASK_DELAY_UNTIL();
X				;
N				prvAddCurrentTaskToDelayedList( xTimeToWake );
N			}
N		}
N		#else
S		{
S			/* Calculate the time at which the task should be woken if the event
S			does not occur.  This may overflow but this doesn't matter. */
S			xTimeToWake = xTickCount + xTicksToWait;
S			traceTASK_DELAY_UNTIL();
S			prvAddCurrentTaskToDelayedList( xTimeToWake );
S
S			/* Remove compiler warnings when INCLUDE_vTaskSuspend() is not
S			defined. */
S			( void ) xWaitIndefinitely;
S		}
N		#endif
N	}
N
N#endif /* configUSE_TIMERS */
N/*-----------------------------------------------------------*/
N
NBaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
N{
NTCB_t *pxUnblockedTCB;
NBaseType_t xReturn;
N
N	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
N	called from a critical section within an ISR. */
N
N	/* The event list is sorted in priority order, so the first in the list can
N	be removed as it is known to be the highest priority.  Remove the TCB from
N	the delayed list, and add it to the ready list.
N
N	If an event is for a queue that is locked then this function will never
N	get called - the lock count on the queue will get modified instead.  This
N	means exclusive access to the event list is guaranteed here.
N
N	This function assumes that a check has already been made to ensure that
N	pxEventList is not empty. */
N	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
X	pxUnblockedTCB = ( TCB_t * ) ( (&( ( pxEventList )->xListEnd ))->pxNext->pvOwner );
N	configASSERT( pxUnblockedTCB );
X	if( ( pxUnblockedTCB ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
N
N	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
X	if( uxSchedulerSuspended == ( UBaseType_t ) ( ( BaseType_t ) 0 ) )
N	{
N		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
N		prvAddTaskToReadyList( pxUnblockedTCB );
X		; ( uxTopReadyPriority ) |= ( 1UL << ( ( pxUnblockedTCB )->uxPriority ) ); vListInsertEnd( &( pxReadyTasksLists[ ( pxUnblockedTCB )->uxPriority ] ), &( ( pxUnblockedTCB )->xGenericListItem ) );
N	}
N	else
N	{
N		/* The delayed and ready lists cannot be accessed, so hold this task
N		pending until the scheduler is resumed. */
N		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
N	}
N
N	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
N	{
N		/* Return true if the task removed from the event list has a higher
N		priority than the calling task.  This allows the calling task to know if
N		it should force a context switch now. */
N		xReturn = pdTRUE;
X		xReturn = ( ( BaseType_t ) 1 );
N
N		/* Mark that a yield is pending in case the user is not using the
N		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
N		xYieldPending = pdTRUE;
X		xYieldPending = ( ( BaseType_t ) 1 );
N	}
N	else
N	{
N		xReturn = pdFALSE;
X		xReturn = ( ( BaseType_t ) 0 );
N	}
N
N	#if( configUSE_TICKLESS_IDLE != 0 )
X	#if( 0 != 0 )
S	{
S		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
S		might be set to the blocked task's time out time.  If the task is
S		unblocked for a reason other than a timeout xNextTaskUnblockTime is
S		normally left unchanged, because it is automatically reset to a new
S		value when the tick count equals xNextTaskUnblockTime.  However if
S		tickless idling is used it might be more important to enter sleep mode
S		at the earliest possible time - so reset xNextTaskUnblockTime here to
S		ensure it is updated at the earliest possible time. */
S		prvResetNextTaskUnblockTime();
S	}
N	#endif
N
N	return xReturn;
N}
N/*-----------------------------------------------------------*/
N
NBaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
N{
NTCB_t *pxUnblockedTCB;
NBaseType_t xReturn;
N
N	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
N	the event flags implementation. */
N	configASSERT( uxSchedulerSuspended != pdFALSE );
X	if( ( uxSchedulerSuspended != ( ( BaseType_t ) 0 ) ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N
N	/* Store the new item value in the event list. */
N	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
X	( ( pxEventListItem )->xItemValue = ( xItemValue | 0x80000000UL ) );
N
N	/* Remove the event list form the event flag.  Interrupts do not access
N	event flags. */
N	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
X	pxUnblockedTCB = ( TCB_t * ) ( ( pxEventListItem )->pvOwner );
N	configASSERT( pxUnblockedTCB );
X	if( ( pxUnblockedTCB ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N	( void ) uxListRemove( pxEventListItem );
N
N	/* Remove the task from the delayed list and add it to the ready list.  The
N	scheduler is suspended so interrupts will not be accessing the ready
N	lists. */
N	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
N	prvAddTaskToReadyList( pxUnblockedTCB );
X	; ( uxTopReadyPriority ) |= ( 1UL << ( ( pxUnblockedTCB )->uxPriority ) ); vListInsertEnd( &( pxReadyTasksLists[ ( pxUnblockedTCB )->uxPriority ] ), &( ( pxUnblockedTCB )->xGenericListItem ) );
N
N	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
N	{
N		/* Return true if the task removed from the event list has
N		a higher priority than the calling task.  This allows
N		the calling task to know if it should force a context
N		switch now. */
N		xReturn = pdTRUE;
X		xReturn = ( ( BaseType_t ) 1 );
N
N		/* Mark that a yield is pending in case the user is not using the
N		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
N		xYieldPending = pdTRUE;
X		xYieldPending = ( ( BaseType_t ) 1 );
N	}
N	else
N	{
N		xReturn = pdFALSE;
X		xReturn = ( ( BaseType_t ) 0 );
N	}
N
N	return xReturn;
N}
N/*-----------------------------------------------------------*/
N
Nvoid vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
N{
N	configASSERT( pxTimeOut );
X	if( ( pxTimeOut ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N	pxTimeOut->xOverflowCount = xNumOfOverflows;
N	pxTimeOut->xTimeOnEntering = xTickCount;
N}
N/*-----------------------------------------------------------*/
N
NBaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
N{
NBaseType_t xReturn;
N
N	configASSERT( pxTimeOut );
X	if( ( pxTimeOut ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N	configASSERT( pxTicksToWait );
X	if( ( pxTicksToWait ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N
N	taskENTER_CRITICAL();
X	vPortEnterCritical();
N	{
N		/* Minor optimisation.  The tick count cannot change in this block. */
N		const TickType_t xConstTickCount = xTickCount;
N
N		#if ( INCLUDE_vTaskSuspend == 1 )
X		#if ( 1 == 1 )
N			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
N			the maximum block time then the task should block indefinitely, and
N			therefore never time out. */
N			if( *pxTicksToWait == portMAX_DELAY )
X			if( *pxTicksToWait == ( TickType_t ) 0xffffffffUL )
N			{
N				xReturn = pdFALSE;
X				xReturn = ( ( BaseType_t ) 0 );
N			}
N			else /* We are not blocking indefinitely, perform the checks below. */
N		#endif
N
N		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
N		{
N			/* The tick count is greater than the time at which vTaskSetTimeout()
N			was called, but has also overflowed since vTaskSetTimeOut() was called.
N			It must have wrapped all the way around and gone past us again. This
N			passed since vTaskSetTimeout() was called. */
N			xReturn = pdTRUE;
X			xReturn = ( ( BaseType_t ) 1 );
N		}
N		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
N		{
N			/* Not a genuine timeout. Adjust parameters for time remaining. */
N			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
N			vTaskSetTimeOutState( pxTimeOut );
N			xReturn = pdFALSE;
X			xReturn = ( ( BaseType_t ) 0 );
N		}
N		else
N		{
N			xReturn = pdTRUE;
X			xReturn = ( ( BaseType_t ) 1 );
N		}
N	}
N	taskEXIT_CRITICAL();
X	vPortExitCritical();
N
N	return xReturn;
N}
N/*-----------------------------------------------------------*/
N
Nvoid vTaskMissedYield( void )
N{
N	xYieldPending = pdTRUE;
X	xYieldPending = ( ( BaseType_t ) 1 );
N}
N/*-----------------------------------------------------------*/
N
N#if ( configUSE_TRACE_FACILITY == 1 )
X#if ( 0 == 1 )
S
S	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
S	{
S	UBaseType_t uxReturn;
S	TCB_t *pxTCB;
S
S		if( xTask != NULL )
S		{
S			pxTCB = ( TCB_t * ) xTask;
S			uxReturn = pxTCB->uxTaskNumber;
S		}
S		else
S		{
S			uxReturn = 0U;
S		}
S
S		return uxReturn;
S	}
S
N#endif /* configUSE_TRACE_FACILITY */
N/*-----------------------------------------------------------*/
N
N#if ( configUSE_TRACE_FACILITY == 1 )
X#if ( 0 == 1 )
S
S	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
S	{
S	TCB_t *pxTCB;
S
S		if( xTask != NULL )
S		{
S			pxTCB = ( TCB_t * ) xTask;
S			pxTCB->uxTaskNumber = uxHandle;
S		}
S	}
S
N#endif /* configUSE_TRACE_FACILITY */
N
N/*
N * -----------------------------------------------------------
N * The Idle task.
N * ----------------------------------------------------------
N *
N * The portTASK_FUNCTION() macro is used to allow port/compiler specific
N * language extensions.  The equivalent prototype for this function is:
N *
N * void prvIdleTask( void *pvParameters );
N *
N */
Nstatic portTASK_FUNCTION( prvIdleTask, pvParameters )
Xstatic void prvIdleTask( void *pvParameters )
N{
N	/* Stop warnings. */
N	( void ) pvParameters;
N
N	for( ;; )
N	{
N		/* See if any tasks have been deleted. */
N		prvCheckTasksWaitingTermination();
N
N		#if ( configUSE_PREEMPTION == 0 )
X		#if ( 1 == 0 )
S		{
S			/* If we are not using preemption we keep forcing a task switch to
S			see if any other task has become available.  If we are using
S			preemption we don't need to do this as any task becoming available
S			will automatically get the processor anyway. */
S			taskYIELD();
S		}
N		#endif /* configUSE_PREEMPTION */
N
N		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
X		#if ( ( 1 == 1 ) && ( 1 == 1 ) )
N		{
N			/* When using preemption tasks of equal priority will be
N			timesliced.  If a task that is sharing the idle priority is ready
N			to run then the idle task should yield before the end of the
N			timeslice.
N
N			A critical region is not required here as we are just reading from
N			the list, and an occasional incorrect value will not matter.  If
N			the ready list at the idle priority contains more than one task
N			then a task other than the idle task is ready to execute. */
N			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
X			if( ( ( &( pxReadyTasksLists[ ( ( UBaseType_t ) 0U ) ] ) )->uxNumberOfItems ) > ( UBaseType_t ) 1 )
N			{
N				taskYIELD();
X				vPortYield();
N			}
N			else
N			{
N				mtCOVERAGE_TEST_MARKER();
X				;
N			}
N		}
N		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
N
N		#if ( configUSE_IDLE_HOOK == 1 )
X		#if ( 0 == 1 )
S		{
S			extern void vApplicationIdleHook( void );
S
S			/* Call the user defined function from within the idle task.  This
S			allows the application designer to add background functionality
S			without the overhead of a separate task.
S			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
S			CALL A FUNCTION THAT MIGHT BLOCK. */
S			vApplicationIdleHook();
S		}
N		#endif /* configUSE_IDLE_HOOK */
N
N		/* This conditional compilation should use inequality to 0, not equality
N		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
N		user defined low power mode	implementations require
N		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
N		#if ( configUSE_TICKLESS_IDLE != 0 )
X		#if ( 0 != 0 )
S		{
S		TickType_t xExpectedIdleTime;
S
S			/* It is not desirable to suspend then resume the scheduler on
S			each iteration of the idle task.  Therefore, a preliminary
S			test of the expected idle time is performed without the
S			scheduler suspended.  The result here is not necessarily
S			valid. */
S			xExpectedIdleTime = prvGetExpectedIdleTime();
S
S			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
S			{
S				vTaskSuspendAll();
S				{
S					/* Now the scheduler is suspended, the expected idle
S					time can be sampled again, and this time its value can
S					be used. */
S					configASSERT( xNextTaskUnblockTime >= xTickCount );
S					xExpectedIdleTime = prvGetExpectedIdleTime();
S
S					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
S					{
S						traceLOW_POWER_IDLE_BEGIN();
S						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
S						traceLOW_POWER_IDLE_END();
S					}
S					else
S					{
S						mtCOVERAGE_TEST_MARKER();
S					}
S				}
S				( void ) xTaskResumeAll();
S			}
S			else
S			{
S				mtCOVERAGE_TEST_MARKER();
S			}
S		}
N		#endif /* configUSE_TICKLESS_IDLE */
N	}
N}
N/*-----------------------------------------------------------*/
N
N#if( configUSE_TICKLESS_IDLE != 0 )
X#if( 0 != 0 )
S
S	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
S	{
S	/* The idle task exists in addition to the application tasks. */
S	const UBaseType_t uxNonApplicationTasks = 1;
S	eSleepModeStatus eReturn = eStandardSleep;
S
S		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
S		{
S			/* A task was made ready while the scheduler was suspended. */
S			eReturn = eAbortSleep;
S		}
S		else if( xYieldPending != pdFALSE )
S		{
S			/* A yield was pended while the scheduler was suspended. */
S			eReturn = eAbortSleep;
S		}
S		else
S		{
S			/* If all the tasks are in the suspended list (which might mean they
S			have an infinite block time rather than actually being suspended)
S			then it is safe to turn all clocks off and just wait for external
S			interrupts. */
S			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
S			{
S				eReturn = eNoTasksWaitingTimeout;
S			}
S			else
S			{
S				mtCOVERAGE_TEST_MARKER();
S			}
S		}
S
S		return eReturn;
S	}
S
N#endif /* configUSE_TICKLESS_IDLE */
N/*-----------------------------------------------------------*/
N
Nstatic void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
N{
NUBaseType_t x;
N
N	/* Store the task name in the TCB. */
N	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
X	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) ( 16 ); x++ )
N	{
N		pxTCB->pcTaskName[ x ] = pcName[ x ];
N
N		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
N		configMAX_TASK_NAME_LEN characters just in case the memory after the
N		string is not accessible (extremely unlikely). */
N		if( pcName[ x ] == 0x00 )
N		{
N			break;
N		}
N		else
N		{
N			mtCOVERAGE_TEST_MARKER();
X			;
N		}
N	}
N
N	/* Ensure the name string is terminated in the case that the string length
N	was greater or equal to configMAX_TASK_NAME_LEN. */
N	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
X	pxTCB->pcTaskName[ ( 16 ) - 1 ] = '\0';
N
N	/* This is used as an array index so must ensure it's not too large.  First
N	remove the privilege bit if one is present. */
N	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
X	if( uxPriority >= ( UBaseType_t ) ( 6 ) )
N	{
N		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
X		uxPriority = ( UBaseType_t ) ( 6 ) - ( UBaseType_t ) 1U;
N	}
N	else
N	{
N		mtCOVERAGE_TEST_MARKER();
X		;
N	}
N
N	pxTCB->uxPriority = uxPriority;
N	#if ( configUSE_MUTEXES == 1 )
X	#if ( 1 == 1 )
N	{
N		pxTCB->uxBasePriority = uxPriority;
N		pxTCB->uxMutexesHeld = 0;
N	}
N	#endif /* configUSE_MUTEXES */
N
N	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
N	vListInitialiseItem( &( pxTCB->xEventListItem ) );
N
N	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
N	back to	the containing TCB from a generic item in a list. */
N	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
X	( ( &( pxTCB->xGenericListItem ) )->pvOwner = ( void * ) ( pxTCB ) );
N
N	/* Event lists are always in priority order. */
N	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
X	( ( &( pxTCB->xEventListItem ) )->xItemValue = ( ( TickType_t ) ( 6 ) - ( TickType_t ) uxPriority ) );  
N	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
X	( ( &( pxTCB->xEventListItem ) )->pvOwner = ( void * ) ( pxTCB ) );
N
N	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
X	#if ( 0 == 1 )
S	{
S		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
S	}
N	#endif /* portCRITICAL_NESTING_IN_TCB */
N
N	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
X	#if ( 0 == 1 )
S	{
S		pxTCB->pxTaskTag = NULL;
S	}
N	#endif /* configUSE_APPLICATION_TASK_TAG */
N
N	#if ( configGENERATE_RUN_TIME_STATS == 1 )
X	#if ( 0 == 1 )
S	{
S		pxTCB->ulRunTimeCounter = 0UL;
S	}
N	#endif /* configGENERATE_RUN_TIME_STATS */
N
N	#if ( portUSING_MPU_WRAPPERS == 1 )
X	#if ( 0 == 1 )
S	{
S		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, pxTCB->pxStack, usStackDepth );
S	}
N	#else /* portUSING_MPU_WRAPPERS */
N	{
N		( void ) xRegions;
N		( void ) usStackDepth;
N	}
N	#endif /* portUSING_MPU_WRAPPERS */
N
N	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
X	#if( 0 != 0 )
S	{
S		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
S		{
S			pxTCB->pvThreadLocalStoragePointers[ x ] = NULL;
S		}
S	}
N	#endif
N
N	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
X	#if ( 1 == 1 )
N	{
N		pxTCB->ulNotifiedValue = 0;
N		pxTCB->eNotifyState = eNotWaitingNotification;
N	}
N	#endif
N
N	#if ( configUSE_NEWLIB_REENTRANT == 1 )
X	#if ( 0 == 1 )
S	{
S		/* Initialise this task's Newlib reent structure. */
S		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
S	}
N	#endif /* configUSE_NEWLIB_REENTRANT */
N}
N/*-----------------------------------------------------------*/
N
N#if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
X#if ( 0 != 0 )
S
S	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue )
S	{
S	TCB_t *pxTCB;
S
S		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
S		{
S			pxTCB = prvGetTCBFromHandle( xTaskToSet );
S			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
S		}
S	}
S
N#endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
N/*-----------------------------------------------------------*/
N
N#if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
X#if ( 0 != 0 )
S
S	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
S	{
S	void *pvReturn = NULL;
S	TCB_t *pxTCB;
S
S		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
S		{
S			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
S			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
S		}
S		else
S		{
S			pvReturn = NULL;
S		}
S
S		return pvReturn;
S	}
S
N#endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
N/*-----------------------------------------------------------*/
N
N#if ( portUSING_MPU_WRAPPERS == 1 )
X#if ( 0 == 1 )
S
S	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
S	{
S	TCB_t *pxTCB;
S
S		/* If null is passed in here then we are modifying the MPU settings of
S		the calling task. */
S		pxTCB = prvGetTCBFromHandle( xTaskToModify );
S
S        vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
S	}
S
N#endif /* portUSING_MPU_WRAPPERS */
N/*-----------------------------------------------------------*/
N
Nstatic void prvInitialiseTaskLists( void )
N{
NUBaseType_t uxPriority;
N
N	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
X	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) ( 6 ); uxPriority++ )
N	{
N		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
N	}
N
N	vListInitialise( &xDelayedTaskList1 );
N	vListInitialise( &xDelayedTaskList2 );
N	vListInitialise( &xPendingReadyList );
N
N	#if ( INCLUDE_vTaskDelete == 1 )
X	#if ( 1 == 1 )
N	{
N		vListInitialise( &xTasksWaitingTermination );
N	}
N	#endif /* INCLUDE_vTaskDelete */
N
N	#if ( INCLUDE_vTaskSuspend == 1 )
X	#if ( 1 == 1 )
N	{
N		vListInitialise( &xSuspendedTaskList );
N	}
N	#endif /* INCLUDE_vTaskSuspend */
N
N	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
N	using list2. */
N	pxDelayedTaskList = &xDelayedTaskList1;
N	pxOverflowDelayedTaskList = &xDelayedTaskList2;
N}
N/*-----------------------------------------------------------*/
N
Nstatic void prvCheckTasksWaitingTermination( void )
N{
N	#if ( INCLUDE_vTaskDelete == 1 )
X	#if ( 1 == 1 )
N	{
N		BaseType_t xListIsEmpty;
N
N		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
N		too often in the idle task. */
N		while( uxTasksDeleted > ( UBaseType_t ) 0U )
N		{
N			vTaskSuspendAll();
N			{
N				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
X				xListIsEmpty = ( ( BaseType_t ) ( ( &xTasksWaitingTermination )->uxNumberOfItems == ( UBaseType_t ) 0 ) );
N			}
N			( void ) xTaskResumeAll();
N
N			if( xListIsEmpty == pdFALSE )
X			if( xListIsEmpty == ( ( BaseType_t ) 0 ) )
N			{
N				TCB_t *pxTCB;
N
N				taskENTER_CRITICAL();
X				vPortEnterCritical();
N				{
N					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
X					pxTCB = ( TCB_t * ) ( (&( ( ( &xTasksWaitingTermination ) )->xListEnd ))->pxNext->pvOwner );
N					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
N					--uxCurrentNumberOfTasks;
N					--uxTasksDeleted;
N				}
N				taskEXIT_CRITICAL();
X				vPortExitCritical();
N
N				prvDeleteTCB( pxTCB );
N			}
N			else
N			{
N				mtCOVERAGE_TEST_MARKER();
X				;
N			}
N		}
N	}
N	#endif /* vTaskDelete */
N}
N/*-----------------------------------------------------------*/
N
Nstatic void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
N{
N	/* The list item will be inserted in wake time order. */
N	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
X	( ( &( pxCurrentTCB->xGenericListItem ) )->xItemValue = ( xTimeToWake ) );
N
N	if( xTimeToWake < xTickCount )
N	{
N		/* Wake time has overflowed.  Place this item in the overflow list. */
N		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
N	}
N	else
N	{
N		/* The wake time has not overflowed, so the current block list is used. */
N		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
N
N		/* If the task entering the blocked state was placed at the head of the
N		list of blocked tasks then xNextTaskUnblockTime needs to be updated
N		too. */
N		if( xTimeToWake < xNextTaskUnblockTime )
N		{
N			xNextTaskUnblockTime = xTimeToWake;
N		}
N		else
N		{
N			mtCOVERAGE_TEST_MARKER();
X			;
N		}
N	}
N}
N/*-----------------------------------------------------------*/
N
Nstatic TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
N{
NTCB_t *pxNewTCB;
N
N	/* If the stack grows down then allocate the stack then the TCB so the stack
N	does not grow into the TCB.  Likewise if the stack grows up then allocate
N	the TCB then the stack. */
N	#if( portSTACK_GROWTH > 0 )
X	#if( ( -1 ) > 0 )
S	{
S		/* Allocate space for the TCB.  Where the memory comes from depends on
S		the implementation of the port malloc function. */
S		pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
S
S		if( pxNewTCB != NULL )
S		{
S			/* Allocate space for the stack used by the task being created.
S			The base of the stack memory stored in the TCB so the task can
S			be deleted later if required. */
S			pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
S
S			if( pxNewTCB->pxStack == NULL )
S			{
S				/* Could not allocate the stack.  Delete the allocated TCB. */
S				vPortFree( pxNewTCB );
S				pxNewTCB = NULL;
S			}
S		}
S	}
N	#else /* portSTACK_GROWTH */
N	{
N	StackType_t *pxStack;
N
N		/* Allocate space for the stack used by the task being created. */
N		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
X		pxStack = ( StackType_t * ) ( ( ( puxStackBuffer ) == 0 ) ? ( pvPortMalloc( ( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ) ) ) : ( puxStackBuffer ) );  
N
N		if( pxStack != NULL )
X		if( pxStack != 0 )
N		{
N			/* Allocate space for the TCB.  Where the memory comes from depends
N			on the implementation of the port malloc function. */
N			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
N
N			if( pxNewTCB != NULL )
X			if( pxNewTCB != 0 )
N			{
N				/* Store the stack location in the TCB. */
N				pxNewTCB->pxStack = pxStack;
N			}
N			else
N			{
N				/* The stack cannot be used as the TCB was not created.  Free it
N				again. */
N				vPortFree( pxStack );
N			}
N		}
N		else
N		{
N			pxNewTCB = NULL;
X			pxNewTCB = 0;
N		}
N	}
N	#endif /* portSTACK_GROWTH */
N
N	if( pxNewTCB != NULL )
X	if( pxNewTCB != 0 )
N	{
N		/* Avoid dependency on memset() if it is not required. */
N		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
X		#if( ( 0 > 1 ) || ( 0 == 1 ) || ( 0 == 1 ) )
S		{
S			/* Just to help debugging. */
S			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
S		}
N		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
N	}
N
N	return pxNewTCB;
N}
N/*-----------------------------------------------------------*/
N
N#if ( configUSE_TRACE_FACILITY == 1 )
X#if ( 0 == 1 )
S
S	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
S	{
S	volatile TCB_t *pxNextTCB, *pxFirstTCB;
S	UBaseType_t uxTask = 0;
S
S		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
S		{
S			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
S
S			/* Populate an TaskStatus_t structure within the
S			pxTaskStatusArray array for each task that is referenced from
S			pxList.  See the definition of TaskStatus_t in task.h for the
S			meaning of each TaskStatus_t structure member. */
S			do
S			{
S				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
S
S				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
S				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
S				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
S				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
S				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
S
S				#if ( INCLUDE_vTaskSuspend == 1 )
S				{
S					/* If the task is in the suspended list then there is a chance
S					it is actually just blocked indefinitely - so really it should
S					be reported as being in the Blocked state. */
S					if( eState == eSuspended )
S					{
S						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
S						{
S							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
S						}
S					}
S				}
S				#endif /* INCLUDE_vTaskSuspend */
S
S				#if ( configUSE_MUTEXES == 1 )
S				{
S					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
S				}
S				#else
S				{
S					pxTaskStatusArray[ uxTask ].uxBasePriority = 0;
S				}
S				#endif
S
S				#if ( configGENERATE_RUN_TIME_STATS == 1 )
S				{
S					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
S				}
S				#else
S				{
S					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = 0;
S				}
S				#endif
S
S				#if ( portSTACK_GROWTH > 0 )
S				{
S					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
S				}
S				#else
S				{
S					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
S				}
S				#endif
S
S				uxTask++;
S
S			} while( pxNextTCB != pxFirstTCB );
S		}
S		else
S		{
S			mtCOVERAGE_TEST_MARKER();
S		}
S
S		return uxTask;
S	}
S
N#endif /* configUSE_TRACE_FACILITY */
N/*-----------------------------------------------------------*/
N
N#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
X#if ( ( 0 == 1 ) || ( 0 == 1 ) )
S
S	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
S	{
S	uint32_t ulCount = 0U;
S
S		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
S		{
S			pucStackByte -= portSTACK_GROWTH;
S			ulCount++;
S		}
S
S		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
S
S		return ( uint16_t ) ulCount;
S	}
S
N#endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
N/*-----------------------------------------------------------*/
N
N#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
X#if ( 0 == 1 )
S
S	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
S	{
S	TCB_t *pxTCB;
S	uint8_t *pucEndOfStack;
S	UBaseType_t uxReturn;
S
S		pxTCB = prvGetTCBFromHandle( xTask );
S
S		#if portSTACK_GROWTH < 0
S		{
S			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
S		}
S		#else
S		{
S			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
S		}
S		#endif
S
S		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
S
S		return uxReturn;
S	}
S
N#endif /* INCLUDE_uxTaskGetStackHighWaterMark */
N/*-----------------------------------------------------------*/
N
N#if ( INCLUDE_vTaskDelete == 1 )
X#if ( 1 == 1 )
N
N	static void prvDeleteTCB( TCB_t *pxTCB )
N	{
N		/* This call is required specifically for the TriCore port.  It must be
N		above the vPortFree() calls.  The call is also used by ports/demos that
N		want to allocate and clean RAM statically. */
N		portCLEAN_UP_TCB( pxTCB );
X		( void ) pxTCB;
N
N		/* Free up the memory allocated by the scheduler for the task.  It is up
N		to the task to free any memory allocated at the application level. */
N		#if ( configUSE_NEWLIB_REENTRANT == 1 )
X		#if ( 0 == 1 )
S		{
S			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
S		}
N		#endif /* configUSE_NEWLIB_REENTRANT */
N
N		#if( portUSING_MPU_WRAPPERS == 1 )
X		#if( 0 == 1 )
S		{
S			/* Only free the stack if it was allocated dynamically in the first
S			place. */
S			if( pxTCB->xUsingStaticallyAllocatedStack == pdFALSE )
S			{
S				vPortFreeAligned( pxTCB->pxStack );
S			}
S		}
N		#else
N		{
N			vPortFreeAligned( pxTCB->pxStack );
X			vPortFree( pxTCB->pxStack );
N		}
N		#endif
N
N		vPortFree( pxTCB );
N	}
N
N#endif /* INCLUDE_vTaskDelete */
N/*-----------------------------------------------------------*/
N
Nstatic void prvResetNextTaskUnblockTime( void )
N{
NTCB_t *pxTCB;
N
N	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
X	if( ( ( BaseType_t ) ( ( pxDelayedTaskList )->uxNumberOfItems == ( UBaseType_t ) 0 ) ) != ( ( BaseType_t ) 0 ) )
N	{
N		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
N		the maximum possible value so it is	extremely unlikely that the
N		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
N		there is an item in the delayed list. */
N		xNextTaskUnblockTime = portMAX_DELAY;
X		xNextTaskUnblockTime = ( TickType_t ) 0xffffffffUL;
N	}
N	else
N	{
N		/* The new current delayed list is not empty, get the value of
N		the item at the head of the delayed list.  This is the time at
N		which the task at the head of the delayed list should be removed
N		from the Blocked state. */
N		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
X		( pxTCB ) = ( TCB_t * ) ( (&( ( pxDelayedTaskList )->xListEnd ))->pxNext->pvOwner );
N		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
X		xNextTaskUnblockTime = ( ( &( ( pxTCB )->xGenericListItem ) )->xItemValue );
N	}
N}
N/*-----------------------------------------------------------*/
N
N#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
X#if ( ( 0 == 1 ) || ( 1 == 1 ) )
N
N	TaskHandle_t xTaskGetCurrentTaskHandle( void )
N	{
N	TaskHandle_t xReturn;
N
N		/* A critical section is not required as this is not called from
N		an interrupt and the current TCB will always be the same for any
N		individual execution thread. */
N		xReturn = pxCurrentTCB;
N
N		return xReturn;
N	}
N
N#endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
N/*-----------------------------------------------------------*/
N
N#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
X#if ( ( 0 == 1 ) || ( 1 == 1 ) )
N
N	BaseType_t xTaskGetSchedulerState( void )
N	{
N	BaseType_t xReturn;
N
N		if( xSchedulerRunning == pdFALSE )
X		if( xSchedulerRunning == ( ( BaseType_t ) 0 ) )
N		{
N			xReturn = taskSCHEDULER_NOT_STARTED;
X			xReturn = ( ( BaseType_t ) 1 );
N		}
N		else
N		{
N			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
X			if( uxSchedulerSuspended == ( UBaseType_t ) ( ( BaseType_t ) 0 ) )
N			{
N				xReturn = taskSCHEDULER_RUNNING;
X				xReturn = ( ( BaseType_t ) 2 );
N			}
N			else
N			{
N				xReturn = taskSCHEDULER_SUSPENDED;
X				xReturn = ( ( BaseType_t ) 0 );
N			}
N		}
N
N		return xReturn;
N	}
N
N#endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
N/*-----------------------------------------------------------*/
N
N#if ( configUSE_MUTEXES == 1 )
X#if ( 1 == 1 )
N
N	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
N	{
N	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
N
N		/* If the mutex was given back by an interrupt while the queue was
N		locked then the mutex holder might now be NULL. */
N		if( pxMutexHolder != NULL )
X		if( pxMutexHolder != 0 )
N		{
N			/* If the holder of the mutex has a priority below the priority of
N			the task attempting to obtain the mutex then it will temporarily
N			inherit the priority of the task attempting to obtain the mutex. */
N			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
N			{
N				/* Adjust the mutex holder state to account for its new
N				priority.  Only reset the event list item value if the value is
N				not	being used for anything else. */
N				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
X				if( ( ( ( &( pxTCB->xEventListItem ) )->xItemValue ) & 0x80000000UL ) == 0UL )
N				{
N					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
X					( ( &( pxTCB->xEventListItem ) )->xItemValue = ( ( TickType_t ) ( 6 ) - ( TickType_t ) pxCurrentTCB->uxPriority ) );  
N				}
N				else
N				{
N					mtCOVERAGE_TEST_MARKER();
X					;
N				}
N
N				/* If the task being modified is in the ready state it will need
N				to be moved into a new list. */
N				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
X				if( ( ( BaseType_t ) ( ( &( pxTCB->xGenericListItem ) )->pvContainer == ( void * ) ( &( pxReadyTasksLists[ pxTCB->uxPriority ] ) ) ) ) != ( ( BaseType_t ) 0 ) )
N				{
N					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
N					{
N						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
X						{ if( ( ( &( pxReadyTasksLists[ ( pxTCB->uxPriority ) ] ) )->uxNumberOfItems ) == ( UBaseType_t ) 0 ) { ( ( uxTopReadyPriority ) ) &= ~( 1UL << ( ( pxTCB->uxPriority ) ) ); } };
N					}
N					else
N					{
N						mtCOVERAGE_TEST_MARKER();
X						;
N					}
N
N					/* Inherit the priority before being moved into the new list. */
N					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
N					prvAddTaskToReadyList( pxTCB );
X					; ( uxTopReadyPriority ) |= ( 1UL << ( ( pxTCB )->uxPriority ) ); vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) );
N				}
N				else
N				{
N					/* Just inherit the priority. */
N					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
N				}
N
N				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
X				;
N			}
N			else
N			{
N				mtCOVERAGE_TEST_MARKER();
X				;
N			}
N		}
N		else
N		{
N			mtCOVERAGE_TEST_MARKER();
X			;
N		}
N	}
N
N#endif /* configUSE_MUTEXES */
N/*-----------------------------------------------------------*/
N
N#if ( configUSE_MUTEXES == 1 )
X#if ( 1 == 1 )
N
N	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
N	{
N	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
N	BaseType_t xReturn = pdFALSE;
X	BaseType_t xReturn = ( ( BaseType_t ) 0 );
N
N		if( pxMutexHolder != NULL )
X		if( pxMutexHolder != 0 )
N		{
N			/* A task can only have an inherited priority if it holds the mutex.
N			If the mutex is held by a task then it cannot be given from an
N			interrupt, and if a mutex is given by the holding task then it must
N			be the running state task. */
N			configASSERT( pxTCB == pxCurrentTCB );
X			if( ( pxTCB == pxCurrentTCB ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N
N			configASSERT( pxTCB->uxMutexesHeld );
X			if( ( pxTCB->uxMutexesHeld ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N			( pxTCB->uxMutexesHeld )--;
N
N			/* Has the holder of the mutex inherited the priority of another
N			task? */
N			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
N			{
N				/* Only disinherit if no other mutexes are held. */
N				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
N				{
N					/* A task can only have an inherited priority if it holds
N					the mutex.  If the mutex is held by a task then it cannot be
N					given from an interrupt, and if a mutex is given by the
N					holding	task then it must be the running state task.  Remove
N					the	holding task from the ready	list. */
N					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
N					{
N						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
X						{ if( ( ( &( pxReadyTasksLists[ ( pxTCB->uxPriority ) ] ) )->uxNumberOfItems ) == ( UBaseType_t ) 0 ) { ( ( uxTopReadyPriority ) ) &= ~( 1UL << ( ( pxTCB->uxPriority ) ) ); } };
N					}
N					else
N					{
N						mtCOVERAGE_TEST_MARKER();
X						;
N					}
N
N					/* Disinherit the priority before adding the task into the
N					new	ready list. */
N					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
X					;
N					pxTCB->uxPriority = pxTCB->uxBasePriority;
N
N					/* Reset the event list item value.  It cannot be in use for
N					any other purpose if this task is running, and it must be
N					running to give back the mutex. */
N					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
X					( ( &( pxTCB->xEventListItem ) )->xItemValue = ( ( TickType_t ) ( 6 ) - ( TickType_t ) pxTCB->uxPriority ) );  
N					prvAddTaskToReadyList( pxTCB );
X					; ( uxTopReadyPriority ) |= ( 1UL << ( ( pxTCB )->uxPriority ) ); vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) );
N
N					/* Return true to indicate that a context switch is required.
N					This is only actually required in the corner case whereby
N					multiple mutexes were held and the mutexes were given back
N					in an order different to that in which they were taken.
N					If a context switch did not occur when the first mutex was
N					returned, even if a task was waiting on it, then a context
N					switch should occur when the last mutex is returned whether
N					a task is waiting on it or not. */
N					xReturn = pdTRUE;
X					xReturn = ( ( BaseType_t ) 1 );
N				}
N				else
N				{
N					mtCOVERAGE_TEST_MARKER();
X					;
N				}
N			}
N			else
N			{
N				mtCOVERAGE_TEST_MARKER();
X				;
N			}
N		}
N		else
N		{
N			mtCOVERAGE_TEST_MARKER();
X			;
N		}
N
N		return xReturn;
N	}
N
N#endif /* configUSE_MUTEXES */
N/*-----------------------------------------------------------*/
N
N#if ( portCRITICAL_NESTING_IN_TCB == 1 )
X#if ( 0 == 1 )
S
S	void vTaskEnterCritical( void )
S	{
S		portDISABLE_INTERRUPTS();
S
S		if( xSchedulerRunning != pdFALSE )
S		{
S			( pxCurrentTCB->uxCriticalNesting )++;
S
S			/* This is not the interrupt safe version of the enter critical
S			function so	assert() if it is being called from an interrupt
S			context.  Only API functions that end in "FromISR" can be used in an
S			interrupt.  Only assert if the critical nesting count is 1 to
S			protect against recursive calls if the assert function also uses a
S			critical section. */
S			if( pxCurrentTCB->uxCriticalNesting == 1 )
S			{
S				portASSERT_IF_IN_ISR();
S			}
S		}
S		else
S		{
S			mtCOVERAGE_TEST_MARKER();
S		}
S	}
S
N#endif /* portCRITICAL_NESTING_IN_TCB */
N/*-----------------------------------------------------------*/
N
N#if ( portCRITICAL_NESTING_IN_TCB == 1 )
X#if ( 0 == 1 )
S
S	void vTaskExitCritical( void )
S	{
S		if( xSchedulerRunning != pdFALSE )
S		{
S			if( pxCurrentTCB->uxCriticalNesting > 0U )
S			{
S				( pxCurrentTCB->uxCriticalNesting )--;
S
S				if( pxCurrentTCB->uxCriticalNesting == 0U )
S				{
S					portENABLE_INTERRUPTS();
S				}
S				else
S				{
S					mtCOVERAGE_TEST_MARKER();
S				}
S			}
S			else
S			{
S				mtCOVERAGE_TEST_MARKER();
S			}
S		}
S		else
S		{
S			mtCOVERAGE_TEST_MARKER();
S		}
S	}
S
N#endif /* portCRITICAL_NESTING_IN_TCB */
N/*-----------------------------------------------------------*/
N
N#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
X#if ( ( 0 == 1 ) && ( 0 > 0 ) )
S
S	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
S	{
S	size_t x;
S
S		/* Start by copying the entire string. */
S		strcpy( pcBuffer, pcTaskName );
S
S		/* Pad the end of the string with spaces to ensure columns line up when
S		printed out. */
S		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
S		{
S			pcBuffer[ x ] = ' ';
S		}
S
S		/* Terminate. */
S		pcBuffer[ x ] = 0x00;
S
S		/* Return the new end of string. */
S		return &( pcBuffer[ x ] );
S	}
S
N#endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
N/*-----------------------------------------------------------*/
N
N#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
X#if ( ( 0 == 1 ) && ( 0 > 0 ) )
S
S	void vTaskList( char * pcWriteBuffer )
S	{
S	TaskStatus_t *pxTaskStatusArray;
S	volatile UBaseType_t uxArraySize, x;
S	char cStatus;
S
S		/*
S		 * PLEASE NOTE:
S		 *
S		 * This function is provided for convenience only, and is used by many
S		 * of the demo applications.  Do not consider it to be part of the
S		 * scheduler.
S		 *
S		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
S		 * uxTaskGetSystemState() output into a human readable table that
S		 * displays task names, states and stack usage.
S		 *
S		 * vTaskList() has a dependency on the sprintf() C library function that
S		 * might bloat the code size, use a lot of stack, and provide different
S		 * results on different platforms.  An alternative, tiny, third party,
S		 * and limited functionality implementation of sprintf() is provided in
S		 * many of the FreeRTOS/Demo sub-directories in a file called
S		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
S		 * snprintf() implementation!).
S		 *
S		 * It is recommended that production systems call uxTaskGetSystemState()
S		 * directly to get access to raw stats data, rather than indirectly
S		 * through a call to vTaskList().
S		 */
S
S
S		/* Make sure the write buffer does not contain a string. */
S		*pcWriteBuffer = 0x00;
S
S		/* Take a snapshot of the number of tasks in case it changes while this
S		function is executing. */
S		uxArraySize = uxCurrentNumberOfTasks;
S
S		/* Allocate an array index for each task. */
S		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
S
S		if( pxTaskStatusArray != NULL )
S		{
S			/* Generate the (binary) data. */
S			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
S
S			/* Create a human readable table from the binary data. */
S			for( x = 0; x < uxArraySize; x++ )
S			{
S				switch( pxTaskStatusArray[ x ].eCurrentState )
S				{
S					case eReady:		cStatus = tskREADY_CHAR;
S										break;
S
S					case eBlocked:		cStatus = tskBLOCKED_CHAR;
S										break;
S
S					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
S										break;
S
S					case eDeleted:		cStatus = tskDELETED_CHAR;
S										break;
S
S					default:			/* Should not get here, but it is included
S										to prevent static checking errors. */
S										cStatus = 0x00;
S										break;
S				}
S
S				/* Write the task name to the string, padding with spaces so it
S				can be printed in tabular form more easily. */
S				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
S
S				/* Write the rest of the string. */
S				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
S				pcWriteBuffer += strlen( pcWriteBuffer );
S			}
S
S			/* Free the array again. */
S			vPortFree( pxTaskStatusArray );
S		}
S		else
S		{
S			mtCOVERAGE_TEST_MARKER();
S		}
S	}
S
N#endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
N/*----------------------------------------------------------*/
N
N#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
X#if ( ( 0 == 1 ) && ( 0 > 0 ) )
S
S	void vTaskGetRunTimeStats( char *pcWriteBuffer )
S	{
S	TaskStatus_t *pxTaskStatusArray;
S	volatile UBaseType_t uxArraySize, x;
S	uint32_t ulTotalTime, ulStatsAsPercentage;
S
S		#if( configUSE_TRACE_FACILITY != 1 )
S		{
S			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTimeStats().
S		}
S		#endif
S
S		/*
S		 * PLEASE NOTE:
S		 *
S		 * This function is provided for convenience only, and is used by many
S		 * of the demo applications.  Do not consider it to be part of the
S		 * scheduler.
S		 *
S		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
S		 * of the uxTaskGetSystemState() output into a human readable table that
S		 * displays the amount of time each task has spent in the Running state
S		 * in both absolute and percentage terms.
S		 *
S		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
S		 * function that might bloat the code size, use a lot of stack, and
S		 * provide different results on different platforms.  An alternative,
S		 * tiny, third party, and limited functionality implementation of
S		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
S		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
S		 * a full snprintf() implementation!).
S		 *
S		 * It is recommended that production systems call uxTaskGetSystemState()
S		 * directly to get access to raw stats data, rather than indirectly
S		 * through a call to vTaskGetRunTimeStats().
S		 */
S
S		/* Make sure the write buffer does not contain a string. */
S		*pcWriteBuffer = 0x00;
S
S		/* Take a snapshot of the number of tasks in case it changes while this
S		function is executing. */
S		uxArraySize = uxCurrentNumberOfTasks;
S
S		/* Allocate an array index for each task. */
S		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
S
S		if( pxTaskStatusArray != NULL )
S		{
S			/* Generate the (binary) data. */
S			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
S
S			/* For percentage calculations. */
S			ulTotalTime /= 100UL;
S
S			/* Avoid divide by zero errors. */
S			if( ulTotalTime > 0 )
S			{
S				/* Create a human readable table from the binary data. */
S				for( x = 0; x < uxArraySize; x++ )
S				{
S					/* What percentage of the total run time has the task used?
S					This will always be rounded down to the nearest integer.
S					ulTotalRunTimeDiv100 has already been divided by 100. */
S					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
S
S					/* Write the task name to the string, padding with
S					spaces so it can be printed in tabular form more
S					easily. */
S					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
S
S					if( ulStatsAsPercentage > 0UL )
S					{
S						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
S						{
S							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulStatsAsPercentage );
S						}
S						#else
S						{
S							/* sizeof( int ) == sizeof( long ) so a smaller
S							printf() library can be used. */
S							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
S						}
S						#endif
S					}
S					else
S					{
S						/* If the percentage is zero here then the task has
S						consumed less than 1% of the total run time. */
S						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
S						{
S							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
S						}
S						#else
S						{
S							/* sizeof( int ) == sizeof( long ) so a smaller
S							printf() library can be used. */
S							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
S						}
S						#endif
S					}
S
S					pcWriteBuffer += strlen( pcWriteBuffer );
S				}
S			}
S			else
S			{
S				mtCOVERAGE_TEST_MARKER();
S			}
S
S			/* Free the array again. */
S			vPortFree( pxTaskStatusArray );
S		}
S		else
S		{
S			mtCOVERAGE_TEST_MARKER();
S		}
S	}
S
N#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
N/*-----------------------------------------------------------*/
N
NTickType_t uxTaskResetEventItemValue( void )
N{
NTickType_t uxReturn;
N
N	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
X	uxReturn = ( ( &( pxCurrentTCB->xEventListItem ) )->xItemValue );
N
N	/* Reset the event list item to its normal value - so it can be used with
N	queues and semaphores. */
N	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
X	( ( &( pxCurrentTCB->xEventListItem ) )->xItemValue = ( ( ( TickType_t ) ( 6 ) - ( TickType_t ) pxCurrentTCB->uxPriority ) ) );  
N
N	return uxReturn;
N}
N/*-----------------------------------------------------------*/
N
N#if ( configUSE_MUTEXES == 1 )
X#if ( 1 == 1 )
N
N	void *pvTaskIncrementMutexHeldCount( void )
N	{
N		/* If xSemaphoreCreateMutex() is called before any tasks have been created
N		then pxCurrentTCB will be NULL. */
N		if( pxCurrentTCB != NULL )
X		if( pxCurrentTCB != 0 )
N		{
N			( pxCurrentTCB->uxMutexesHeld )++;
N		}
N
N		return pxCurrentTCB;
N	}
N
N#endif /* configUSE_MUTEXES */
N/*-----------------------------------------------------------*/
N
N#if( configUSE_TASK_NOTIFICATIONS == 1 )
X#if( 1 == 1 )
N
N	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
N	{
N	TickType_t xTimeToWake;
N	uint32_t ulReturn;
N
N		taskENTER_CRITICAL();
X		vPortEnterCritical();
N		{
N			/* Only block if the notification count is not already non-zero. */
N			if( pxCurrentTCB->ulNotifiedValue == 0UL )
N			{
N				/* Mark this task as waiting for a notification. */
N				pxCurrentTCB->eNotifyState = eWaitingNotification;
N
N				if( xTicksToWait > ( TickType_t ) 0 )
N				{
N					/* The task is going to block.  First it must be removed
N					from the ready list. */
N					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
N					{
N						/* The current task must be in a ready list, so there is
N						no need to check, and the port reset macro can be called
N						directly. */
N						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
X						( uxTopReadyPriority ) &= ~( 1UL << ( pxCurrentTCB->uxPriority ) );
N					}
N					else
N					{
N						mtCOVERAGE_TEST_MARKER();
X						;
N					}
N
N					#if ( INCLUDE_vTaskSuspend == 1 )
X					#if ( 1 == 1 )
N					{
N						if( xTicksToWait == portMAX_DELAY )
X						if( xTicksToWait == ( TickType_t ) 0xffffffffUL )
N						{
N							/* Add the task to the suspended task list instead
N							of a delayed task list to ensure the task is not
N							woken by a timing event.  It will block
N							indefinitely. */
N							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
N						}
N						else
N						{
N							/* Calculate the time at which the task should be
N							woken if no notification events occur.  This may
N							overflow but this doesn't matter, the scheduler will
N							handle it. */
N							xTimeToWake = xTickCount + xTicksToWait;
N							prvAddCurrentTaskToDelayedList( xTimeToWake );
N						}
N					}
N					#else /* INCLUDE_vTaskSuspend */
S					{
S							/* Calculate the time at which the task should be
S							woken if the event does not occur.  This may
S							overflow but this doesn't matter, the scheduler will
S							handle it. */
S							xTimeToWake = xTickCount + xTicksToWait;
S							prvAddCurrentTaskToDelayedList( xTimeToWake );
S					}
N					#endif /* INCLUDE_vTaskSuspend */
N
N					traceTASK_NOTIFY_TAKE_BLOCK();
X					;
N
N					/* All ports are written to allow a yield in a critical
N					section (some will yield immediately, others wait until the
N					critical section exits) - but it is not something that
N					application code should ever do. */
N					portYIELD_WITHIN_API();
X					vPortYield();
N				}
N				else
N				{
N					mtCOVERAGE_TEST_MARKER();
X					;
N				}
N			}
N			else
N			{
N				mtCOVERAGE_TEST_MARKER();
X				;
N			}
N		}
N		taskEXIT_CRITICAL();
X		vPortExitCritical();
N
N		taskENTER_CRITICAL();
X		vPortEnterCritical();
N		{
N			traceTASK_NOTIFY_TAKE();
X			;
N			ulReturn = pxCurrentTCB->ulNotifiedValue;
N
N			if( ulReturn != 0UL )
N			{
N				if( xClearCountOnExit != pdFALSE )
X				if( xClearCountOnExit != ( ( BaseType_t ) 0 ) )
N				{
N					pxCurrentTCB->ulNotifiedValue = 0UL;
N				}
N				else
N				{
N					( pxCurrentTCB->ulNotifiedValue )--;
N				}
N			}
N			else
N			{
N				mtCOVERAGE_TEST_MARKER();
X				;
N			}
N
N			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
N		}
N		taskEXIT_CRITICAL();
X		vPortExitCritical();
N
N		return ulReturn;
N	}
N
N#endif /* configUSE_TASK_NOTIFICATIONS */
N/*-----------------------------------------------------------*/
N
N#if( configUSE_TASK_NOTIFICATIONS == 1 )
X#if( 1 == 1 )
N
N	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
N	{
N	TickType_t xTimeToWake;
N	BaseType_t xReturn;
N
N		taskENTER_CRITICAL();
X		vPortEnterCritical();
N		{
N			/* Only block if a notification is not already pending. */
N			if( pxCurrentTCB->eNotifyState != eNotified )
N			{
N				/* Clear bits in the task's notification value as bits may get
N				set	by the notifying task or interrupt.  This can be used to
N				clear the value to zero. */
N				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
N
N				/* Mark this task as waiting for a notification. */
N				pxCurrentTCB->eNotifyState = eWaitingNotification;
N
N				if( xTicksToWait > ( TickType_t ) 0 )
N				{
N					/* The task is going to block.  First it must be removed
N					from the	ready list. */
N					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
N					{
N						/* The current task must be in a ready list, so there is
N						no need to check, and the port reset macro can be called
N						directly. */
N						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
X						( uxTopReadyPriority ) &= ~( 1UL << ( pxCurrentTCB->uxPriority ) );
N					}
N					else
N					{
N						mtCOVERAGE_TEST_MARKER();
X						;
N					}
N
N					#if ( INCLUDE_vTaskSuspend == 1 )
X					#if ( 1 == 1 )
N					{
N						if( xTicksToWait == portMAX_DELAY )
X						if( xTicksToWait == ( TickType_t ) 0xffffffffUL )
N						{
N							/* Add the task to the suspended task list instead
N							of a delayed task list to ensure the task is not
N							woken by a timing event.  It will block
N							indefinitely. */
N							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
N						}
N						else
N						{
N							/* Calculate the time at which the task should be
N							woken if no notification events occur.  This may
N							overflow but this doesn't matter, the scheduler will
N							handle it. */
N							xTimeToWake = xTickCount + xTicksToWait;
N							prvAddCurrentTaskToDelayedList( xTimeToWake );
N						}
N					}
N					#else /* INCLUDE_vTaskSuspend */
S					{
S							/* Calculate the time at which the task should be
S							woken if the event does not occur.  This may
S							overflow but this doesn't matter, the scheduler will
S							handle it. */
S							xTimeToWake = xTickCount + xTicksToWait;
S							prvAddCurrentTaskToDelayedList( xTimeToWake );
S					}
N					#endif /* INCLUDE_vTaskSuspend */
N
N					traceTASK_NOTIFY_WAIT_BLOCK();
X					;
N
N					/* All ports are written to allow a yield in a critical
N					section (some will yield immediately, others wait until the
N					critical section exits) - but it is not something that
N					application code should ever do. */
N					portYIELD_WITHIN_API();
X					vPortYield();
N				}
N				else
N				{
N					mtCOVERAGE_TEST_MARKER();
X					;
N				}
N			}
N			else
N			{
N				mtCOVERAGE_TEST_MARKER();
X				;
N			}
N		}
N		taskEXIT_CRITICAL();
X		vPortExitCritical();
N
N		taskENTER_CRITICAL();
X		vPortEnterCritical();
N		{
N			traceTASK_NOTIFY_WAIT();
X			;
N
N			if( pulNotificationValue != NULL )
X			if( pulNotificationValue != 0 )
N			{
N				/* Output the current notification value, which may or may not
N				have changed. */
N				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
N			}
N
N			/* If eNotifyValue is set then either the task never entered the
N			blocked state (because a notification was already pending) or the
N			task unblocked because of a notification.  Otherwise the task
N			unblocked because of a timeout. */
N			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
N			{
N				/* A notification was not received. */
N				xReturn = pdFALSE;
X				xReturn = ( ( BaseType_t ) 0 );
N			}
N			else
N			{
N				/* A notification was already pending or a notification was
N				received while the task was waiting. */
N				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
N				xReturn = pdTRUE;
X				xReturn = ( ( BaseType_t ) 1 );
N			}
N
N			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
N		}
N		taskEXIT_CRITICAL();
X		vPortExitCritical();
N
N		return xReturn;
N	}
N
N#endif /* configUSE_TASK_NOTIFICATIONS */
N/*-----------------------------------------------------------*/
N
N#if( configUSE_TASK_NOTIFICATIONS == 1 )
X#if( 1 == 1 )
N
N	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
N	{
N	TCB_t * pxTCB;
N	eNotifyValue eOriginalNotifyState;
N	BaseType_t xReturn = pdPASS;
X	BaseType_t xReturn = ( ( ( BaseType_t ) 1 ) );
N
N		configASSERT( xTaskToNotify );
X		if( ( xTaskToNotify ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N		pxTCB = ( TCB_t * ) xTaskToNotify;
N
N		taskENTER_CRITICAL();
X		vPortEnterCritical();
N		{
N			if( pulPreviousNotificationValue != NULL )
X			if( pulPreviousNotificationValue != 0 )
N			{
N				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
N			}
N
N			eOriginalNotifyState = pxTCB->eNotifyState;
N
N			pxTCB->eNotifyState = eNotified;
N
N			switch( eAction )
N			{
N				case eSetBits	:
N					pxTCB->ulNotifiedValue |= ulValue;
N					break;
N
N				case eIncrement	:
N					( pxTCB->ulNotifiedValue )++;
N					break;
N
N				case eSetValueWithOverwrite	:
N					pxTCB->ulNotifiedValue = ulValue;
N					break;
N
N				case eSetValueWithoutOverwrite :
N					if( eOriginalNotifyState != eNotified )
N					{
N						pxTCB->ulNotifiedValue = ulValue;
N					}
N					else
N					{
N						/* The value could not be written to the task. */
N						xReturn = pdFAIL;
X						xReturn = ( ( ( BaseType_t ) 0 ) );
N					}
N					break;
N
N				case eNoAction:
N					/* The task is being notified without its notify value being
N					updated. */
N					break;
N			}
N
N			traceTASK_NOTIFY();
X			;
N
N			/* If the task is in the blocked state specifically to wait for a
N			notification then unblock it now. */
N			if( eOriginalNotifyState == eWaitingNotification )
N			{
N				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
N				prvAddTaskToReadyList( pxTCB );
X				; ( uxTopReadyPriority ) |= ( 1UL << ( ( pxTCB )->uxPriority ) ); vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) );
N
N				/* The task should not have been on an event list. */
N				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
X				if( ( ( ( &( pxTCB->xEventListItem ) )->pvContainer ) == 0 ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N
N				#if( configUSE_TICKLESS_IDLE != 0 )
X				#if( 0 != 0 )
S				{
S					/* If a task is blocked waiting for a notification then
S					xNextTaskUnblockTime might be set to the blocked task's time
S					out time.  If the task is unblocked for a reason other than
S					a timeout xNextTaskUnblockTime is normally left unchanged,
S					because it will automatically get reset to a new value when
S					the tick count equals xNextTaskUnblockTime.  However if
S					tickless idling is used it might be more important to enter
S					sleep mode at the earliest possible time - so reset
S					xNextTaskUnblockTime here to ensure it is updated at the
S					earliest possible time. */
S					prvResetNextTaskUnblockTime();
S				}
N				#endif
N
N				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
N				{
N					/* The notified task has a priority above the currently
N					executing task so a yield is required. */
N					taskYIELD_IF_USING_PREEMPTION();
X					vPortYield();
N				}
N				else
N				{
N					mtCOVERAGE_TEST_MARKER();
X					;
N				}
N			}
N			else
N			{
N				mtCOVERAGE_TEST_MARKER();
X				;
N			}
N		}
N		taskEXIT_CRITICAL();
X		vPortExitCritical();
N
N		return xReturn;
N	}
N
N#endif /* configUSE_TASK_NOTIFICATIONS */
N/*-----------------------------------------------------------*/
N
N#if( configUSE_TASK_NOTIFICATIONS == 1 )
X#if( 1 == 1 )
N
N	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
N	{
N	TCB_t * pxTCB;
N	eNotifyValue eOriginalNotifyState;
N	BaseType_t xReturn = pdPASS;
X	BaseType_t xReturn = ( ( ( BaseType_t ) 1 ) );
N	UBaseType_t uxSavedInterruptStatus;
N
N		configASSERT( xTaskToNotify );
X		if( ( xTaskToNotify ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N
N		/* RTOS ports that support interrupt nesting have the concept of a
N		maximum	system call (or maximum API call) interrupt priority.
N		Interrupts that are	above the maximum system call priority are keep
N		permanently enabled, even when the RTOS kernel is in a critical section,
N		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
N		is defined in FreeRTOSConfig.h then
N		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
N		failure if a FreeRTOS API function is called from an interrupt that has
N		been assigned a priority above the configured maximum system call
N		priority.  Only FreeRTOS functions that end in FromISR can be called
N		from interrupts	that have been assigned a priority at or (logically)
N		below the maximum system call interrupt priority.  FreeRTOS maintains a
N		separate interrupt safe API to ensure interrupt entry is as fast and as
N		simple as possible.  More information (albeit Cortex-M specific) is
N		provided on the following link:
N		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
N		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
X		vPortValidateInterruptPriority();
N
N		pxTCB = ( TCB_t * ) xTaskToNotify;
N
N		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
X		uxSavedInterruptStatus = ulPortSetInterruptMask();
N		{
N			if( pulPreviousNotificationValue != NULL )
X			if( pulPreviousNotificationValue != 0 )
N			{
N				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
N			}
N
N			eOriginalNotifyState = pxTCB->eNotifyState;
N			pxTCB->eNotifyState = eNotified;
N
N			switch( eAction )
N			{
N				case eSetBits	:
N					pxTCB->ulNotifiedValue |= ulValue;
N					break;
N
N				case eIncrement	:
N					( pxTCB->ulNotifiedValue )++;
N					break;
N
N				case eSetValueWithOverwrite	:
N					pxTCB->ulNotifiedValue = ulValue;
N					break;
N
N				case eSetValueWithoutOverwrite :
N					if( eOriginalNotifyState != eNotified )
N					{
N						pxTCB->ulNotifiedValue = ulValue;
N					}
N					else
N					{
N						/* The value could not be written to the task. */
N						xReturn = pdFAIL;
X						xReturn = ( ( ( BaseType_t ) 0 ) );
N					}
N					break;
N
N				case eNoAction :
N					/* The task is being notified without its notify value being
N					updated. */
N					break;
N			}
N
N			traceTASK_NOTIFY_FROM_ISR();
X			;
N
N			/* If the task is in the blocked state specifically to wait for a
N			notification then unblock it now. */
N			if( eOriginalNotifyState == eWaitingNotification )
N			{
N				/* The task should not have been on an event list. */
N				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
X				if( ( ( ( &( pxTCB->xEventListItem ) )->pvContainer ) == 0 ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N
N				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
X				if( uxSchedulerSuspended == ( UBaseType_t ) ( ( BaseType_t ) 0 ) )
N				{
N					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
N					prvAddTaskToReadyList( pxTCB );
X					; ( uxTopReadyPriority ) |= ( 1UL << ( ( pxTCB )->uxPriority ) ); vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) );
N				}
N				else
N				{
N					/* The delayed and ready lists cannot be accessed, so hold
N					this task pending until the scheduler is resumed. */
N					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
N				}
N
N				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
N				{
N					/* The notified task has a priority above the currently
N					executing task so a yield is required. */
N					if( pxHigherPriorityTaskWoken != NULL )
X					if( pxHigherPriorityTaskWoken != 0 )
N					{
N						*pxHigherPriorityTaskWoken = pdTRUE;
X						*pxHigherPriorityTaskWoken = ( ( BaseType_t ) 1 );
N					}
N				}
N				else
N				{
N					mtCOVERAGE_TEST_MARKER();
X					;
N				}
N			}
N		}
N		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
X		vPortClearInterruptMask(uxSavedInterruptStatus);
N
N		return xReturn;
N	}
N
N#endif /* configUSE_TASK_NOTIFICATIONS */
N/*-----------------------------------------------------------*/
N
N#if( configUSE_TASK_NOTIFICATIONS == 1 )
X#if( 1 == 1 )
N
N	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
N	{
N	TCB_t * pxTCB;
N	eNotifyValue eOriginalNotifyState;
N	UBaseType_t uxSavedInterruptStatus;
N
N		configASSERT( xTaskToNotify );
X		if( ( xTaskToNotify ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N
N		/* RTOS ports that support interrupt nesting have the concept of a
N		maximum	system call (or maximum API call) interrupt priority.
N		Interrupts that are	above the maximum system call priority are keep
N		permanently enabled, even when the RTOS kernel is in a critical section,
N		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
N		is defined in FreeRTOSConfig.h then
N		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
N		failure if a FreeRTOS API function is called from an interrupt that has
N		been assigned a priority above the configured maximum system call
N		priority.  Only FreeRTOS functions that end in FromISR can be called
N		from interrupts	that have been assigned a priority at or (logically)
N		below the maximum system call interrupt priority.  FreeRTOS maintains a
N		separate interrupt safe API to ensure interrupt entry is as fast and as
N		simple as possible.  More information (albeit Cortex-M specific) is
N		provided on the following link:
N		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
N		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
X		vPortValidateInterruptPriority();
N
N		pxTCB = ( TCB_t * ) xTaskToNotify;
N
N		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
X		uxSavedInterruptStatus = ulPortSetInterruptMask();
N		{
N			eOriginalNotifyState = pxTCB->eNotifyState;
N			pxTCB->eNotifyState = eNotified;
N
N			/* 'Giving' is equivalent to incrementing a count in a counting
N			semaphore. */
N			( pxTCB->ulNotifiedValue )++;
N
N			traceTASK_NOTIFY_GIVE_FROM_ISR();
X			;
N
N			/* If the task is in the blocked state specifically to wait for a
N			notification then unblock it now. */
N			if( eOriginalNotifyState == eWaitingNotification )
N			{
N				/* The task should not have been on an event list. */
N				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
X				if( ( ( ( &( pxTCB->xEventListItem ) )->pvContainer ) == 0 ) == 0 ) { ulPortSetInterruptMask(); for( ;; ); };
N
N				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
X				if( uxSchedulerSuspended == ( UBaseType_t ) ( ( BaseType_t ) 0 ) )
N				{
N					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
N					prvAddTaskToReadyList( pxTCB );
X					; ( uxTopReadyPriority ) |= ( 1UL << ( ( pxTCB )->uxPriority ) ); vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGenericListItem ) );
N				}
N				else
N				{
N					/* The delayed and ready lists cannot be accessed, so hold
N					this task pending until the scheduler is resumed. */
N					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
N				}
N
N				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
N				{
N					/* The notified task has a priority above the currently
N					executing task so a yield is required. */
N					if( pxHigherPriorityTaskWoken != NULL )
X					if( pxHigherPriorityTaskWoken != 0 )
N					{
N						*pxHigherPriorityTaskWoken = pdTRUE;
X						*pxHigherPriorityTaskWoken = ( ( BaseType_t ) 1 );
N					}
N				}
N				else
N				{
N					mtCOVERAGE_TEST_MARKER();
X					;
N				}
N			}
N		}
N		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
X		vPortClearInterruptMask(uxSavedInterruptStatus);
N	}
N
N#endif /* configUSE_TASK_NOTIFICATIONS */
N
N/*-----------------------------------------------------------*/
N
N#if( configUSE_TASK_NOTIFICATIONS == 1 )
X#if( 1 == 1 )
N
N	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
N	{
N	TCB_t *pxTCB;
N	BaseType_t xReturn;
N
N		pxTCB = ( TCB_t * ) xTask;
N
N		/* If null is passed in here then it is the calling task that is having
N		its notification state cleared. */
N		pxTCB = prvGetTCBFromHandle( pxTCB );
X		pxTCB = ( ( ( pxTCB ) == 0 ) ? ( TCB_t * ) pxCurrentTCB : ( TCB_t * ) ( pxTCB ) );
N
N		taskENTER_CRITICAL();
X		vPortEnterCritical();
N		{
N			if( pxTCB->eNotifyState == eNotified )
N			{
N				pxTCB->eNotifyState = eNotWaitingNotification;
N				xReturn = pdPASS;
X				xReturn = ( ( ( BaseType_t ) 1 ) );
N			}
N			else
N			{
N				xReturn = pdFAIL;
X				xReturn = ( ( ( BaseType_t ) 0 ) );
N			}
N		}
N		taskEXIT_CRITICAL();
X		vPortExitCritical();
N
N		return xReturn;
N	}
N
N#endif /* configUSE_TASK_NOTIFICATIONS */
N
N#ifdef FREERTOS_MODULE_TEST
S	#include "tasks_test_access_functions.h"
N#endif
N
