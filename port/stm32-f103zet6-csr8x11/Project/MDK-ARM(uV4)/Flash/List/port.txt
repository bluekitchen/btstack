; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\port.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\port.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\Middleware\blue_angel\inc -I..\..\Middleware\bt_callback_manager -I..\..\Middleware\blue_angel\btif -I..\..\Middleware\blue_angel\common -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\src\common -I..\..\Middleware\blue_angel\src\inc -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\platform\rtos -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\ut_manager\Cunit\Headers -I..\..\Middleware\ut_manager\Cunit\interface -I..\..\Middleware\blue_angel\platform\test -I..\..\Middleware\blue_angel\driver -I..\..\Middleware\blue_angel\src\core\hci -I..\..\User\bt\inc -I..\..\Middleware\bt_callback_manager -I..\..\Middleware\at_command -I..\..\Middleware\blue_angel\src\core\gap -I..\..\Middleware\blue_angel\src\core\l2cap -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=522 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DNDEBUG --omf_browse=.\flash\obj\port.crf ..\..\FreeRTOS\portable\RVDS\ARM_CM3\port.c]
                          THUMB

                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=2

                  SysTick_Handler PROC
;;;441    
;;;442    void xPortSysTickHandler( void )
000000  b510              PUSH     {r4,lr}
;;;443    {
;;;444    	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
;;;445    	executes all interrupts must be unmasked.  There is therefore no need to
;;;446    	save and then restore the interrupt mask value as its value is already
;;;447    	known. */
;;;448    	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
000002  f7fffffe          BL       ulPortSetInterruptMask
;;;449    	{
;;;450    		/* Increment the RTOS tick. */
;;;451    		if( xTaskIncrementTick() != pdFALSE )
000006  f7fffffe          BL       xTaskIncrementTick
00000a  b118              CBZ      r0,|L1.20|
;;;452    		{
;;;453    			/* A context switch is required.  Context switching is performed in
;;;454    			the PendSV interrupt.  Pend the PendSV interrupt. */
;;;455    			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
00000c  f04f5080          MOV      r0,#0x10000000
000010  4902              LDR      r1,|L1.28|
000012  6008              STR      r0,[r1,#0]
                  |L1.20|
;;;456    		}
;;;457    	}
;;;458    	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       vPortClearInterruptMask
;;;459    }
00001a  bd10              POP      {r4,pc}
;;;460    /*-----------------------------------------------------------*/
                          ENDP

                  |L1.28|
                          DCD      0xe000ed04

                          AREA ||i.prvTaskExitError||, CODE, READONLY, ALIGN=2

                  prvTaskExitError PROC
;;;234    
;;;235    static void prvTaskExitError( void )
000000  4807              LDR      r0,|L2.32|
;;;236    {
;;;237    	/* A function that implements a task must not exit or attempt to return to
;;;238    	its caller as there is nothing to return to.  If a task wants to exit it
;;;239    	should instead call vTaskDelete( NULL ).
;;;240    
;;;241    	Artificially force an assert() to be triggered if configASSERT() is
;;;242    	defined, then stop here so application writers can catch the error. */
;;;243    	configASSERT( uxCriticalNesting == ~0UL );
000002  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
000004  1c40              ADDS     r0,r0,#1
000006  b908              CBNZ     r0,|L2.12|
000008  2001              MOVS     r0,#1
00000a  e000              B        |L2.14|
                  |L2.12|
00000c  2000              MOVS     r0,#0
                  |L2.14|
00000e  b918              CBNZ     r0,|L2.24|
000010  f7fffffe          BL       ulPortSetInterruptMask
000014  bf00              NOP      
                  |L2.22|
000016  e7fe              B        |L2.22|
                  |L2.24|
;;;244    	portDISABLE_INTERRUPTS();
000018  f7fffffe          BL       ulPortSetInterruptMask
;;;245    	for( ;; );
00001c  bf00              NOP      
                  |L2.30|
00001e  e7fe              B        |L2.30|
;;;246    }
;;;247    /*-----------------------------------------------------------*/
                          ENDP

                  |L2.32|
                          DCD      uxCriticalNesting

                          AREA ||i.pxPortInitialiseStack||, CODE, READONLY, ALIGN=2

                  pxPortInitialiseStack PROC
;;;215     */
;;;216    StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
000000  1f00              SUBS     r0,r0,#4
;;;217    {
;;;218    	/* Simulate the stack frame as it would be created by a context switch
;;;219    	interrupt. */
;;;220    	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
;;;221    	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
000002  f04f7380          MOV      r3,#0x1000000
000006  6003              STR      r3,[r0,#0]
;;;222    	pxTopOfStack--;
000008  1f00              SUBS     r0,r0,#4
;;;223    	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
00000a  6001              STR      r1,[r0,#0]
;;;224    	pxTopOfStack--;
00000c  1f00              SUBS     r0,r0,#4
;;;225    	*pxTopOfStack = ( StackType_t ) prvTaskExitError;	/* LR */
00000e  4b03              LDR      r3,|L3.28|
000010  6003              STR      r3,[r0,#0]
;;;226    
;;;227    	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
000012  3814              SUBS     r0,r0,#0x14
;;;228    	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
000014  6002              STR      r2,[r0,#0]
;;;229    	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
000016  3820              SUBS     r0,r0,#0x20
;;;230    
;;;231    	return pxTopOfStack;
;;;232    }
000018  4770              BX       lr
;;;233    /*-----------------------------------------------------------*/
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      prvTaskExitError

                          AREA ||i.vPortEndScheduler||, CODE, READONLY, ALIGN=2

                  vPortEndScheduler PROC
;;;356    
;;;357    void vPortEndScheduler( void )
000000  b510              PUSH     {r4,lr}
;;;358    {
;;;359    	/* Not implemented in ports where there is nothing to return to.
;;;360    	Artificially force an assert. */
;;;361    	configASSERT( uxCriticalNesting == 1000UL );
000002  4807              LDR      r0,|L4.32|
000004  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
000006  f5b07f7a          CMP      r0,#0x3e8
00000a  d101              BNE      |L4.16|
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L4.18|
                  |L4.16|
000010  2000              MOVS     r0,#0
                  |L4.18|
000012  b918              CBNZ     r0,|L4.28|
000014  f7fffffe          BL       ulPortSetInterruptMask
000018  bf00              NOP      
                  |L4.26|
00001a  e7fe              B        |L4.26|
                  |L4.28|
;;;362    }
00001c  bd10              POP      {r4,pc}
;;;363    /*-----------------------------------------------------------*/
                          ENDP

00001e  0000              DCW      0x0000
                  |L4.32|
                          DCD      uxCriticalNesting

                          AREA ||i.vPortEnterCritical||, CODE, READONLY, ALIGN=2

                  vPortEnterCritical PROC
;;;376    
;;;377    void vPortEnterCritical( void )
000000  b510              PUSH     {r4,lr}
;;;378    {
;;;379    	portDISABLE_INTERRUPTS();
000002  f7fffffe          BL       ulPortSetInterruptMask
;;;380    	uxCriticalNesting++;
000006  480d              LDR      r0,|L5.60|
000008  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
00000a  1c40              ADDS     r0,r0,#1
00000c  490b              LDR      r1,|L5.60|
00000e  6008              STR      r0,[r1,#0]  ; uxCriticalNesting
;;;381    	__dsb( portSY_FULL_READ_WRITE );
000010  f3bf8f4f          DSB      
;;;382    	__isb( portSY_FULL_READ_WRITE );
000014  f3bf8f6f          ISB      
;;;383    
;;;384    	/* This is not the interrupt safe version of the enter critical function so
;;;385    	assert() if it is being called from an interrupt context.  Only API
;;;386    	functions that end in "FromISR" can be used in an interrupt.  Only assert if
;;;387    	the critical nesting count is 1 to protect against recursive calls if the
;;;388    	assert function also uses a critical section. */
;;;389    	if( uxCriticalNesting == 1 )
000018  4608              MOV      r0,r1
00001a  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
00001c  2801              CMP      r0,#1
00001e  d10b              BNE      |L5.56|
;;;390    	{
;;;391    		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
000020  4807              LDR      r0,|L5.64|
000022  6800              LDR      r0,[r0,#0]
000024  b2c0              UXTB     r0,r0
000026  b908              CBNZ     r0,|L5.44|
000028  2001              MOVS     r0,#1
00002a  e000              B        |L5.46|
                  |L5.44|
00002c  2000              MOVS     r0,#0
                  |L5.46|
00002e  b918              CBNZ     r0,|L5.56|
000030  f7fffffe          BL       ulPortSetInterruptMask
000034  bf00              NOP      
                  |L5.54|
000036  e7fe              B        |L5.54|
                  |L5.56|
;;;392    	}
;;;393    }
000038  bd10              POP      {r4,pc}
;;;394    /*-----------------------------------------------------------*/
                          ENDP

00003a  0000              DCW      0x0000
                  |L5.60|
                          DCD      uxCriticalNesting
                  |L5.64|
                          DCD      0xe000ed04

                          AREA ||i.vPortExitCritical||, CODE, READONLY, ALIGN=2

                  vPortExitCritical PROC
;;;395    
;;;396    void vPortExitCritical( void )
000000  b510              PUSH     {r4,lr}
;;;397    {
;;;398    	configASSERT( uxCriticalNesting );
000002  4809              LDR      r0,|L6.40|
000004  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
000006  b918              CBNZ     r0,|L6.16|
000008  f7fffffe          BL       ulPortSetInterruptMask
00000c  bf00              NOP      
                  |L6.14|
00000e  e7fe              B        |L6.14|
                  |L6.16|
;;;399    	uxCriticalNesting--;
000010  4805              LDR      r0,|L6.40|
000012  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
000014  1e40              SUBS     r0,r0,#1
000016  4904              LDR      r1,|L6.40|
000018  6008              STR      r0,[r1,#0]  ; uxCriticalNesting
;;;400    	if( uxCriticalNesting == 0 )
00001a  4608              MOV      r0,r1
00001c  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
00001e  b910              CBNZ     r0,|L6.38|
;;;401    	{
;;;402    		portENABLE_INTERRUPTS();
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       vPortClearInterruptMask
                  |L6.38|
;;;403    	}
;;;404    }
000026  bd10              POP      {r4,pc}
;;;405    /*-----------------------------------------------------------*/
                          ENDP

                  |L6.40|
                          DCD      uxCriticalNesting

                          AREA ||i.vPortSetupTimerInterrupt||, CODE, READONLY, ALIGN=2

                  vPortSetupTimerInterrupt PROC
;;;620    
;;;621    	void vPortSetupTimerInterrupt( void )
000000  4803              LDR      r0,|L7.16|
;;;622    	{
;;;623    		/* Calculate the constants required to configure the tick interrupt. */
;;;624    		#if configUSE_TICKLESS_IDLE == 1
;;;625    		{
;;;626    			ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
;;;627    			xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
;;;628    			ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
;;;629    		}
;;;630    		#endif /* configUSE_TICKLESS_IDLE */
;;;631    
;;;632    		/* Configure SysTick to interrupt at the requested rate. */
;;;633    		portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
000002  f04f21e0          MOV      r1,#0xe000e000
000006  6148              STR      r0,[r1,#0x14]
;;;634    		portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
000008  2007              MOVS     r0,#7
00000a  6108              STR      r0,[r1,#0x10]
;;;635    	}
00000c  4770              BX       lr
;;;636    
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      0x0001193f

                          AREA ||i.vPortValidateInterruptPriority||, CODE, READONLY, ALIGN=2

                  vPortValidateInterruptPriority PROC
;;;670    
;;;671    	void vPortValidateInterruptPriority( void )
000000  b570              PUSH     {r4-r6,lr}
;;;672    	{
;;;673    	uint32_t ulCurrentInterrupt;
;;;674    	uint8_t ucCurrentPriority;
;;;675    
;;;676    		/* Obtain the number of the currently executing interrupt. */
;;;677    		ulCurrentInterrupt = vPortGetIPSR();
000002  f7fffffe          BL       vPortGetIPSR
000006  4605              MOV      r5,r0
;;;678    
;;;679    		/* Is the interrupt number a user defined interrupt? */
;;;680    		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
000008  2d10              CMP      r5,#0x10
00000a  d30f              BCC      |L8.44|
;;;681    		{
;;;682    			/* Look up the interrupt's priority. */
;;;683    			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
00000c  f10520e0          ADD      r0,r5,#0xe000e000
000010  f89043f0          LDRB     r4,[r0,#0x3f0]
;;;684    
;;;685    			/* The following assertion will fail if a service routine (ISR) for
;;;686    			an interrupt that has been assigned a priority above
;;;687    			configMAX_SYSCALL_INTERRUPT_PRIORITY calls an ISR safe FreeRTOS API
;;;688    			function.  ISR safe FreeRTOS API functions must *only* be called
;;;689    			from interrupts that have been assigned a priority at or below
;;;690    			configMAX_SYSCALL_INTERRUPT_PRIORITY.
;;;691    
;;;692    			Numerically low interrupt priority numbers represent logically high
;;;693    			interrupt priorities, therefore the priority of the interrupt must
;;;694    			be set to a value equal to or numerically *higher* than
;;;695    			configMAX_SYSCALL_INTERRUPT_PRIORITY.
;;;696    
;;;697    			Interrupts that	use the FreeRTOS API must not be left at their
;;;698    			default priority of	zero as that is the highest possible priority,
;;;699    			which is guaranteed to be above configMAX_SYSCALL_INTERRUPT_PRIORITY,
;;;700    			and	therefore also guaranteed to be invalid.
;;;701    
;;;702    			FreeRTOS maintains separate thread and ISR API functions to ensure
;;;703    			interrupt entry is as fast and simple as possible.
;;;704    
;;;705    			The following links provide detailed information:
;;;706    			http://www.freertos.org/RTOS-Cortex-M3-M4.html
;;;707    			http://www.freertos.org/FAQHelp.html */
;;;708    			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
000014  480e              LDR      r0,|L8.80|
000016  7800              LDRB     r0,[r0,#0]  ; ucMaxSysCallPriority
000018  4284              CMP      r4,r0
00001a  db01              BLT      |L8.32|
00001c  2001              MOVS     r0,#1
00001e  e000              B        |L8.34|
                  |L8.32|
000020  2000              MOVS     r0,#0
                  |L8.34|
000022  b918              CBNZ     r0,|L8.44|
000024  f7fffffe          BL       ulPortSetInterruptMask
000028  bf00              NOP      
                  |L8.42|
00002a  e7fe              B        |L8.42|
                  |L8.44|
;;;709    		}
;;;710    
;;;711    		/* Priority grouping:  The interrupt controller (NVIC) allows the bits
;;;712    		that define each interrupt's priority to be split between bits that
;;;713    		define the interrupt's pre-emption priority bits and bits that define
;;;714    		the interrupt's sub-priority.  For simplicity all bits must be defined
;;;715    		to be pre-emption priority bits.  The following assertion will fail if
;;;716    		this is not the case (if some bits represent a sub-priority).
;;;717    
;;;718    		If the application only uses CMSIS libraries for interrupt
;;;719    		configuration then the correct setting can be achieved on all Cortex-M
;;;720    		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
;;;721    		scheduler.  Note however that some vendor specific peripheral libraries
;;;722    		assume a non-zero priority group setting, in which cases using a value
;;;723    		of zero will result in unpredicable behaviour. */
;;;724    		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
00002c  4809              LDR      r0,|L8.84|
00002e  6800              LDR      r0,[r0,#0]
000030  f40060e0          AND      r0,r0,#0x700
000034  4908              LDR      r1,|L8.88|
000036  6809              LDR      r1,[r1,#0]  ; ulMaxPRIGROUPValue
000038  4288              CMP      r0,r1
00003a  d801              BHI      |L8.64|
00003c  2001              MOVS     r0,#1
00003e  e000              B        |L8.66|
                  |L8.64|
000040  2000              MOVS     r0,#0
                  |L8.66|
000042  b918              CBNZ     r0,|L8.76|
000044  f7fffffe          BL       ulPortSetInterruptMask
000048  bf00              NOP      
                  |L8.74|
00004a  e7fe              B        |L8.74|
                  |L8.76|
;;;725    	}
00004c  bd70              POP      {r4-r6,pc}
;;;726    
                          ENDP

00004e  0000              DCW      0x0000
                  |L8.80|
                          DCD      ucMaxSysCallPriority
                  |L8.84|
                          DCD      0xe000ed0c
                  |L8.88|
                          DCD      ulMaxPRIGROUPValue

                          AREA ||i.vPortYield||, CODE, READONLY, ALIGN=2

                  vPortYield PROC
;;;364    
;;;365    void vPortYield( void )
000000  f04f5080          MOV      r0,#0x10000000
;;;366    {
;;;367    	/* Set a PendSV to request a context switch. */
;;;368    	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
000004  4903              LDR      r1,|L9.20|
000006  6008              STR      r0,[r1,#0]
;;;369    
;;;370    	/* Barriers are normally not required but do ensure the code is completely
;;;371    	within the specified behaviour for the architecture. */
;;;372    	__dsb( portSY_FULL_READ_WRITE );
000008  f3bf8f4f          DSB      
;;;373    	__isb( portSY_FULL_READ_WRITE );
00000c  f3bf8f6f          ISB      
;;;374    }
000010  4770              BX       lr
;;;375    /*-----------------------------------------------------------*/
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      0xe000ed04

                          AREA ||i.xPortStartScheduler||, CODE, READONLY, ALIGN=2

                  xPortStartScheduler PROC
;;;291     */
;;;292    BaseType_t xPortStartScheduler( void )
000000  b51c              PUSH     {r2-r4,lr}
;;;293    {
;;;294    	#if( configASSERT_DEFINED == 1 )
;;;295    	{
;;;296    		volatile uint32_t ulOriginalPriority;
;;;297    		volatile uint8_t * const pucFirstUserPriorityRegister = ( uint8_t * ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
000002  4822              LDR      r0,|L10.140|
;;;298    		volatile uint8_t ucMaxPriorityValue;
;;;299    
;;;300    		/* Determine the maximum priority from which ISR safe FreeRTOS API
;;;301    		functions can be called.  ISR safe functions are those that end in
;;;302    		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
;;;303    		ensure interrupt entry is as fast and simple as possible.
;;;304    
;;;305    		Save the interrupt priority value that is about to be clobbered. */
;;;306    		ulOriginalPriority = *pucFirstUserPriorityRegister;
000004  4601              MOV      r1,r0
000006  7809              LDRB     r1,[r1,#0]
000008  9101              STR      r1,[sp,#4]
;;;307    
;;;308    		/* Determine the number of priority bits available.  First write to all
;;;309    		possible bits. */
;;;310    		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
00000a  21ff              MOVS     r1,#0xff
00000c  4602              MOV      r2,r0
00000e  7011              STRB     r1,[r2,#0]
;;;311    
;;;312    		/* Read the value back to see how many bits stuck. */
;;;313    		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
000010  4601              MOV      r1,r0
000012  7809              LDRB     r1,[r1,#0]
000014  9100              STR      r1,[sp,#0]
;;;314    
;;;315    		/* Use the same mask on the maximum system call priority. */
;;;316    		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
000016  f89d1000          LDRB     r1,[sp,#0]
00001a  f0010110          AND      r1,r1,#0x10
00001e  4a1c              LDR      r2,|L10.144|
000020  7011              STRB     r1,[r2,#0]
;;;317    
;;;318    		/* Calculate the maximum acceptable priority group value for the number
;;;319    		of bits read back. */
;;;320    		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
000022  2107              MOVS     r1,#7
000024  4a1b              LDR      r2,|L10.148|
000026  6011              STR      r1,[r2,#0]  ; ulMaxPRIGROUPValue
;;;321    		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
000028  e009              B        |L10.62|
                  |L10.42|
;;;322    		{
;;;323    			ulMaxPRIGROUPValue--;
00002a  491a              LDR      r1,|L10.148|
00002c  6809              LDR      r1,[r1,#0]  ; ulMaxPRIGROUPValue
00002e  1e49              SUBS     r1,r1,#1
000030  4a18              LDR      r2,|L10.148|
000032  6011              STR      r1,[r2,#0]  ; ulMaxPRIGROUPValue
;;;324    			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
000034  f89d1000          LDRB     r1,[sp,#0]
000038  0649              LSLS     r1,r1,#25
00003a  0e09              LSRS     r1,r1,#24
00003c  9100              STR      r1,[sp,#0]
                  |L10.62|
00003e  f89d1000          LDRB     r1,[sp,#0]            ;321
000042  f0010180          AND      r1,r1,#0x80           ;321
000046  2980              CMP      r1,#0x80              ;321
000048  d0ef              BEQ      |L10.42|
;;;325    		}
;;;326    
;;;327    		/* Shift the priority group value back to its position within the AIRCR
;;;328    		register. */
;;;329    		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
00004a  4912              LDR      r1,|L10.148|
00004c  6809              LDR      r1,[r1,#0]  ; ulMaxPRIGROUPValue
00004e  0209              LSLS     r1,r1,#8
000050  4a10              LDR      r2,|L10.148|
000052  6011              STR      r1,[r2,#0]  ; ulMaxPRIGROUPValue
;;;330    		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
000054  4611              MOV      r1,r2
000056  8809              LDRH     r1,[r1,#0]  ; ulMaxPRIGROUPValue
000058  f40161e0          AND      r1,r1,#0x700
00005c  6011              STR      r1,[r2,#0]  ; ulMaxPRIGROUPValue
;;;331    
;;;332    		/* Restore the clobbered interrupt priority register to its original
;;;333    		value. */
;;;334    		*pucFirstUserPriorityRegister = ulOriginalPriority;
00005e  4a0b              LDR      r2,|L10.140|
000060  9901              LDR      r1,[sp,#4]
000062  7011              STRB     r1,[r2,#0]
;;;335    	}
;;;336    	#endif /* conifgASSERT_DEFINED */
;;;337    
;;;338    	/* Make PendSV and SysTick the lowest priority interrupts. */
;;;339    	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
000064  480c              LDR      r0,|L10.152|
000066  6800              LDR      r0,[r0,#0]
000068  f4400070          ORR      r0,r0,#0xf00000
00006c  490a              LDR      r1,|L10.152|
00006e  6008              STR      r0,[r1,#0]
;;;340    	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
000070  4608              MOV      r0,r1
000072  6800              LDR      r0,[r0,#0]
000074  f0404070          ORR      r0,r0,#0xf0000000
000078  6008              STR      r0,[r1,#0]
;;;341    
;;;342    	/* Start the timer that generates the tick ISR.  Interrupts are disabled
;;;343    	here already. */
;;;344    	vPortSetupTimerInterrupt();
00007a  f7fffffe          BL       vPortSetupTimerInterrupt
;;;345    
;;;346    	/* Initialise the critical nesting count ready for the first task. */
;;;347    	uxCriticalNesting = 0;
00007e  2000              MOVS     r0,#0
000080  4906              LDR      r1,|L10.156|
000082  6008              STR      r0,[r1,#0]  ; uxCriticalNesting
;;;348    
;;;349    	/* Start the first task. */
;;;350    	prvStartFirstTask();
000084  f7fffffe          BL       __asm___6_port_c_39a90d8d__prvStartFirstTask
;;;351    
;;;352    	/* Should not get here! */
;;;353    	return 0;
000088  2000              MOVS     r0,#0
;;;354    }
00008a  bd1c              POP      {r2-r4,pc}
;;;355    /*-----------------------------------------------------------*/
                          ENDP

                  |L10.140|
                          DCD      0xe000e400
                  |L10.144|
                          DCD      ucMaxSysCallPriority
                  |L10.148|
                          DCD      ulMaxPRIGROUPValue
                  |L10.152|
                          DCD      0xe000ed20
                  |L10.156|
                          DCD      uxCriticalNesting

                          AREA ||.data||, DATA, ALIGN=2

                  uxCriticalNesting
                          DCD      0xaaaaaaaa
                  ucMaxSysCallPriority
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  ulMaxPRIGROUPValue
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\FreeRTOS\\portable\\RVDS\\ARM_CM3\\port.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |SVC_Handler|
#line 249
|SVC_Handler| PROC
#line 250

 PRESERVE8

 ldr r3, =pxCurrentTCB  
 ldr r1, [r3]  
 ldr r0, [r1]  
 ldmia r0!, {r4-r11}  
 msr psp, r0  
 isb
 mov r0, #0
 msr basepri, r0
 orr r14, #0xd
 bx r14
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___6_port_c_39a90d8d__prvStartFirstTask|
#line 266
|__asm___6_port_c_39a90d8d__prvStartFirstTask| PROC
#line 267

 PRESERVE8

 
 ldr r0, =0xE000ED08
 ldr r0, [r0]
 ldr r0, [r0]

 
 msr msp, r0
 
 cpsie i
 cpsie f
 dsb
 isb
 
 svc 0
 nop
 nop
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |PendSV_Handler|
#line 407
|PendSV_Handler| PROC
#line 408

 extern uxCriticalNesting
 extern pxCurrentTCB
 extern vTaskSwitchContext

 PRESERVE8

 mrs r0, psp
 isb

 ldr r3, =pxCurrentTCB  
 ldr r2, [r3]

 stmdb r0!, {r4-r11}  
 str r0, [r2]  

 stmdb sp!, {r3, r14}
 mov r0, #( 0x01 << (8 - 4) )
 msr basepri, r0
 bl vTaskSwitchContext
 mov r0, #0
 msr basepri, r0
 ldmia sp!, {r3, r14}

 ldr r1, [r3]
 ldr r0, [r1]  
 ldmia r0!, {r4-r11}  
 msr psp, r0
 isb
 bx r14
 nop
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |ulPortSetInterruptMask|
#line 640
|ulPortSetInterruptMask| PROC
#line 641

 PRESERVE8

 mrs r0, basepri
 mov r1, #( 0x01 << (8 - 4) )
 msr basepri, r1
 bx r14
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |vPortClearInterruptMask|
#line 651
|vPortClearInterruptMask| PROC
#line 652

 PRESERVE8

 msr basepri, r0
 bx r14
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |vPortGetIPSR|
#line 660
|vPortGetIPSR| PROC
#line 661

 PRESERVE8

 mrs r0, ipsr
 bx r14
	ENDP

;*** End   embedded assembler ***
