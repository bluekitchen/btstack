; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bt_platform.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bt_platform.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\Middleware\blue_angel\inc -I..\..\Middleware\bt_callback_manager -I..\..\Middleware\blue_angel\btif -I..\..\Middleware\blue_angel\common -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\src\common -I..\..\Middleware\blue_angel\src\inc -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\platform\rtos -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\ut_manager\Cunit\Headers -I..\..\Middleware\ut_manager\Cunit\interface -I..\..\Middleware\blue_angel\platform\test -I..\..\Middleware\blue_angel\driver -I..\..\Middleware\blue_angel\src\core\hci -I..\..\User\bt\inc -I..\..\Middleware\bt_callback_manager -I..\..\Middleware\at_command -I..\..\Middleware\blue_angel\src\core\gap -I..\..\Middleware\blue_angel\src\core\l2cap -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=522 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DNDEBUG --omf_browse=.\flash\obj\bt_platform.crf ..\..\Middleware\blue_angel\platform\bt_platform.c]
                          THUMB

                          AREA ||i.bt_memcmp||, CODE, READONLY, ALIGN=1

                  bt_memcmp PROC
;;;167    
;;;168    bool bt_memcmp(void *des, void *src, uint32_t length)
000000  b570              PUSH     {r4-r6,lr}
;;;169    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;170        return memcmp(des, src, length);
000008  4632              MOV      r2,r6
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       memcmp
000012  b108              CBZ      r0,|L1.24|
000014  2001              MOVS     r0,#1
                  |L1.22|
;;;171    }
000016  bd70              POP      {r4-r6,pc}
                  |L1.24|
000018  2000              MOVS     r0,#0                 ;170
00001a  e7fc              B        |L1.22|
;;;172    
                          ENDP


                          AREA ||i.bt_memcpy||, CODE, READONLY, ALIGN=1

                  bt_memcpy PROC
;;;162    
;;;163    void bt_memcpy(void *des, void *src, uint32_t length)
000000  b570              PUSH     {r4-r6,lr}
;;;164    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;165        memcpy(des, src, length);
000008  4632              MOV      r2,r6
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       __aeabi_memcpy
;;;166    }
000012  bd70              POP      {r4-r6,pc}
;;;167    
                          ENDP


                          AREA ||i.bt_memset||, CODE, READONLY, ALIGN=1

                  bt_memset PROC
;;;157    
;;;158    void bt_memset(void *des, uint8_t value, uint32_t length)
000000  b570              PUSH     {r4-r6,lr}
;;;159    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;160        memset(des, value, length);
000008  4622              MOV      r2,r4
00000a  4629              MOV      r1,r5
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       __aeabi_memset
;;;161    }
000012  bd70              POP      {r4-r6,pc}
;;;162    
                          ENDP


                          AREA ||i.bt_task_deinit||, CODE, READONLY, ALIGN=2

                  bt_task_deinit PROC
;;;125    
;;;126    void bt_task_deinit()
000000  b510              PUSH     {r4,lr}
;;;127    {
;;;128        bt_os_layer_deinit_timer();
000002  f7fffffe          BL       bt_os_layer_deinit_timer
;;;129        if (bt_task_mutex) {
000006  480f              LDR      r0,|L4.68|
000008  6800              LDR      r0,[r0,#0]  ; bt_task_mutex
00000a  b130              CBZ      r0,|L4.26|
;;;130            bt_os_layer_delete_mutex(bt_task_mutex);
00000c  480d              LDR      r0,|L4.68|
00000e  6800              LDR      r0,[r0,#0]  ; bt_task_mutex
000010  f7fffffe          BL       bt_os_layer_delete_mutex
;;;131            bt_task_mutex = 0;
000014  2000              MOVS     r0,#0
000016  490b              LDR      r1,|L4.68|
000018  6008              STR      r0,[r1,#0]  ; bt_task_mutex
                  |L4.26|
;;;132        }
;;;133        if (bt_task_semaphore) {
00001a  480b              LDR      r0,|L4.72|
00001c  6800              LDR      r0,[r0,#0]  ; bt_task_semaphore
00001e  b130              CBZ      r0,|L4.46|
;;;134            bt_os_layer_delete_semaphore(bt_task_semaphore);
000020  4809              LDR      r0,|L4.72|
000022  6800              LDR      r0,[r0,#0]  ; bt_task_semaphore
000024  f7fffffe          BL       bt_os_layer_delete_semaphore
;;;135            bt_task_semaphore = 0;
000028  2000              MOVS     r0,#0
00002a  4907              LDR      r1,|L4.72|
00002c  6008              STR      r0,[r1,#0]  ; bt_task_semaphore
                  |L4.46|
;;;136        }
;;;137        if (bt_task_queue) {
00002e  4807              LDR      r0,|L4.76|
000030  6800              LDR      r0,[r0,#0]  ; bt_task_queue
000032  b130              CBZ      r0,|L4.66|
;;;138            bt_os_layer_delete_queue(bt_task_queue);
000034  4805              LDR      r0,|L4.76|
000036  6800              LDR      r0,[r0,#0]  ; bt_task_queue
000038  f7fffffe          BL       bt_os_layer_delete_queue
;;;139            bt_task_queue = 0;
00003c  2000              MOVS     r0,#0
00003e  4903              LDR      r1,|L4.76|
000040  6008              STR      r0,[r1,#0]  ; bt_task_queue
                  |L4.66|
;;;140        }
;;;141    }
000042  bd10              POP      {r4,pc}
;;;142    
                          ENDP

                  |L4.68|
                          DCD      bt_task_mutex
                  |L4.72|
                          DCD      bt_task_semaphore
                  |L4.76|
                          DCD      bt_task_queue

                          AREA ||i.bt_task_event_handler||, CODE, READONLY, ALIGN=2

                  bt_task_event_handler PROC
;;;57     
;;;58     void bt_task_event_handler()
000000  b538              PUSH     {r3-r5,lr}
;;;59     {
;;;60         uint32_t event = 0;
000002  2400              MOVS     r4,#0
;;;61         uint16_t rx_data_length = 0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;62         bt_os_layer_disable_interrupt();
000008  f7fffffe          BL       bt_os_layer_disable_interrupt
;;;63         event = bt_task_event;
00000c  4810              LDR      r0,|L5.80|
00000e  6804              LDR      r4,[r0,#0]  ; bt_task_event
;;;64         bt_os_layer_enable_interrupt();
000010  f7fffffe          BL       bt_os_layer_enable_interrupt
;;;65     
;;;66         bt_os_layer_take_mutex(bt_task_mutex);
000014  480f              LDR      r0,|L5.84|
000016  6800              LDR      r0,[r0,#0]  ; bt_task_mutex
000018  f7fffffe          BL       bt_os_layer_take_mutex
;;;67         if (event & (BT_TASK_EVENT_TIMER_EXPIRED)) {
00001c  f0040001          AND      r0,r4,#1
000020  b108              CBZ      r0,|L5.38|
;;;68             bt_timer_check_timeout_handler();
000022  f7fffffe          BL       bt_timer_check_timeout_handler
                  |L5.38|
;;;69         }
;;;70         if (event & (BT_TASK_EVENT_RX)) {
000026  f0040002          AND      r0,r4,#2
00002a  b158              CBZ      r0,|L5.68|
;;;71             bt_os_layer_queue_receive(bt_task_queue, &rx_data_length, 10);
00002c  220a              MOVS     r2,#0xa
00002e  4669              MOV      r1,sp
000030  4809              LDR      r0,|L5.88|
000032  6800              LDR      r0,[r0,#0]  ; bt_task_queue
000034  f7fffffe          BL       bt_os_layer_queue_receive
;;;72             bt_driver_rx(rx_data_length);
000038  f8bd0000          LDRH     r0,[sp,#0]
00003c  f7fffffe          BL       bt_driver_rx
;;;73             bt_hci_packet_process();
000040  f7fffffe          BL       bt_hci_packet_process
                  |L5.68|
;;;74         }
;;;75         if (event & (BT_TASK_EVENT_TX)) {
;;;76     
;;;77         }
;;;78         if (event & (BT_TASK_EVENT_OOM)) {
;;;79     
;;;80         }
;;;81         bt_os_layer_give_mutex(bt_task_mutex);
000044  4803              LDR      r0,|L5.84|
000046  6800              LDR      r0,[r0,#0]  ; bt_task_mutex
000048  f7fffffe          BL       bt_os_layer_give_mutex
;;;82     }
00004c  bd38              POP      {r3-r5,pc}
;;;83     
                          ENDP

00004e  0000              DCW      0x0000
                  |L5.80|
                          DCD      bt_task_event
                  |L5.84|
                          DCD      bt_task_mutex
                  |L5.88|
                          DCD      bt_task_queue

                          AREA ||i.bt_task_init||, CODE, READONLY, ALIGN=2

                  bt_task_init PROC
;;;105    
;;;106    void bt_task_init()
000000  b510              PUSH     {r4,lr}
;;;107    {
;;;108        bt_driver_init();
000002  f7fffffe          BL       bt_driver_init
;;;109        bt_os_layer_init_timer();
000006  f7fffffe          BL       bt_os_layer_init_timer
;;;110        bt_os_layer_register_timer_callback(bt_timer_timeout_callback);
00000a  4819              LDR      r0,|L6.112|
00000c  f7fffffe          BL       bt_os_layer_register_timer_callback
;;;111        if (bt_task_mutex == 0) {
000010  4818              LDR      r0,|L6.116|
000012  6800              LDR      r0,[r0,#0]  ; bt_task_mutex
000014  b958              CBNZ     r0,|L6.46|
;;;112            bt_task_mutex = bt_os_layer_create_mutex();
000016  f7fffffe          BL       bt_os_layer_create_mutex
00001a  4916              LDR      r1,|L6.116|
00001c  6008              STR      r0,[r1,#0]  ; bt_task_mutex
;;;113            BT_ASSERT(bt_task_mutex);
00001e  4608              MOV      r0,r1
000020  6800              LDR      r0,[r0,#0]  ; bt_task_mutex
000022  b100              CBZ      r0,|L6.38|
000024  e003              B        |L6.46|
                  |L6.38|
000026  2171              MOVS     r1,#0x71
000028  a013              ADR      r0,|L6.120|
00002a  f7fffffe          BL       assert_failed
                  |L6.46|
;;;114        }
;;;115        if (bt_task_semaphore == 0) {
00002e  481f              LDR      r0,|L6.172|
000030  6800              LDR      r0,[r0,#0]  ; bt_task_semaphore
000032  b958              CBNZ     r0,|L6.76|
;;;116            bt_task_semaphore = bt_os_layer_create_semaphore();
000034  f7fffffe          BL       bt_os_layer_create_semaphore
000038  491c              LDR      r1,|L6.172|
00003a  6008              STR      r0,[r1,#0]  ; bt_task_semaphore
;;;117            BT_ASSERT(bt_task_semaphore);
00003c  4608              MOV      r0,r1
00003e  6800              LDR      r0,[r0,#0]  ; bt_task_semaphore
000040  b100              CBZ      r0,|L6.68|
000042  e003              B        |L6.76|
                  |L6.68|
000044  2175              MOVS     r1,#0x75
000046  a00c              ADR      r0,|L6.120|
000048  f7fffffe          BL       assert_failed
                  |L6.76|
;;;118        }
;;;119        if (bt_task_queue == 0) {
00004c  4818              LDR      r0,|L6.176|
00004e  6800              LDR      r0,[r0,#0]  ; bt_task_queue
000050  b968              CBNZ     r0,|L6.110|
;;;120            bt_task_queue = bt_os_layer_create_queue(20, sizeof(uint16_t));
000052  2102              MOVS     r1,#2
000054  2014              MOVS     r0,#0x14
000056  f7fffffe          BL       bt_os_layer_create_queue
00005a  4915              LDR      r1,|L6.176|
00005c  6008              STR      r0,[r1,#0]  ; bt_task_queue
;;;121            BT_ASSERT(bt_task_queue);
00005e  4608              MOV      r0,r1
000060  6800              LDR      r0,[r0,#0]  ; bt_task_queue
000062  b100              CBZ      r0,|L6.102|
000064  e003              B        |L6.110|
                  |L6.102|
000066  2179              MOVS     r1,#0x79
000068  a003              ADR      r0,|L6.120|
00006a  f7fffffe          BL       assert_failed
                  |L6.110|
;;;122        }
;;;123        //bt_driver_init();
;;;124    }
00006e  bd10              POP      {r4,pc}
;;;125    
                          ENDP

                  |L6.112|
                          DCD      bt_timer_timeout_callback
                  |L6.116|
                          DCD      bt_task_mutex
                  |L6.120|
000078  2e2e5c2e          DCB      "..\\..\\Middleware\\blue_angel\\platform\\bt_platform.c"
00007c  2e5c4d69
000080  64646c65
000084  77617265
000088  5c626c75
00008c  655f616e
000090  67656c5c
000094  706c6174
000098  666f726d
00009c  5c62745f
0000a0  706c6174
0000a4  666f726d
0000a8  2e63    
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L6.172|
                          DCD      bt_task_semaphore
                  |L6.176|
                          DCD      bt_task_queue

                          AREA ||i.bt_task_interrupt_trigger||, CODE, READONLY, ALIGN=2

                  bt_task_interrupt_trigger PROC
;;;47     
;;;48     static void bt_task_interrupt_trigger()
000000  b510              PUSH     {r4,lr}
;;;49     {
;;;50         BT_ASSERT(bt_task_semaphore);
000002  480a              LDR      r0,|L7.44|
000004  6800              LDR      r0,[r0,#0]  ; bt_task_semaphore
000006  b100              CBZ      r0,|L7.10|
000008  e003              B        |L7.18|
                  |L7.10|
00000a  2132              MOVS     r1,#0x32
00000c  a008              ADR      r0,|L7.48|
00000e  f7fffffe          BL       assert_failed
                  |L7.18|
;;;51         if (bt_os_layer_is_isr_active()) {
000012  f7fffffe          BL       bt_os_layer_is_isr_active
000016  b120              CBZ      r0,|L7.34|
;;;52             bt_os_layer_give_semaphore_from_isr(bt_task_semaphore);
000018  4804              LDR      r0,|L7.44|
00001a  6800              LDR      r0,[r0,#0]  ; bt_task_semaphore
00001c  f7fffffe          BL       bt_os_layer_give_semaphore_from_isr
000020  e003              B        |L7.42|
                  |L7.34|
;;;53         } else {
;;;54             bt_os_layer_give_semaphore(bt_task_semaphore);
000022  4802              LDR      r0,|L7.44|
000024  6800              LDR      r0,[r0,#0]  ; bt_task_semaphore
000026  f7fffffe          BL       bt_os_layer_give_semaphore
                  |L7.42|
;;;55         }
;;;56     }
00002a  bd10              POP      {r4,pc}
;;;57     
                          ENDP

                  |L7.44|
                          DCD      bt_task_semaphore
                  |L7.48|
000030  2e2e5c2e          DCB      "..\\..\\Middleware\\blue_angel\\platform\\bt_platform.c"
000034  2e5c4d69
000038  64646c65
00003c  77617265
000040  5c626c75
000044  655f616e
000048  67656c5c
00004c  706c6174
000050  666f726d
000054  5c62745f
000058  706c6174
00005c  666f726d
000060  2e63    
000062  00                DCB      0
000063  00                DCB      0

                          AREA ||i.bt_task_mutex_lock||, CODE, READONLY, ALIGN=2

                  bt_task_mutex_lock PROC
;;;26     
;;;27     void bt_task_mutex_lock()
000000  b510              PUSH     {r4,lr}
;;;28     {
;;;29     	BT_ASSERT(bt_task_mutex);
000002  4806              LDR      r0,|L8.28|
000004  6800              LDR      r0,[r0,#0]  ; bt_task_mutex
000006  b100              CBZ      r0,|L8.10|
000008  e003              B        |L8.18|
                  |L8.10|
00000a  211d              MOVS     r1,#0x1d
00000c  a004              ADR      r0,|L8.32|
00000e  f7fffffe          BL       assert_failed
                  |L8.18|
;;;30     	bt_os_layer_take_mutex(bt_task_mutex);
000012  4802              LDR      r0,|L8.28|
000014  6800              LDR      r0,[r0,#0]  ; bt_task_mutex
000016  f7fffffe          BL       bt_os_layer_take_mutex
;;;31     }
00001a  bd10              POP      {r4,pc}
;;;32     
                          ENDP

                  |L8.28|
                          DCD      bt_task_mutex
                  |L8.32|
000020  2e2e5c2e          DCB      "..\\..\\Middleware\\blue_angel\\platform\\bt_platform.c"
000024  2e5c4d69
000028  64646c65
00002c  77617265
000030  5c626c75
000034  655f616e
000038  67656c5c
00003c  706c6174
000040  666f726d
000044  5c62745f
000048  706c6174
00004c  666f726d
000050  2e63    
000052  00                DCB      0
000053  00                DCB      0

                          AREA ||i.bt_task_mutex_unlock||, CODE, READONLY, ALIGN=2

                  bt_task_mutex_unlock PROC
;;;32     
;;;33     void bt_task_mutex_unlock()
000000  b510              PUSH     {r4,lr}
;;;34     {
;;;35     	BT_ASSERT(bt_task_mutex);
000002  4806              LDR      r0,|L9.28|
000004  6800              LDR      r0,[r0,#0]  ; bt_task_mutex
000006  b100              CBZ      r0,|L9.10|
000008  e003              B        |L9.18|
                  |L9.10|
00000a  2123              MOVS     r1,#0x23
00000c  a004              ADR      r0,|L9.32|
00000e  f7fffffe          BL       assert_failed
                  |L9.18|
;;;36     	bt_os_layer_give_mutex(bt_task_mutex);
000012  4802              LDR      r0,|L9.28|
000014  6800              LDR      r0,[r0,#0]  ; bt_task_mutex
000016  f7fffffe          BL       bt_os_layer_give_mutex
;;;37     }
00001a  bd10              POP      {r4,pc}
;;;38     
                          ENDP

                  |L9.28|
                          DCD      bt_task_mutex
                  |L9.32|
000020  2e2e5c2e          DCB      "..\\..\\Middleware\\blue_angel\\platform\\bt_platform.c"
000024  2e5c4d69
000028  64646c65
00002c  77617265
000030  5c626c75
000034  655f616e
000038  67656c5c
00003c  706c6174
000040  666f726d
000044  5c62745f
000048  706c6174
00004c  666f726d
000050  2e63    
000052  00                DCB      0
000053  00                DCB      0

                          AREA ||i.bt_task_rx_nofity||, CODE, READONLY, ALIGN=2

                  bt_task_rx_nofity PROC
;;;83     
;;;84     void bt_task_rx_nofity(uint16_t data_length)
000000  b501              PUSH     {r0,lr}
;;;85     {
;;;86         bt_os_layer_disable_interrupt();
000002  f7fffffe          BL       bt_os_layer_disable_interrupt
;;;87         bt_task_event |= BT_TASK_EVENT_RX;
000006  4811              LDR      r0,|L10.76|
000008  6800              LDR      r0,[r0,#0]  ; bt_task_event
00000a  f0400002          ORR      r0,r0,#2
00000e  490f              LDR      r1,|L10.76|
000010  6008              STR      r0,[r1,#0]  ; bt_task_event
;;;88         bt_os_layer_enable_interrupt();
000012  f7fffffe          BL       bt_os_layer_enable_interrupt
;;;89         bt_task_interrupt_trigger();
000016  f7fffffe          BL       bt_task_interrupt_trigger
;;;90         BT_ASSERT(bt_task_queue);
00001a  480d              LDR      r0,|L10.80|
00001c  6800              LDR      r0,[r0,#0]  ; bt_task_queue
00001e  b100              CBZ      r0,|L10.34|
000020  e003              B        |L10.42|
                  |L10.34|
000022  215a              MOVS     r1,#0x5a
000024  a00b              ADR      r0,|L10.84|
000026  f7fffffe          BL       assert_failed
                  |L10.42|
;;;91         if (bt_os_layer_is_isr_active()) {
00002a  f7fffffe          BL       bt_os_layer_is_isr_active
00002e  b128              CBZ      r0,|L10.60|
;;;92             bt_os_layer_queue_send_from_isr(bt_task_queue, &data_length);
000030  4669              MOV      r1,sp
000032  4807              LDR      r0,|L10.80|
000034  6800              LDR      r0,[r0,#0]  ; bt_task_queue
000036  f7fffffe          BL       bt_os_layer_queue_send_from_isr
00003a  e005              B        |L10.72|
                  |L10.60|
;;;93         } else {
;;;94             bt_os_layer_queue_send(bt_task_queue, &data_length, 10);
00003c  220a              MOVS     r2,#0xa
00003e  4669              MOV      r1,sp
000040  4803              LDR      r0,|L10.80|
000042  6800              LDR      r0,[r0,#0]  ; bt_task_queue
000044  f7fffffe          BL       bt_os_layer_queue_send
                  |L10.72|
;;;95         }
;;;96     }
000048  bd08              POP      {r3,pc}
;;;97     
                          ENDP

00004a  0000              DCW      0x0000
                  |L10.76|
                          DCD      bt_task_event
                  |L10.80|
                          DCD      bt_task_queue
                  |L10.84|
000054  2e2e5c2e          DCB      "..\\..\\Middleware\\blue_angel\\platform\\bt_platform.c"
000058  2e5c4d69
00005c  64646c65
000060  77617265
000064  5c626c75
000068  655f616e
00006c  67656c5c
000070  706c6174
000074  666f726d
000078  5c62745f
00007c  706c6174
000080  666f726d
000084  2e63    
000086  00                DCB      0
000087  00                DCB      0

                          AREA ||i.bt_task_take_semaphore||, CODE, READONLY, ALIGN=2

                  bt_task_take_semaphore PROC
;;;38     
;;;39     void bt_task_take_semaphore()
000000  b510              PUSH     {r4,lr}
;;;40     {
;;;41         if (bt_os_layer_is_isr_active()) {
000002  f7fffffe          BL       bt_os_layer_is_isr_active
000006  b120              CBZ      r0,|L11.18|
;;;42             bt_os_layer_take_semaphore_from_isr(bt_task_semaphore);
000008  4805              LDR      r0,|L11.32|
00000a  6800              LDR      r0,[r0,#0]  ; bt_task_semaphore
00000c  f7fffffe          BL       bt_os_layer_take_semaphore_from_isr
000010  e005              B        |L11.30|
                  |L11.18|
;;;43         } else {
;;;44             bt_os_layer_take_semaphore(bt_task_semaphore, portMAX_DELAY);
000012  f04f31ff          MOV      r1,#0xffffffff
000016  4802              LDR      r0,|L11.32|
000018  6800              LDR      r0,[r0,#0]  ; bt_task_semaphore
00001a  f7fffffe          BL       bt_os_layer_take_semaphore
                  |L11.30|
;;;45         }
;;;46     }
00001e  bd10              POP      {r4,pc}
;;;47     
                          ENDP

                  |L11.32|
                          DCD      bt_task_semaphore

                          AREA ||i.bt_timer_get_current_tick||, CODE, READONLY, ALIGN=1

                  bt_timer_get_current_tick PROC
;;;152    
;;;153    uint32_t bt_timer_get_current_tick()
000000  b510              PUSH     {r4,lr}
;;;154    {
;;;155        return bt_os_layer_get_system_tick();
000002  f7fffffe          BL       bt_os_layer_get_system_tick
;;;156    }
000006  bd10              POP      {r4,pc}
;;;157    
                          ENDP


                          AREA ||i.bt_timer_start_timer||, CODE, READONLY, ALIGN=1

                  bt_timer_start_timer PROC
;;;142    
;;;143    void bt_timer_start_timer(uint32_t timer_length)
000000  b510              PUSH     {r4,lr}
;;;144    {
000002  4604              MOV      r4,r0
;;;145        bt_os_layer_start_timer(timer_length);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       bt_os_layer_start_timer
;;;146    }
00000a  bd10              POP      {r4,pc}
;;;147    
                          ENDP


                          AREA ||i.bt_timer_stop_timer||, CODE, READONLY, ALIGN=1

                  bt_timer_stop_timer PROC
;;;147    
;;;148    void bt_timer_stop_timer()
000000  b510              PUSH     {r4,lr}
;;;149    {
;;;150        bt_os_layer_stop_timer();
000002  f7fffffe          BL       bt_os_layer_stop_timer
;;;151    }
000006  bd10              POP      {r4,pc}
;;;152    
                          ENDP


                          AREA ||i.bt_timer_timeout_callback||, CODE, READONLY, ALIGN=2

                  bt_timer_timeout_callback PROC
;;;97     
;;;98     static void bt_timer_timeout_callback()
000000  b510              PUSH     {r4,lr}
;;;99     {
;;;100        bt_os_layer_disable_interrupt();
000002  f7fffffe          BL       bt_os_layer_disable_interrupt
;;;101        bt_task_event |= BT_TASK_EVENT_TIMER_EXPIRED;
000006  4805              LDR      r0,|L15.28|
000008  6800              LDR      r0,[r0,#0]  ; bt_task_event
00000a  f0400001          ORR      r0,r0,#1
00000e  4903              LDR      r1,|L15.28|
000010  6008              STR      r0,[r1,#0]  ; bt_task_event
;;;102        bt_os_layer_enable_interrupt();
000012  f7fffffe          BL       bt_os_layer_enable_interrupt
;;;103        bt_task_interrupt_trigger();
000016  f7fffffe          BL       bt_task_interrupt_trigger
;;;104    }
00001a  bd10              POP      {r4,pc}
;;;105    
                          ENDP

                  |L15.28|
                          DCD      bt_task_event

                          AREA ||.data||, DATA, ALIGN=2

                  bt_task_mutex
                          DCD      0x00000000
                  bt_task_semaphore
                          DCD      0x00000000
                  bt_task_queue
                          DCD      0x00000000
                  bt_task_event
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Middleware\\blue_angel\\platform\\bt_platform.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_bt_platform_c_68016c94____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_bt_platform_c_68016c94____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_bt_platform_c_68016c94____REVSH|
#line 128
|__asm___13_bt_platform_c_68016c94____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
