; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\heap_4.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\heap_4.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\Middleware\blue_angel\inc -I..\..\Middleware\bt_callback_manager -I..\..\Middleware\blue_angel\btif -I..\..\Middleware\blue_angel\common -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\src\common -I..\..\Middleware\blue_angel\src\inc -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\platform\rtos -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\ut_manager\Cunit\Headers -I..\..\Middleware\ut_manager\Cunit\interface -I..\..\Middleware\blue_angel\platform\test -I..\..\Middleware\blue_angel\driver -I..\..\Middleware\blue_angel\src\core\hci -I..\..\User\bt\inc -I..\..\Middleware\bt_callback_manager -I..\..\Middleware\at_command -I..\..\Middleware\blue_angel\src\core\gap -I..\..\Middleware\blue_angel\src\core\l2cap -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=522 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DNDEBUG --omf_browse=.\flash\obj\heap_4.crf ..\..\FreeRTOS\portable\MemMang\heap_4.c]
                          THUMB

                          AREA ||i.prvHeapInit||, CODE, READONLY, ALIGN=2

                  prvHeapInit PROC
;;;366    
;;;367    static void prvHeapInit( void )
000000  b530              PUSH     {r4,r5,lr}
;;;368    {
;;;369    BlockLink_t *pxFirstFreeBlock;
;;;370    uint8_t *pucAlignedHeap;
;;;371    size_t uxAddress;
;;;372    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
000002  f44f4388          MOV      r3,#0x4400
;;;373    
;;;374    	/* Ensure the heap starts on a correctly aligned boundary. */
;;;375    	uxAddress = ( size_t ) ucHeap;
000006  4817              LDR      r0,|L1.100|
;;;376    
;;;377    	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
000008  f0000407          AND      r4,r0,#7
00000c  b12c              CBZ      r4,|L1.26|
;;;378    	{
;;;379    		uxAddress += ( portBYTE_ALIGNMENT - 1 );
00000e  1dc0              ADDS     r0,r0,#7
;;;380    		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
000010  f0200007          BIC      r0,r0,#7
;;;381    		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
000014  4c13              LDR      r4,|L1.100|
000016  1b04              SUBS     r4,r0,r4
000018  1b1b              SUBS     r3,r3,r4
                  |L1.26|
;;;382    	}
;;;383    
;;;384    	pucAlignedHeap = ( uint8_t * ) uxAddress;
00001a  4602              MOV      r2,r0
;;;385    
;;;386    	/* xStart is used to hold a pointer to the first item in the list of free
;;;387    	blocks.  The void cast is used to prevent compiler warnings. */
;;;388    	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
00001c  4c12              LDR      r4,|L1.104|
00001e  6022              STR      r2,[r4,#0]  ; xStart
;;;389    	xStart.xBlockSize = ( size_t ) 0;
000020  2400              MOVS     r4,#0
000022  4d11              LDR      r5,|L1.104|
000024  606c              STR      r4,[r5,#4]  ; xStart
;;;390    
;;;391    	/* pxEnd is used to mark the end of the list of free blocks and is inserted
;;;392    	at the end of the heap space. */
;;;393    	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
000026  18d0              ADDS     r0,r2,r3
;;;394    	uxAddress -= xHeapStructSize;
000028  3808              SUBS     r0,r0,#8
;;;395    	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
00002a  f0200007          BIC      r0,r0,#7
;;;396    	pxEnd = ( void * ) uxAddress;
00002e  4c0f              LDR      r4,|L1.108|
000030  6020              STR      r0,[r4,#0]  ; pxEnd
;;;397    	pxEnd->xBlockSize = 0;
000032  2400              MOVS     r4,#0
000034  4d0d              LDR      r5,|L1.108|
000036  682d              LDR      r5,[r5,#0]  ; pxEnd
000038  606c              STR      r4,[r5,#4]
;;;398    	pxEnd->pxNextFreeBlock = NULL;
00003a  4d0c              LDR      r5,|L1.108|
00003c  682d              LDR      r5,[r5,#0]  ; pxEnd
00003e  602c              STR      r4,[r5,#0]
;;;399    
;;;400    	/* To start with there is a single free block that is sized to take up the
;;;401    	entire heap space, minus the space taken by pxEnd. */
;;;402    	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
000040  4611              MOV      r1,r2
;;;403    	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
000042  1a44              SUBS     r4,r0,r1
000044  604c              STR      r4,[r1,#4]
;;;404    	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
000046  4c09              LDR      r4,|L1.108|
000048  6824              LDR      r4,[r4,#0]  ; pxEnd
00004a  600c              STR      r4,[r1,#0]
;;;405    
;;;406    	/* Only one block exists - and it covers the entire usable heap space. */
;;;407    	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
00004c  4d08              LDR      r5,|L1.112|
00004e  684c              LDR      r4,[r1,#4]
000050  602c              STR      r4,[r5,#0]  ; xMinimumEverFreeBytesRemaining
;;;408    	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
000052  4d08              LDR      r5,|L1.116|
000054  684c              LDR      r4,[r1,#4]
000056  602c              STR      r4,[r5,#0]  ; xFreeBytesRemaining
;;;409    
;;;410    	/* Work out the position of the top bit in a size_t variable. */
;;;411    	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
000058  f04f4400          MOV      r4,#0x80000000
00005c  4d06              LDR      r5,|L1.120|
00005e  602c              STR      r4,[r5,#0]  ; xBlockAllocatedBit
;;;412    }
000060  bd30              POP      {r4,r5,pc}
;;;413    /*-----------------------------------------------------------*/
                          ENDP

000062  0000              DCW      0x0000
                  |L1.100|
                          DCD      ucHeap
                  |L1.104|
                          DCD      xStart
                  |L1.108|
                          DCD      pxEnd
                  |L1.112|
                          DCD      xMinimumEverFreeBytesRemaining
                  |L1.116|
                          DCD      xFreeBytesRemaining
                  |L1.120|
                          DCD      xBlockAllocatedBit

                          AREA ||i.prvInsertBlockIntoFreeList||, CODE, READONLY, ALIGN=2

                  prvInsertBlockIntoFreeList PROC
;;;414    
;;;415    static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
000000  b510              PUSH     {r4,lr}
;;;416    {
000002  4601              MOV      r1,r0
;;;417    BlockLink_t *pxIterator;
;;;418    uint8_t *puc;
;;;419    
;;;420    	/* Iterate through the list until a block is found that has a higher address
;;;421    	than the block being inserted. */
;;;422    	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
000004  4816              LDR      r0,|L2.96|
000006  e000              B        |L2.10|
                  |L2.8|
000008  6800              LDR      r0,[r0,#0]
                  |L2.10|
00000a  6803              LDR      r3,[r0,#0]
00000c  428b              CMP      r3,r1
00000e  d3fb              BCC      |L2.8|
;;;423    	{
;;;424    		/* Nothing to do here, just iterate to the right position. */
;;;425    	}
;;;426    
;;;427    	/* Do the block being inserted, and the block it is being inserted after
;;;428    	make a contiguous block of memory? */
;;;429    	puc = ( uint8_t * ) pxIterator;
000010  4602              MOV      r2,r0
;;;430    	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
000012  6843              LDR      r3,[r0,#4]
000014  4413              ADD      r3,r3,r2
000016  428b              CMP      r3,r1
000018  d104              BNE      |L2.36|
;;;431    	{
;;;432    		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
00001a  6843              LDR      r3,[r0,#4]
00001c  684c              LDR      r4,[r1,#4]
00001e  4423              ADD      r3,r3,r4
000020  6043              STR      r3,[r0,#4]
;;;433    		pxBlockToInsert = pxIterator;
000022  4601              MOV      r1,r0
                  |L2.36|
;;;434    	}
;;;435    	else
;;;436    	{
;;;437    		mtCOVERAGE_TEST_MARKER();
;;;438    	}
;;;439    
;;;440    	/* Do the block being inserted, and the block it is being inserted before
;;;441    	make a contiguous block of memory? */
;;;442    	puc = ( uint8_t * ) pxBlockToInsert;
000024  460a              MOV      r2,r1
;;;443    	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
000026  684b              LDR      r3,[r1,#4]
000028  4413              ADD      r3,r3,r2
00002a  6804              LDR      r4,[r0,#0]
00002c  42a3              CMP      r3,r4
00002e  d111              BNE      |L2.84|
;;;444    	{
;;;445    		if( pxIterator->pxNextFreeBlock != pxEnd )
000030  4c0c              LDR      r4,|L2.100|
000032  6803              LDR      r3,[r0,#0]
000034  6824              LDR      r4,[r4,#0]  ; pxEnd
000036  42a3              CMP      r3,r4
000038  d008              BEQ      |L2.76|
;;;446    		{
;;;447    			/* Form one big block from the two blocks. */
;;;448    			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
00003a  684b              LDR      r3,[r1,#4]
00003c  6804              LDR      r4,[r0,#0]
00003e  6864              LDR      r4,[r4,#4]
000040  4423              ADD      r3,r3,r4
000042  604b              STR      r3,[r1,#4]
;;;449    			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
000044  6803              LDR      r3,[r0,#0]
000046  681b              LDR      r3,[r3,#0]
000048  600b              STR      r3,[r1,#0]
00004a  e005              B        |L2.88|
                  |L2.76|
;;;450    		}
;;;451    		else
;;;452    		{
;;;453    			pxBlockToInsert->pxNextFreeBlock = pxEnd;
00004c  4b05              LDR      r3,|L2.100|
00004e  681b              LDR      r3,[r3,#0]  ; pxEnd
000050  600b              STR      r3,[r1,#0]
000052  e001              B        |L2.88|
                  |L2.84|
;;;454    		}
;;;455    	}
;;;456    	else
;;;457    	{
;;;458    		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
000054  6803              LDR      r3,[r0,#0]
000056  600b              STR      r3,[r1,#0]
                  |L2.88|
;;;459    	}
;;;460    
;;;461    	/* If the block being inserted plugged a gab, so was merged with the block
;;;462    	before and the block after, then it's pxNextFreeBlock pointer will have
;;;463    	already been set, and should not be set here as that would make it point
;;;464    	to itself. */
;;;465    	if( pxIterator != pxBlockToInsert )
000058  4288              CMP      r0,r1
00005a  d000              BEQ      |L2.94|
;;;466    	{
;;;467    		pxIterator->pxNextFreeBlock = pxBlockToInsert;
00005c  6001              STR      r1,[r0,#0]
                  |L2.94|
;;;468    	}
;;;469    	else
;;;470    	{
;;;471    		mtCOVERAGE_TEST_MARKER();
;;;472    	}
;;;473    }
00005e  bd10              POP      {r4,pc}
;;;474    
                          ENDP

                  |L2.96|
                          DCD      xStart
                  |L2.100|
                          DCD      pxEnd

                          AREA ||i.pvPortMalloc||, CODE, READONLY, ALIGN=2

                  pvPortMalloc PROC
;;;150    
;;;151    void *pvPortMalloc( size_t xWantedSize )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;152    {
000004  4604              MOV      r4,r0
;;;153    BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
;;;154    void *pvReturn = NULL;
000006  f04f0800          MOV      r8,#0
;;;155    
;;;156    	vTaskSuspendAll();
00000a  f7fffffe          BL       vTaskSuspendAll
;;;157    	{
;;;158    		/* If this is the first call to malloc then the heap will require
;;;159    		initialisation to setup the list of free blocks. */
;;;160    		if( pxEnd == NULL )
00000e  483c              LDR      r0,|L3.256|
000010  6800              LDR      r0,[r0,#0]  ; pxEnd
000012  b908              CBNZ     r0,|L3.24|
;;;161    		{
;;;162    			prvHeapInit();
000014  f7fffffe          BL       prvHeapInit
                  |L3.24|
;;;163    		}
;;;164    		else
;;;165    		{
;;;166    			mtCOVERAGE_TEST_MARKER();
;;;167    		}
;;;168    
;;;169    		/* Check the requested block size is not so large that the top bit is
;;;170    		set.  The top bit of the block size member of the BlockLink_t structure
;;;171    		is used to determine who owns the block - the application or the
;;;172    		kernel, so it must be free. */
;;;173    		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
000018  483a              LDR      r0,|L3.260|
00001a  6800              LDR      r0,[r0,#0]  ; xBlockAllocatedBit
00001c  4020              ANDS     r0,r0,r4
00001e  2800              CMP      r0,#0
000020  d15d              BNE      |L3.222|
;;;174    		{
;;;175    			/* The wanted size is increased so it can contain a BlockLink_t
;;;176    			structure in addition to the requested amount of bytes. */
;;;177    			if( xWantedSize > 0 )
000022  b19c              CBZ      r4,|L3.76|
;;;178    			{
;;;179    				xWantedSize += xHeapStructSize;
000024  3408              ADDS     r4,r4,#8
;;;180    
;;;181    				/* Ensure that blocks are always aligned to the required number
;;;182    				of bytes. */
;;;183    				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
000026  f0040007          AND      r0,r4,#7
00002a  b178              CBZ      r0,|L3.76|
;;;184    				{
;;;185    					/* Byte alignment required. */
;;;186    					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
00002c  f0040007          AND      r0,r4,#7
000030  f1c00008          RSB      r0,r0,#8
000034  4404              ADD      r4,r4,r0
;;;187    					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
000036  f0040007          AND      r0,r4,#7
00003a  b908              CBNZ     r0,|L3.64|
00003c  2001              MOVS     r0,#1
00003e  e000              B        |L3.66|
                  |L3.64|
000040  2000              MOVS     r0,#0
                  |L3.66|
000042  b918              CBNZ     r0,|L3.76|
000044  f7fffffe          BL       ulPortSetInterruptMask
000048  bf00              NOP      
                  |L3.74|
00004a  e7fe              B        |L3.74|
                  |L3.76|
;;;188    				}
;;;189    				else
;;;190    				{
;;;191    					mtCOVERAGE_TEST_MARKER();
;;;192    				}
;;;193    			}
;;;194    			else
;;;195    			{
;;;196    				mtCOVERAGE_TEST_MARKER();
;;;197    			}
;;;198    
;;;199    			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
00004c  2c00              CMP      r4,#0
00004e  d046              BEQ      |L3.222|
000050  482d              LDR      r0,|L3.264|
000052  6800              LDR      r0,[r0,#0]  ; xFreeBytesRemaining
000054  4284              CMP      r4,r0
000056  d842              BHI      |L3.222|
;;;200    			{
;;;201    				/* Traverse the list from the start	(lowest address) block until
;;;202    				one	of adequate size is found. */
;;;203    				pxPreviousBlock = &xStart;
000058  4e2c              LDR      r6,|L3.268|
;;;204    				pxBlock = xStart.pxNextFreeBlock;
00005a  4630              MOV      r0,r6
00005c  6805              LDR      r5,[r0,#0]  ; xStart
;;;205    				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
00005e  e001              B        |L3.100|
                  |L3.96|
;;;206    				{
;;;207    					pxPreviousBlock = pxBlock;
000060  462e              MOV      r6,r5
;;;208    					pxBlock = pxBlock->pxNextFreeBlock;
000062  682d              LDR      r5,[r5,#0]
                  |L3.100|
000064  6868              LDR      r0,[r5,#4]            ;205
000066  42a0              CMP      r0,r4                 ;205
000068  d202              BCS      |L3.112|
00006a  6828              LDR      r0,[r5,#0]            ;205
00006c  2800              CMP      r0,#0                 ;205
00006e  d1f7              BNE      |L3.96|
                  |L3.112|
;;;209    				}
;;;210    
;;;211    				/* If the end marker was reached then a block of adequate size
;;;212    				was	not found. */
;;;213    				if( pxBlock != pxEnd )
000070  4823              LDR      r0,|L3.256|
000072  6800              LDR      r0,[r0,#0]  ; pxEnd
000074  4285              CMP      r5,r0
000076  d032              BEQ      |L3.222|
;;;214    				{
;;;215    					/* Return the memory space pointed to - jumping over the
;;;216    					BlockLink_t structure at its start. */
;;;217    					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
000078  6830              LDR      r0,[r6,#0]
00007a  f1000808          ADD      r8,r0,#8
;;;218    
;;;219    					/* This block is being returned for use so must be taken out
;;;220    					of the list of free blocks. */
;;;221    					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
00007e  6828              LDR      r0,[r5,#0]
000080  6030              STR      r0,[r6,#0]
;;;222    
;;;223    					/* If the block is larger than required it can be split into
;;;224    					two. */
;;;225    					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
000082  6868              LDR      r0,[r5,#4]
000084  1b00              SUBS     r0,r0,r4
000086  2810              CMP      r0,#0x10
000088  d912              BLS      |L3.176|
;;;226    					{
;;;227    						/* This block is to be split into two.  Create a new
;;;228    						block following the number of bytes requested. The void
;;;229    						cast is used to prevent byte alignment warnings from the
;;;230    						compiler. */
;;;231    						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
00008a  192f              ADDS     r7,r5,r4
;;;232    						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
00008c  f0070007          AND      r0,r7,#7
000090  b908              CBNZ     r0,|L3.150|
000092  2001              MOVS     r0,#1
000094  e000              B        |L3.152|
                  |L3.150|
000096  2000              MOVS     r0,#0
                  |L3.152|
000098  b918              CBNZ     r0,|L3.162|
00009a  f7fffffe          BL       ulPortSetInterruptMask
00009e  bf00              NOP      
                  |L3.160|
0000a0  e7fe              B        |L3.160|
                  |L3.162|
;;;233    
;;;234    						/* Calculate the sizes of two blocks split from the
;;;235    						single block. */
;;;236    						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
0000a2  6868              LDR      r0,[r5,#4]
0000a4  1b00              SUBS     r0,r0,r4
0000a6  6078              STR      r0,[r7,#4]
;;;237    						pxBlock->xBlockSize = xWantedSize;
0000a8  606c              STR      r4,[r5,#4]
;;;238    
;;;239    						/* Insert the new block into the list of free blocks. */
;;;240    						prvInsertBlockIntoFreeList( pxNewBlockLink );
0000aa  4638              MOV      r0,r7
0000ac  f7fffffe          BL       prvInsertBlockIntoFreeList
                  |L3.176|
;;;241    					}
;;;242    					else
;;;243    					{
;;;244    						mtCOVERAGE_TEST_MARKER();
;;;245    					}
;;;246    
;;;247    					xFreeBytesRemaining -= pxBlock->xBlockSize;
0000b0  4915              LDR      r1,|L3.264|
0000b2  6868              LDR      r0,[r5,#4]
0000b4  6809              LDR      r1,[r1,#0]  ; xFreeBytesRemaining
0000b6  1a08              SUBS     r0,r1,r0
0000b8  4913              LDR      r1,|L3.264|
0000ba  6008              STR      r0,[r1,#0]  ; xFreeBytesRemaining
;;;248    
;;;249    					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
0000bc  4608              MOV      r0,r1
0000be  6800              LDR      r0,[r0,#0]  ; xFreeBytesRemaining
0000c0  4913              LDR      r1,|L3.272|
0000c2  6809              LDR      r1,[r1,#0]  ; xMinimumEverFreeBytesRemaining
0000c4  4288              CMP      r0,r1
0000c6  d203              BCS      |L3.208|
;;;250    					{
;;;251    						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
0000c8  480f              LDR      r0,|L3.264|
0000ca  6800              LDR      r0,[r0,#0]  ; xFreeBytesRemaining
0000cc  4910              LDR      r1,|L3.272|
0000ce  6008              STR      r0,[r1,#0]  ; xMinimumEverFreeBytesRemaining
                  |L3.208|
;;;252    					}
;;;253    					else
;;;254    					{
;;;255    						mtCOVERAGE_TEST_MARKER();
;;;256    					}
;;;257    
;;;258    					/* The block is being returned - it is allocated and owned
;;;259    					by the application and has no "next" block. */
;;;260    					pxBlock->xBlockSize |= xBlockAllocatedBit;
0000d0  490c              LDR      r1,|L3.260|
0000d2  6868              LDR      r0,[r5,#4]
0000d4  6809              LDR      r1,[r1,#0]  ; xBlockAllocatedBit
0000d6  4308              ORRS     r0,r0,r1
0000d8  6068              STR      r0,[r5,#4]
;;;261    					pxBlock->pxNextFreeBlock = NULL;
0000da  2000              MOVS     r0,#0
0000dc  6028              STR      r0,[r5,#0]
                  |L3.222|
;;;262    				}
;;;263    				else
;;;264    				{
;;;265    					mtCOVERAGE_TEST_MARKER();
;;;266    				}
;;;267    			}
;;;268    			else
;;;269    			{
;;;270    				mtCOVERAGE_TEST_MARKER();
;;;271    			}
;;;272    		}
;;;273    		else
;;;274    		{
;;;275    			mtCOVERAGE_TEST_MARKER();
;;;276    		}
;;;277    
;;;278    		traceMALLOC( pvReturn, xWantedSize );
;;;279    	}
;;;280    	( void ) xTaskResumeAll();
0000de  f7fffffe          BL       xTaskResumeAll
;;;281    
;;;282    	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
;;;283    	{
;;;284    		if( pvReturn == NULL )
;;;285    		{
;;;286    			extern void vApplicationMallocFailedHook( void );
;;;287    			vApplicationMallocFailedHook();
;;;288    		}
;;;289    		else
;;;290    		{
;;;291    			mtCOVERAGE_TEST_MARKER();
;;;292    		}
;;;293    	}
;;;294    	#endif
;;;295    
;;;296    	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
0000e2  f0080007          AND      r0,r8,#7
0000e6  b908              CBNZ     r0,|L3.236|
0000e8  2001              MOVS     r0,#1
0000ea  e000              B        |L3.238|
                  |L3.236|
0000ec  2000              MOVS     r0,#0
                  |L3.238|
0000ee  b918              CBNZ     r0,|L3.248|
0000f0  f7fffffe          BL       ulPortSetInterruptMask
0000f4  bf00              NOP      
                  |L3.246|
0000f6  e7fe              B        |L3.246|
                  |L3.248|
;;;297    	return pvReturn;
0000f8  4640              MOV      r0,r8
;;;298    }
0000fa  e8bd81f0          POP      {r4-r8,pc}
;;;299    /*-----------------------------------------------------------*/
                          ENDP

0000fe  0000              DCW      0x0000
                  |L3.256|
                          DCD      pxEnd
                  |L3.260|
                          DCD      xBlockAllocatedBit
                  |L3.264|
                          DCD      xFreeBytesRemaining
                  |L3.268|
                          DCD      xStart
                  |L3.272|
                          DCD      xMinimumEverFreeBytesRemaining

                          AREA ||i.vPortFree||, CODE, READONLY, ALIGN=2

                  vPortFree PROC
;;;300    
;;;301    void vPortFree( void *pv )
000000  b570              PUSH     {r4-r6,lr}
;;;302    {
000002  4606              MOV      r6,r0
;;;303    uint8_t *puc = ( uint8_t * ) pv;
000004  4635              MOV      r5,r6
;;;304    BlockLink_t *pxLink;
;;;305    
;;;306    	if( pv != NULL )
000006  2e00              CMP      r6,#0
000008  d031              BEQ      |L4.110|
;;;307    	{
;;;308    		/* The memory being freed will have an BlockLink_t structure immediately
;;;309    		before it. */
;;;310    		puc -= xHeapStructSize;
00000a  3d08              SUBS     r5,r5,#8
;;;311    
;;;312    		/* This casting is to keep the compiler from issuing warnings. */
;;;313    		pxLink = ( void * ) puc;
00000c  462c              MOV      r4,r5
;;;314    
;;;315    		/* Check the block is actually allocated. */
;;;316    		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
00000e  4918              LDR      r1,|L4.112|
000010  6860              LDR      r0,[r4,#4]
000012  6809              LDR      r1,[r1,#0]  ; xBlockAllocatedBit
000014  4008              ANDS     r0,r0,r1
000016  b108              CBZ      r0,|L4.28|
000018  2001              MOVS     r0,#1
00001a  e000              B        |L4.30|
                  |L4.28|
00001c  2000              MOVS     r0,#0
                  |L4.30|
00001e  b918              CBNZ     r0,|L4.40|
000020  f7fffffe          BL       ulPortSetInterruptMask
000024  bf00              NOP      
                  |L4.38|
000026  e7fe              B        |L4.38|
                  |L4.40|
;;;317    		configASSERT( pxLink->pxNextFreeBlock == NULL );
000028  6820              LDR      r0,[r4,#0]
00002a  b908              CBNZ     r0,|L4.48|
00002c  2001              MOVS     r0,#1
00002e  e000              B        |L4.50|
                  |L4.48|
000030  2000              MOVS     r0,#0
                  |L4.50|
000032  b918              CBNZ     r0,|L4.60|
000034  f7fffffe          BL       ulPortSetInterruptMask
000038  bf00              NOP      
                  |L4.58|
00003a  e7fe              B        |L4.58|
                  |L4.60|
;;;318    
;;;319    		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
00003c  490c              LDR      r1,|L4.112|
00003e  6860              LDR      r0,[r4,#4]
000040  6809              LDR      r1,[r1,#0]  ; xBlockAllocatedBit
000042  4008              ANDS     r0,r0,r1
000044  b198              CBZ      r0,|L4.110|
;;;320    		{
;;;321    			if( pxLink->pxNextFreeBlock == NULL )
000046  6820              LDR      r0,[r4,#0]
000048  b988              CBNZ     r0,|L4.110|
;;;322    			{
;;;323    				/* The block is being returned to the heap - it is no longer
;;;324    				allocated. */
;;;325    				pxLink->xBlockSize &= ~xBlockAllocatedBit;
00004a  4909              LDR      r1,|L4.112|
00004c  6860              LDR      r0,[r4,#4]
00004e  6809              LDR      r1,[r1,#0]  ; xBlockAllocatedBit
000050  4388              BICS     r0,r0,r1
000052  6060              STR      r0,[r4,#4]
;;;326    
;;;327    				vTaskSuspendAll();
000054  f7fffffe          BL       vTaskSuspendAll
;;;328    				{
;;;329    					/* Add this block to the list of free blocks. */
;;;330    					xFreeBytesRemaining += pxLink->xBlockSize;
000058  4906              LDR      r1,|L4.116|
00005a  6860              LDR      r0,[r4,#4]
00005c  6809              LDR      r1,[r1,#0]  ; xFreeBytesRemaining
00005e  4408              ADD      r0,r0,r1
000060  4904              LDR      r1,|L4.116|
000062  6008              STR      r0,[r1,#0]  ; xFreeBytesRemaining
;;;331    					traceFREE( pv, pxLink->xBlockSize );
;;;332    					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
000064  4620              MOV      r0,r4
000066  f7fffffe          BL       prvInsertBlockIntoFreeList
;;;333    				}
;;;334    				( void ) xTaskResumeAll();
00006a  f7fffffe          BL       xTaskResumeAll
                  |L4.110|
;;;335    			}
;;;336    			else
;;;337    			{
;;;338    				mtCOVERAGE_TEST_MARKER();
;;;339    			}
;;;340    		}
;;;341    		else
;;;342    		{
;;;343    			mtCOVERAGE_TEST_MARKER();
;;;344    		}
;;;345    	}
;;;346    }
00006e  bd70              POP      {r4-r6,pc}
;;;347    /*-----------------------------------------------------------*/
                          ENDP

                  |L4.112|
                          DCD      xBlockAllocatedBit
                  |L4.116|
                          DCD      xFreeBytesRemaining

                          AREA ||i.vPortInitialiseBlocks||, CODE, READONLY, ALIGN=1

                  vPortInitialiseBlocks PROC
;;;360    
;;;361    void vPortInitialiseBlocks( void )
000000  4770              BX       lr
;;;362    {
;;;363    	/* This just exists to keep the linker quiet. */
;;;364    }
;;;365    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xPortGetFreeHeapSize||, CODE, READONLY, ALIGN=2

                  xPortGetFreeHeapSize PROC
;;;348    
;;;349    size_t xPortGetFreeHeapSize( void )
000000  4801              LDR      r0,|L6.8|
;;;350    {
;;;351    	return xFreeBytesRemaining;
000002  6800              LDR      r0,[r0,#0]  ; xFreeBytesRemaining
;;;352    }
000004  4770              BX       lr
;;;353    /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      xFreeBytesRemaining

                          AREA ||i.xPortGetMinimumEverFreeHeapSize||, CODE, READONLY, ALIGN=2

                  xPortGetMinimumEverFreeHeapSize PROC
;;;354    
;;;355    size_t xPortGetMinimumEverFreeHeapSize( void )
000000  4801              LDR      r0,|L7.8|
;;;356    {
;;;357    	return xMinimumEverFreeBytesRemaining;
000002  6800              LDR      r0,[r0,#0]  ; xMinimumEverFreeBytesRemaining
;;;358    }
000004  4770              BX       lr
;;;359    /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      xMinimumEverFreeBytesRemaining

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  ucHeap
                          %        17408

                          AREA ||.data||, DATA, ALIGN=2

                  xStart
                          %        8
                  pxEnd
                          DCD      0x00000000
                  xFreeBytesRemaining
                          DCD      0x00000000
                  xMinimumEverFreeBytesRemaining
                          DCD      0x00000000
                  xBlockAllocatedBit
                          DCD      0x00000000
