; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\btstack_resample.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\btstack_resample.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\ut_manager\Cunit\Headers -I..\..\Middleware\ut_manager\Cunit\interface -I..\..\User\bt\inc -I..\..\Middleware\at_command -I..\..\..\..\src -I..\..\..\..\src\ble\gatt-service -I..\..\..\..\src\ble -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=522 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DNDEBUG --omf_browse=.\flash\obj\btstack_resample.crf ..\..\..\..\src\btstack_resample.c]
                          THUMB

                          AREA ||i.btstack_resample_block||, CODE, READONLY, ALIGN=1

                  btstack_resample_block PROC
;;;54     
;;;55     uint16_t btstack_resample_block(btstack_resample_t * context, const int16_t * input_buffer, uint32_t num_frames, int16_t * output_buffer){
000000  e92d4ffc          PUSH     {r2-r11,lr}
000004  4604              MOV      r4,r0
000006  4615              MOV      r5,r2
;;;56         uint16_t dest_frames = 0;
000008  2600              MOVS     r6,#0
;;;57         uint16_t dest_samples = 0;
00000a  2700              MOVS     r7,#0
;;;58         // samples between last sample of previous block and first sample in current block 
;;;59         while (context->src_pos >= 0xffff0000){
00000c  e02b              B        |L1.102|
                  |L1.14|
;;;60             const uint16_t t = context->src_pos & 0xffffu;
00000e  f8b4c000          LDRH     r12,[r4,#0]
000012  fa1ff28c          UXTH     r2,r12
;;;61             int i;
;;;62             for (i=0;i<context->num_channels;i++){
000016  2000              MOVS     r0,#0
000018  e017              B        |L1.74|
                  |L1.26|
;;;63                 int s1 = context->last_sample[i];
00001a  f1040a08          ADD      r10,r4,#8
00001e  f93ac010          LDRSH    r12,[r10,r0,LSL #1]
;;;64                 int s2 = input_buffer[i];
000022  f9318010          LDRSH    r8,[r1,r0,LSL #1]
;;;65                 int os = ((s1*(0x10000u - t)) + (s2*t)) >> 16u;
000026  f5c23a80          RSB      r10,r2,#0x10000
00002a  fb0afa0c          MUL      r10,r10,r12
00002e  fb08aa02          MLA      r10,r8,r2,r10
000032  ea4f491a          LSR      r9,r10,#16
;;;66                 output_buffer[dest_samples++] = os;
000036  fa0ffb89          SXTH     r11,r9
00003a  46ba              MOV      r10,r7
00003c  f1070e01          ADD      lr,r7,#1
000040  fa1ff78e          UXTH     r7,lr
000044  f823b01a          STRH     r11,[r3,r10,LSL #1]
000048  1c40              ADDS     r0,r0,#1              ;62
                  |L1.74|
00004a  f8d4c00c          LDR      r12,[r4,#0xc]         ;62
00004e  4584              CMP      r12,r0                ;62
000050  dce3              BGT      |L1.26|
;;;67             }
;;;68             dest_frames++;
000052  f1060c01          ADD      r12,r6,#1
000056  fa1ff68c          UXTH     r6,r12
;;;69             context->src_pos += context->src_step;
00005a  e9d4c800          LDRD     r12,r8,[r4,#0]
00005e  44c4              ADD      r12,r12,r8
000060  f8c4c000          STR      r12,[r4,#0]
;;;70         }
000064  bf00              NOP      
                  |L1.102|
000066  6820              LDR      r0,[r4,#0]            ;59
000068  f5103f80          CMN      r0,#0x10000           ;59
00006c  d2cf              BCS      |L1.14|
;;;71         // process current block
;;;72         while (true){
00006e  e057              B        |L1.288|
                  |L1.112|
;;;73             const uint16_t src_pos = context->src_pos >> 16;
000070  f8d49000          LDR      r9,[r4,#0]
000074  ea4f4c19          LSR      r12,r9,#16
;;;74             const uint16_t t       = context->src_pos & 0xffffu;
000078  f8b49000          LDRH     r9,[r4,#0]
00007c  fa1ff889          UXTH     r8,r9
;;;75             int index = src_pos * context->num_channels;
000080  f8d4900c          LDR      r9,[r4,#0xc]
000084  fb09f20c          MUL      r2,r9,r12
;;;76             int i;
;;;77             if (src_pos >= (num_frames - 1u)){
000088  f1a50901          SUB      r9,r5,#1
00008c  45e1              CMP      r9,r12
00008e  d815              BHI      |L1.188|
;;;78                 // store last sample
;;;79                 for (i=0;i<context->num_channels;i++){
000090  2000              MOVS     r0,#0
000092  e008              B        |L1.166|
                  |L1.148|
;;;80                     context->last_sample[i] = input_buffer[index++];
000094  4691              MOV      r9,r2
000096  1c52              ADDS     r2,r2,#1
000098  f831a019          LDRH     r10,[r1,r9,LSL #1]
00009c  f1040908          ADD      r9,r4,#8
0000a0  f829a010          STRH     r10,[r9,r0,LSL #1]
0000a4  1c40              ADDS     r0,r0,#1              ;79
                  |L1.166|
0000a6  f8d4900c          LDR      r9,[r4,#0xc]          ;79
0000aa  4581              CMP      r9,r0                 ;79
0000ac  dcf2              BGT      |L1.148|
;;;81                 }
;;;82                 // samples processed
;;;83                 context->src_pos -= num_frames << 16;
0000ae  f8d49000          LDR      r9,[r4,#0]
0000b2  eba94905          SUB      r9,r9,r5,LSL #16
0000b6  f8c49000          STR      r9,[r4,#0]
;;;84                 break;
0000ba  e032              B        |L1.290|
                  |L1.188|
;;;85             }
;;;86             for (i=0;i<context->num_channels;i++){
0000bc  2000              MOVS     r0,#0
0000be  e021              B        |L1.260|
                  |L1.192|
;;;87                 int s1 = input_buffer[index];
0000c0  f9319012          LDRSH    r9,[r1,r2,LSL #1]
;;;88                 int s2 = input_buffer[index+context->num_channels];
0000c4  f8d4a00c          LDR      r10,[r4,#0xc]
0000c8  4492              ADD      r10,r10,r2
0000ca  f931a01a          LDRSH    r10,[r1,r10,LSL #1]
0000ce  f8cda004          STR      r10,[sp,#4]
;;;89                 int os = ((s1*(0x10000u - t)) + (s2*t)) >> 16u;
0000d2  f5c83a80          RSB      r10,r8,#0x10000
0000d6  fb0afa09          MUL      r10,r10,r9
0000da  f8ddb004          LDR      r11,[sp,#4]
0000de  fb0baa08          MLA      r10,r11,r8,r10
0000e2  ea4f4a1a          LSR      r10,r10,#16
0000e6  f8cda000          STR      r10,[sp,#0]
;;;90                 output_buffer[dest_samples++] = os;
0000ea  f8dda000          LDR      r10,[sp,#0]
0000ee  fa0ffb8a          SXTH     r11,r10
0000f2  46ba              MOV      r10,r7
0000f4  f1070e01          ADD      lr,r7,#1
0000f8  fa1ff78e          UXTH     r7,lr
0000fc  f823b01a          STRH     r11,[r3,r10,LSL #1]
;;;91                 index++;
000100  1c52              ADDS     r2,r2,#1
000102  1c40              ADDS     r0,r0,#1              ;86
                  |L1.260|
000104  f8d4900c          LDR      r9,[r4,#0xc]          ;86
000108  4581              CMP      r9,r0                 ;86
00010a  dcd9              BGT      |L1.192|
;;;92             }
;;;93             dest_frames++;
00010c  f1060901          ADD      r9,r6,#1
000110  fa1ff689          UXTH     r6,r9
;;;94             context->src_pos += context->src_step;
000114  e9d49a00          LDRD     r9,r10,[r4,#0]
000118  44d1              ADD      r9,r9,r10
00011a  f8c49000          STR      r9,[r4,#0]
;;;95         }
00011e  bf00              NOP      
                  |L1.288|
000120  e7a6              B        |L1.112|
                  |L1.290|
000122  bf00              NOP                            ;84
;;;96         return dest_frames;
000124  4630              MOV      r0,r6
;;;97     }
000126  e8bd8ffc          POP      {r2-r11,pc}
                          ENDP


                          AREA ||i.btstack_resample_init||, CODE, READONLY, ALIGN=1

                  btstack_resample_init PROC
;;;42     
;;;43     void btstack_resample_init(btstack_resample_t * context, int num_channels){
000000  2200              MOVS     r2,#0
;;;44         context->src_pos = 0;
000002  6002              STR      r2,[r0,#0]
;;;45         context->src_step = 0x10000;  // default resampling 1.0
000004  f44f3280          MOV      r2,#0x10000
000008  6042              STR      r2,[r0,#4]
;;;46         context->last_sample[0] = 0;
00000a  2200              MOVS     r2,#0
00000c  8102              STRH     r2,[r0,#8]
;;;47         context->last_sample[1] = 0;
00000e  2300              MOVS     r3,#0
000010  8143              STRH     r3,[r0,#0xa]
;;;48         context->num_channels   = num_channels;
000012  60c1              STR      r1,[r0,#0xc]
;;;49     }
000014  4770              BX       lr
;;;50     
                          ENDP


                          AREA ||i.btstack_resample_set_factor||, CODE, READONLY, ALIGN=1

                  btstack_resample_set_factor PROC
;;;50     
;;;51     void btstack_resample_set_factor(btstack_resample_t * context, uint32_t src_step){
000000  6041              STR      r1,[r0,#4]
;;;52         context->src_step = src_step;
;;;53     }
000002  4770              BX       lr
;;;54     
                          ENDP

