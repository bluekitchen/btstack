; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bt_timer.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bt_timer.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\Middleware\blue_angel\inc -I..\..\Middleware\bt_callback_manager -I..\..\Middleware\blue_angel\btif -I..\..\Middleware\blue_angel\common -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\src\common -I..\..\Middleware\blue_angel\src\inc -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\platform\rtos -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\ut_manager\Cunit\Headers -I..\..\Middleware\ut_manager\Cunit\interface -I..\..\Middleware\blue_angel\platform\test -I..\..\Middleware\blue_angel\driver -I..\..\Middleware\blue_angel\src\core\hci -I..\..\User\bt\inc -I..\..\Middleware\bt_callback_manager -I..\..\Middleware\at_command -I..\..\Middleware\blue_angel\src\core\gap -I..\..\Middleware\blue_angel\src\core\l2cap -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=522 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DNDEBUG --omf_browse=.\flash\obj\bt_timer.crf ..\..\Middleware\blue_angel\src\common\bt_timer.c]
                          THUMB

                          AREA ||i.bt_timer_cancel||, CODE, READONLY, ALIGN=2

                  bt_timer_cancel PROC
;;;86     
;;;87     bt_status_t bt_timer_cancel(uint32_t timer_id)
000000  b5f1              PUSH     {r0,r4-r7,lr}
;;;88     {
;;;89         bt_timer_t *timer = NULL;
000002  2600              MOVS     r6,#0
;;;90         uint32_t current_tick = 0;
000004  2700              MOVS     r7,#0
;;;91         int32_t diff = 0;
000006  2500              MOVS     r5,#0
;;;92         bt_linknode_t *pre = bt_linknode_travel_node(&bt_timer_list, bt_timer_cmp_by_timerid, (const void *)&timer_id);
000008  466a              MOV      r2,sp
00000a  4914              LDR      r1,|L1.92|
00000c  4814              LDR      r0,|L1.96|
00000e  f7fffffe          BL       bt_linknode_travel_node
000012  4604              MOV      r4,r0
;;;93         if (pre == NULL) {
000014  b90c              CBNZ     r4,|L1.26|
;;;94             return BT_STATUS_TIMER_NOT_FOUND;
000016  4813              LDR      r0,|L1.100|
                  |L1.24|
;;;95         }
;;;96         timer = (bt_timer_t *)bt_linknode_delete_node(pre, BT_NODE_FRONT);
;;;97         /*删除的是第一个timer node*/
;;;98         if (pre == &bt_timer_list) {
;;;99             bt_timer_stop_timer();
;;;100            if (bt_timer_list.next) {
;;;101                current_tick = bt_timer_get_current_tick();
;;;102                diff = ((bt_timer_t *)(bt_timer_list.next))->time_ms - current_tick;
;;;103                if (diff < 0) {
;;;104                    diff = 0;
;;;105                }
;;;106                bt_timer_start_timer(diff);
;;;107            }
;;;108        }
;;;109        bt_fixed_memory_free(BT_FIXED_MM_TIMER, (uint8_t *)timer);
;;;110    
;;;111        return BT_STATUS_SUCCESS;
;;;112    }
000018  bdf8              POP      {r3-r7,pc}
                  |L1.26|
00001a  2101              MOVS     r1,#1                 ;96
00001c  4620              MOV      r0,r4                 ;96
00001e  f7fffffe          BL       bt_linknode_delete_node
000022  4606              MOV      r6,r0                 ;96
000024  480e              LDR      r0,|L1.96|
000026  4284              CMP      r4,r0                 ;98
000028  d111              BNE      |L1.78|
00002a  f7fffffe          BL       bt_timer_stop_timer
00002e  480c              LDR      r0,|L1.96|
000030  6800              LDR      r0,[r0,#0]            ;100  ; bt_timer_list
000032  b160              CBZ      r0,|L1.78|
000034  f7fffffe          BL       bt_timer_get_current_tick
000038  4607              MOV      r7,r0                 ;101
00003a  4809              LDR      r0,|L1.96|
00003c  6800              LDR      r0,[r0,#0]            ;102  ; bt_timer_list
00003e  68c0              LDR      r0,[r0,#0xc]          ;102
000040  1bc5              SUBS     r5,r0,r7              ;102
000042  2d00              CMP      r5,#0                 ;103
000044  da00              BGE      |L1.72|
000046  2500              MOVS     r5,#0                 ;104
                  |L1.72|
000048  4628              MOV      r0,r5                 ;106
00004a  f7fffffe          BL       bt_timer_start_timer
                  |L1.78|
00004e  4631              MOV      r1,r6                 ;109
000050  2000              MOVS     r0,#0                 ;109
000052  f7fffffe          BL       bt_fixed_memory_free
000056  2001              MOVS     r0,#1                 ;111
000058  e7de              B        |L1.24|
;;;113    
                          ENDP

00005a  0000              DCW      0x0000
                  |L1.92|
                          DCD      bt_timer_cmp_by_timerid
                  |L1.96|
                          DCD      bt_timer_list
                  |L1.100|
                          DCD      0x10000001

                          AREA ||i.bt_timer_cancel_and_callback||, CODE, READONLY, ALIGN=2

                  bt_timer_cancel_and_callback PROC
;;;123    
;;;124    bt_status_t bt_timer_cancel_and_callback(uint32_t timer_id, const void *param)
000000  b5f0              PUSH     {r4-r7,lr}
;;;125    {
000002  b085              SUB      sp,sp,#0x14
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;126        bt_status_t status = BT_STATUS_SUCCESS;
000008  2701              MOVS     r7,#1
;;;127        bt_timer_t tmp = {0};
00000a  2114              MOVS     r1,#0x14
00000c  4668              MOV      r0,sp
00000e  f7fffffe          BL       __aeabi_memclr4
;;;128        bt_timer_t *timer = NULL;
000012  2600              MOVS     r6,#0
;;;129        /*bt_linknode_t *pre = bt_linknode_travel_node(&bt_timer_list, bt_timer_cmp_by_timerid, (const void *)&timer_id);
;;;130        if (pre == NULL) {
;;;131        	return BT_STATUS_TIMER_NOT_FOUND;
;;;132        }
;;;133        timer = (bt_timer_t *)(pre->next);*/
;;;134        timer = bt_timer_find(timer_id);
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       bt_timer_find
00001a  4606              MOV      r6,r0
;;;135        if (timer == NULL) {
00001c  b916              CBNZ     r6,|L2.36|
;;;136            return BT_STATUS_TIMER_NOT_FOUND;
00001e  480b              LDR      r0,|L2.76|
                  |L2.32|
;;;137        }
;;;138        bt_memcpy(&tmp, timer, sizeof(bt_timer_t));
;;;139        bt_timer_cancel(timer_id);
;;;140        if (tmp.timeout_cb) {
;;;141            status = tmp.timeout_cb(false, timer_id, tmp.data, param);
;;;142        }
;;;143        return status;
;;;144    }
000020  b005              ADD      sp,sp,#0x14
000022  bdf0              POP      {r4-r7,pc}
                  |L2.36|
000024  2214              MOVS     r2,#0x14              ;138
000026  4631              MOV      r1,r6                 ;138
000028  4668              MOV      r0,sp                 ;138
00002a  f7fffffe          BL       bt_memcpy
00002e  4620              MOV      r0,r4                 ;139
000030  f7fffffe          BL       bt_timer_cancel
000034  9804              LDR      r0,[sp,#0x10]         ;140
000036  b138              CBZ      r0,|L2.72|
000038  462b              MOV      r3,r5                 ;141
00003a  4621              MOV      r1,r4                 ;141
00003c  2000              MOVS     r0,#0                 ;141
00003e  f8ddc010          LDR      r12,[sp,#0x10]        ;141
000042  9a02              LDR      r2,[sp,#8]            ;141
000044  47e0              BLX      r12                   ;141
000046  4607              MOV      r7,r0                 ;141
                  |L2.72|
000048  4638              MOV      r0,r7                 ;143
00004a  e7e9              B        |L2.32|
;;;145    
                          ENDP

                  |L2.76|
                          DCD      0x10000001

                          AREA ||i.bt_timer_check_timeout_handler||, CODE, READONLY, ALIGN=2

                  bt_timer_check_timeout_handler PROC
;;;156    
;;;157    void bt_timer_check_timeout_handler()
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;158    {
000004  b086              SUB      sp,sp,#0x18
;;;159        bt_timer_t *timer = NULL;
000006  2500              MOVS     r5,#0
;;;160        uint32_t current_tick = bt_timer_get_current_tick();
000008  f7fffffe          BL       bt_timer_get_current_tick
00000c  4606              MOV      r6,r0
;;;161        int32_t diff = 0;
00000e  2700              MOVS     r7,#0
;;;162        bt_linknode_t expired_node_header = {NULL};
000010  2000              MOVS     r0,#0
000012  9005              STR      r0,[sp,#0x14]
;;;163        bt_linknode_t *tmp = NULL;
000014  2400              MOVS     r4,#0
;;;164        bt_timer_t local_timer_buf = {0};
000016  2114              MOVS     r1,#0x14
000018  4668              MOV      r0,sp
00001a  f7fffffe          BL       __aeabi_memclr4
;;;165    
;;;166        tmp = &bt_timer_list;
00001e  4c25              LDR      r4,|L3.180|
;;;167        while (tmp != NULL) {
000020  e011              B        |L3.70|
                  |L3.34|
;;;168            timer = (bt_timer_t *)(tmp->next);
000022  6825              LDR      r5,[r4,#0]
;;;169            if (timer != NULL && timer->time_ms <= current_tick) {
000024  b175              CBZ      r5,|L3.68|
000026  68e8              LDR      r0,[r5,#0xc]
000028  42b0              CMP      r0,r6
00002a  d80b              BHI      |L3.68|
;;;170                bt_linknode_insert_node(&expired_node_header, bt_linknode_delete_node(tmp, BT_NODE_FRONT), BT_NODE_TAIL);
00002c  2101              MOVS     r1,#1
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       bt_linknode_delete_node
000034  4680              MOV      r8,r0
000036  2202              MOVS     r2,#2
000038  4641              MOV      r1,r8
00003a  a805              ADD      r0,sp,#0x14
00003c  f7fffffe          BL       bt_linknode_insert_node
;;;171                tmp = &bt_timer_list;
000040  4c1c              LDR      r4,|L3.180|
000042  e000              B        |L3.70|
                  |L3.68|
;;;172            } else {
;;;173                tmp = tmp->next;
000044  6824              LDR      r4,[r4,#0]
                  |L3.70|
000046  2c00              CMP      r4,#0                 ;167
000048  d1eb              BNE      |L3.34|
;;;174            }
;;;175        }
;;;176        /*没有timer到期*/
;;;177        if (expired_node_header.next == NULL) {
00004a  9805              LDR      r0,[sp,#0x14]
00004c  b910              CBNZ     r0,|L3.84|
                  |L3.78|
;;;178            return;
;;;179        }
;;;180    
;;;181        while (expired_node_header.next != NULL) {
;;;182            timer = (bt_timer_t *)(expired_node_header.next);
;;;183            bt_memcpy(&local_timer_buf, timer, sizeof(bt_timer_t));
;;;184            if (local_timer_buf.timeout_cb) {
;;;185                local_timer_buf.timeout_cb(true, local_timer_buf.timer_id, local_timer_buf.data, NULL);
;;;186            }
;;;187            bt_linknode_delete_node(&expired_node_header, BT_NODE_FRONT);
;;;188            bt_fixed_memory_free(BT_FIXED_MM_TIMER, (uint8_t *)timer);
;;;189        }
;;;190        /*到期的是第一个timer，则需要更新timer list*/
;;;191        if (bt_timer_list.next) {
;;;192            bt_timer_stop_timer();
;;;193            current_tick = bt_timer_get_current_tick();
;;;194            diff = ((bt_timer_t *)(bt_timer_list.next))->time_ms - current_tick;
;;;195            if (diff < 0) {
;;;196                diff = 0;
;;;197            }
;;;198            bt_timer_start_timer(diff);
;;;199        }
;;;200    }
00004e  b006              ADD      sp,sp,#0x18
000050  e8bd81f0          POP      {r4-r8,pc}
                  |L3.84|
000054  e016              B        |L3.132|
                  |L3.86|
000056  9d05              LDR      r5,[sp,#0x14]         ;182
000058  2214              MOVS     r2,#0x14              ;183
00005a  4629              MOV      r1,r5                 ;183
00005c  4668              MOV      r0,sp                 ;183
00005e  f7fffffe          BL       bt_memcpy
000062  9804              LDR      r0,[sp,#0x10]         ;184
000064  b130              CBZ      r0,|L3.116|
000066  2300              MOVS     r3,#0                 ;185
000068  2001              MOVS     r0,#1                 ;185
00006a  f8ddc010          LDR      r12,[sp,#0x10]        ;185
00006e  e9dd1201          LDRD     r1,r2,[sp,#4]         ;185
000072  47e0              BLX      r12                   ;185
                  |L3.116|
000074  2101              MOVS     r1,#1                 ;187
000076  a805              ADD      r0,sp,#0x14           ;187
000078  f7fffffe          BL       bt_linknode_delete_node
00007c  4629              MOV      r1,r5                 ;188
00007e  2000              MOVS     r0,#0                 ;188
000080  f7fffffe          BL       bt_fixed_memory_free
                  |L3.132|
000084  9805              LDR      r0,[sp,#0x14]         ;181
000086  2800              CMP      r0,#0                 ;181
000088  d1e5              BNE      |L3.86|
00008a  480a              LDR      r0,|L3.180|
00008c  6800              LDR      r0,[r0,#0]            ;191  ; bt_timer_list
00008e  b170              CBZ      r0,|L3.174|
000090  f7fffffe          BL       bt_timer_stop_timer
000094  f7fffffe          BL       bt_timer_get_current_tick
000098  4606              MOV      r6,r0                 ;193
00009a  4806              LDR      r0,|L3.180|
00009c  6800              LDR      r0,[r0,#0]            ;194  ; bt_timer_list
00009e  68c0              LDR      r0,[r0,#0xc]          ;194
0000a0  1b87              SUBS     r7,r0,r6              ;194
0000a2  2f00              CMP      r7,#0                 ;195
0000a4  da00              BGE      |L3.168|
0000a6  2700              MOVS     r7,#0                 ;196
                  |L3.168|
0000a8  4638              MOV      r0,r7                 ;198
0000aa  f7fffffe          BL       bt_timer_start_timer
                  |L3.174|
0000ae  bf00              NOP      
0000b0  e7cd              B        |L3.78|
;;;201    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L3.180|
                          DCD      bt_timer_list

                          AREA ||i.bt_timer_cmp_by_timer_duration||, CODE, READONLY, ALIGN=2

                  bt_timer_cmp_by_timer_duration PROC
;;;32     
;;;33     bool bt_timer_cmp_by_timer_duration(const bt_linknode_t *node, const void *data)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;34     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;35         bt_timer_duration_t *duration = NULL;
000008  2600              MOVS     r6,#0
;;;36         bt_timer_t *timer = NULL;
00000a  2700              MOVS     r7,#0
;;;37         int32_t is_timeout = 0;
00000c  46b0              MOV      r8,r6
;;;38         int32_t diff = 0;
00000e  46b1              MOV      r9,r6
;;;39         BT_ASSERT(node && data);
000010  b10c              CBZ      r4,|L4.22|
000012  b105              CBZ      r5,|L4.22|
000014  e003              B        |L4.30|
                  |L4.22|
000016  2127              MOVS     r1,#0x27
000018  a00e              ADR      r0,|L4.84|
00001a  f7fffffe          BL       assert_failed
                  |L4.30|
;;;40     
;;;41         duration = (bt_timer_duration_t *)data;
00001e  462e              MOV      r6,r5
;;;42         timer = (bt_timer_t *)(node->next);
000020  6827              LDR      r7,[r4,#0]
;;;43         if (timer == NULL) {
000022  b917              CBNZ     r7,|L4.42|
;;;44             return true;
000024  2001              MOVS     r0,#1
                  |L4.38|
;;;45         }
;;;46     
;;;47         is_timeout = timer->time_ms - duration->current_tick;
;;;48         diff = timer->time_ms - duration->current_tick - duration->duration;
;;;49         return ((is_timeout > 0) && (diff > 0));
;;;50     }
000026  e8bd87f0          POP      {r4-r10,pc}
                  |L4.42|
00002a  68f8              LDR      r0,[r7,#0xc]          ;47
00002c  6831              LDR      r1,[r6,#0]            ;47
00002e  eba00801          SUB      r8,r0,r1              ;47
000032  68f8              LDR      r0,[r7,#0xc]          ;48
000034  6831              LDR      r1,[r6,#0]            ;48
000036  1a40              SUBS     r0,r0,r1              ;48
000038  6871              LDR      r1,[r6,#4]            ;48
00003a  eba00901          SUB      r9,r0,r1              ;48
00003e  f1b80f00          CMP      r8,#0                 ;49
000042  dd04              BLE      |L4.78|
000044  f1b90f00          CMP      r9,#0                 ;49
000048  dd01              BLE      |L4.78|
00004a  2001              MOVS     r0,#1                 ;49
00004c  e7eb              B        |L4.38|
                  |L4.78|
00004e  2000              MOVS     r0,#0                 ;49
000050  e7e9              B        |L4.38|
;;;51     
                          ENDP

000052  0000              DCW      0x0000
                  |L4.84|
000054  2e2e5c2e          DCB      "..\\..\\Middleware\\blue_angel\\src\\common\\bt_timer.c"
000058  2e5c4d69
00005c  64646c65
000060  77617265
000064  5c626c75
000068  655f616e
00006c  67656c5c
000070  7372635c
000074  636f6d6d
000078  6f6e5c62
00007c  745f7469
000080  6d65722e
000084  63      
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0

                          AREA ||i.bt_timer_cmp_by_timerid||, CODE, READONLY, ALIGN=2

                  bt_timer_cmp_by_timerid PROC
;;;18     
;;;19     bool bt_timer_cmp_by_timerid(const bt_linknode_t *node, const void *data)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;20     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;21         bt_timer_t *timer = NULL;
000008  2600              MOVS     r6,#0
;;;22         uint32_t timer_id = 0;
00000a  2700              MOVS     r7,#0
;;;23         BT_ASSERT(node && data);
00000c  b10c              CBZ      r4,|L5.18|
00000e  b105              CBZ      r5,|L5.18|
000010  e003              B        |L5.26|
                  |L5.18|
000012  2117              MOVS     r1,#0x17
000014  a007              ADR      r0,|L5.52|
000016  f7fffffe          BL       assert_failed
                  |L5.26|
;;;24     
;;;25         timer = (bt_timer_t *)node->next;
00001a  6826              LDR      r6,[r4,#0]
;;;26         if (timer == NULL) {
00001c  b916              CBNZ     r6,|L5.36|
;;;27             return true;
00001e  2001              MOVS     r0,#1
                  |L5.32|
;;;28         }
;;;29         timer_id = *(uint32_t *)data;
;;;30         return timer->timer_id == timer_id;
;;;31     }
000020  e8bd81f0          POP      {r4-r8,pc}
                  |L5.36|
000024  682f              LDR      r7,[r5,#0]            ;29
000026  6870              LDR      r0,[r6,#4]            ;30
000028  42b8              CMP      r0,r7                 ;30
00002a  d101              BNE      |L5.48|
00002c  2001              MOVS     r0,#1                 ;30
00002e  e7f7              B        |L5.32|
                  |L5.48|
000030  2000              MOVS     r0,#0                 ;30
000032  e7f5              B        |L5.32|
;;;32     
                          ENDP

                  |L5.52|
000034  2e2e5c2e          DCB      "..\\..\\Middleware\\blue_angel\\src\\common\\bt_timer.c"
000038  2e5c4d69
00003c  64646c65
000040  77617265
000044  5c626c75
000048  655f616e
00004c  67656c5c
000050  7372635c
000054  636f6d6d
000058  6f6e5c62
00005c  745f7469
000060  6d65722e
000064  63      
000065  00                DCB      0
000066  00                DCB      0
000067  00                DCB      0

                          AREA ||i.bt_timer_find||, CODE, READONLY, ALIGN=2

                  bt_timer_find PROC
;;;113    
;;;114    bt_timer_t *bt_timer_find(uint32_t timer_id)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;115    {
;;;116        bt_linknode_t *pre = NULL;
000002  2400              MOVS     r4,#0
;;;117        pre = bt_linknode_travel_node(&bt_timer_list, bt_timer_cmp_by_timerid, (const void *)&timer_id);
000004  466a              MOV      r2,sp
000006  4905              LDR      r1,|L6.28|
000008  4805              LDR      r0,|L6.32|
00000a  f7fffffe          BL       bt_linknode_travel_node
00000e  4604              MOV      r4,r0
;;;118        if (pre) {
000010  b10c              CBZ      r4,|L6.22|
;;;119            return (bt_timer_t *)(pre->next);
000012  6820              LDR      r0,[r4,#0]
                  |L6.20|
;;;120        }
;;;121        return NULL;
;;;122    }
000014  bd38              POP      {r3-r5,pc}
                  |L6.22|
000016  2000              MOVS     r0,#0                 ;121
000018  e7fc              B        |L6.20|
;;;123    
                          ENDP

00001a  0000              DCW      0x0000
                  |L6.28|
                          DCD      bt_timer_cmp_by_timerid
                  |L6.32|
                          DCD      bt_timer_list

                          AREA ||i.bt_timer_start||, CODE, READONLY, ALIGN=2

                  bt_timer_start PROC
;;;51     
;;;52     bt_status_t bt_timer_start(uint32_t timer_id, uint32_t timer_length, uint32_t data, bt_timer_timeout_callback_t cb)
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;53     {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
;;;54         bt_timer_t *timer = NULL;
00000c  2400              MOVS     r4,#0
;;;55         bt_timer_duration_t duration = {0};
00000e  2000              MOVS     r0,#0
000010  9000              STR      r0,[sp,#0]
000012  9001              STR      r0,[sp,#4]
;;;56         bt_linknode_t *pre = NULL;
000014  2600              MOVS     r6,#0
;;;57         BT_ASSERT(timer_length > 0);
000016  b105              CBZ      r5,|L7.26|
000018  e003              B        |L7.34|
                  |L7.26|
00001a  2139              MOVS     r1,#0x39
00001c  a01a              ADR      r0,|L7.136|
00001e  f7fffffe          BL       assert_failed
                  |L7.34|
;;;58         if (NULL != bt_timer_find(timer_id)) {
000022  4638              MOV      r0,r7
000024  f7fffffe          BL       bt_timer_find
000028  b110              CBZ      r0,|L7.48|
;;;59             return BT_STATUS_FAIL;
00002a  2002              MOVS     r0,#2
                  |L7.44|
;;;60         }
;;;61     
;;;62         timer = (bt_timer_t *)bt_fixed_memory_allocate(BT_FIXED_MM_TIMER);
;;;63         if (timer == NULL) {
;;;64             return BT_STATUS_OUT_OF_MEMORY;
;;;65         }
;;;66         duration.current_tick = bt_os_layer_get_system_tick();
;;;67         duration.duration = timer_length;
;;;68         timer->timer_id = timer_id;
;;;69         timer->data = data;
;;;70         timer->timeout_cb = cb;
;;;71         timer->time_ms = duration.current_tick + duration.duration;
;;;72     
;;;73         pre = bt_linknode_travel_node(&bt_timer_list, bt_timer_cmp_by_timer_duration, (void *)&duration);
;;;74         if (pre != NULL) {
;;;75             bt_linknode_insert_node(pre, (bt_linknode_t *)timer, BT_NODE_FRONT);
;;;76             if (pre == &bt_timer_list) {
;;;77                 /*update for the first timer*/
;;;78                 bt_timer_stop_timer();
;;;79                 bt_timer_start_timer(timer_length);
;;;80             }
;;;81             return BT_STATUS_SUCCESS;
;;;82         }
;;;83     
;;;84         return BT_STATUS_FAIL;
;;;85     }
00002c  e8bd87fc          POP      {r2-r10,pc}
                  |L7.48|
000030  2000              MOVS     r0,#0                 ;62
000032  f7fffffe          BL       bt_fixed_memory_allocate
000036  4604              MOV      r4,r0                 ;62
000038  b90c              CBNZ     r4,|L7.62|
00003a  2020              MOVS     r0,#0x20              ;64
00003c  e7f6              B        |L7.44|
                  |L7.62|
00003e  f7fffffe          BL       bt_os_layer_get_system_tick
000042  9000              STR      r0,[sp,#0]            ;66
000044  9501              STR      r5,[sp,#4]            ;67
000046  6067              STR      r7,[r4,#4]            ;68
000048  f8c48008          STR      r8,[r4,#8]            ;69
00004c  f8c49010          STR      r9,[r4,#0x10]         ;70
000050  e9dd0100          LDRD     r0,r1,[sp,#0]         ;71
000054  4408              ADD      r0,r0,r1              ;71
000056  60e0              STR      r0,[r4,#0xc]          ;71
000058  466a              MOV      r2,sp                 ;73
00005a  4918              LDR      r1,|L7.188|
00005c  4818              LDR      r0,|L7.192|
00005e  f7fffffe          BL       bt_linknode_travel_node
000062  4606              MOV      r6,r0                 ;73
000064  b176              CBZ      r6,|L7.132|
000066  2201              MOVS     r2,#1                 ;75
000068  4621              MOV      r1,r4                 ;75
00006a  4630              MOV      r0,r6                 ;75
00006c  f7fffffe          BL       bt_linknode_insert_node
000070  4813              LDR      r0,|L7.192|
000072  4286              CMP      r6,r0                 ;76
000074  d104              BNE      |L7.128|
000076  f7fffffe          BL       bt_timer_stop_timer
00007a  4628              MOV      r0,r5                 ;79
00007c  f7fffffe          BL       bt_timer_start_timer
                  |L7.128|
000080  2001              MOVS     r0,#1                 ;81
000082  e7d3              B        |L7.44|
                  |L7.132|
000084  2002              MOVS     r0,#2                 ;84
000086  e7d1              B        |L7.44|
;;;86     
                          ENDP

                  |L7.136|
000088  2e2e5c2e          DCB      "..\\..\\Middleware\\blue_angel\\src\\common\\bt_timer.c"
00008c  2e5c4d69
000090  64646c65
000094  77617265
000098  5c626c75
00009c  655f616e
0000a0  67656c5c
0000a4  7372635c
0000a8  636f6d6d
0000ac  6f6e5c62
0000b0  745f7469
0000b4  6d65722e
0000b8  63      
0000b9  00                DCB      0
0000ba  00                DCB      0
0000bb  00                DCB      0
                  |L7.188|
                          DCD      bt_timer_cmp_by_timer_duration
                  |L7.192|
                          DCD      bt_timer_list

                          AREA ||i.bt_timer_stop_all_timer||, CODE, READONLY, ALIGN=2

                  bt_timer_stop_all_timer PROC
;;;145    
;;;146    void bt_timer_stop_all_timer()
000000  b510              PUSH     {r4,lr}
;;;147    {
;;;148        bt_linknode_t *tmp = NULL;
000002  2400              MOVS     r4,#0
;;;149        bt_timer_stop_timer();
000004  f7fffffe          BL       bt_timer_stop_timer
;;;150    
;;;151        while (bt_timer_list.next != NULL) {
000008  e008              B        |L8.28|
                  |L8.10|
;;;152            tmp = bt_linknode_delete_node(&bt_timer_list, BT_NODE_FRONT);
00000a  2101              MOVS     r1,#1
00000c  4806              LDR      r0,|L8.40|
00000e  f7fffffe          BL       bt_linknode_delete_node
000012  4604              MOV      r4,r0
;;;153            bt_fixed_memory_free(BT_FIXED_MM_TIMER, (uint8_t *)tmp);
000014  4621              MOV      r1,r4
000016  2000              MOVS     r0,#0
000018  f7fffffe          BL       bt_fixed_memory_free
                  |L8.28|
00001c  4802              LDR      r0,|L8.40|
00001e  6800              LDR      r0,[r0,#0]            ;151  ; bt_timer_list
000020  2800              CMP      r0,#0                 ;151
000022  d1f2              BNE      |L8.10|
;;;154        }
;;;155    }
000024  bd10              POP      {r4,pc}
;;;156    
                          ENDP

000026  0000              DCW      0x0000
                  |L8.40|
                          DCD      bt_timer_list

                          AREA ||.data||, DATA, ALIGN=0

                  bt_timer_list
                          DCDU     0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Middleware\\blue_angel\\src\\common\\bt_timer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_bt_timer_c_79facf84____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_bt_timer_c_79facf84____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_bt_timer_c_79facf84____REVSH|
#line 128
|__asm___10_bt_timer_c_79facf84____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
