; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bt_gap_classic.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bt_gap_classic.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\..\Middleware\blue_angel\inc -I..\..\Middleware\bt_callback_manager -I..\..\Middleware\blue_angel\btif -I..\..\Middleware\blue_angel\common -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\src\common -I..\..\Middleware\blue_angel\src\inc -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\blue_angel\platform\rtos -I..\..\Middleware\blue_angel\platform -I..\..\Middleware\ut_manager\Cunit\Headers -I..\..\Middleware\ut_manager\Cunit\interface -I..\..\Middleware\blue_angel\platform\test -I..\..\Middleware\blue_angel\driver -I..\..\Middleware\blue_angel\src\core\hci -I..\..\User\bt\inc -I..\..\Middleware\bt_callback_manager -I..\..\Middleware\at_command -I..\..\Middleware\blue_angel\src\core\gap -I..\..\Middleware\blue_angel\src\core\l2cap -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=522 -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD -DNDEBUG --omf_browse=.\flash\obj\bt_gap_classic.crf ..\..\Middleware\blue_angel\src\core\gap\bt_gap_classic.c]
                          THUMB

                          AREA ||i.bt_gap_inquiry||, CODE, READONLY, ALIGN=2

                  bt_gap_inquiry PROC
;;;42     
;;;43     bt_status_t bt_gap_inquiry(bt_hci_lap_t lap, uint8_t length, uint8_t max_response_number)
000000  b5f0              PUSH     {r4-r7,lr}
;;;44     {
000002  b085              SUB      sp,sp,#0x14
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;45     	bt_status_t status;
;;;46     	bt_gap_inquiry_t inquiry;
;;;47     	bt_hci_cmd_t hci_cmd = {BT_HCI_CMD_INQUIRY, 0, NULL};
00000a  4911              LDR      r1,|L1.80|
00000c  c903              LDM      r1,{r0,r1}
00000e  e9cd0101          STRD     r0,r1,[sp,#4]
;;;48     	BT_MUTEX_LOCK();
000012  f7fffffe          BL       bt_task_mutex_lock
;;;49     	inquiry.lap = lap;
000016  9803              LDR      r0,[sp,#0xc]
000018  f3640017          BFI      r0,r4,#0,#24
00001c  9003              STR      r0,[sp,#0xc]
;;;50     	inquiry.length = length;
00001e  b2e8              UXTB     r0,r5
000020  f88d000f          STRB     r0,[sp,#0xf]
;;;51     	inquiry.max_response_number = max_response_number;
000024  f88d6010          STRB     r6,[sp,#0x10]
;;;52     	hci_cmd.length = sizeof(bt_gap_inquiry_t);
000028  2005              MOVS     r0,#5
00002a  f88d0006          STRB     r0,[sp,#6]
;;;53     	hci_cmd.param = (void *)&inquiry;
00002e  a803              ADD      r0,sp,#0xc
000030  9002              STR      r0,[sp,#8]
;;;54     	status = bt_hci_cmd_send(hci_cmd, 0, BT_HCI_CMD_TIMEOUT, NULL);
000032  2000              MOVS     r0,#0
000034  f44f737a          MOV      r3,#0x3e8
000038  4602              MOV      r2,r0
00003a  9000              STR      r0,[sp,#0]
00003c  e9dd0101          LDRD     r0,r1,[sp,#4]
000040  f7fffffe          BL       bt_hci_cmd_send
000044  4607              MOV      r7,r0
;;;55     	BT_MUTEX_UNLOCK();
000046  f7fffffe          BL       bt_task_mutex_unlock
;;;56     	return status;
00004a  4638              MOV      r0,r7
;;;57     }
00004c  b005              ADD      sp,sp,#0x14
00004e  bdf0              POP      {r4-r7,pc}
                          ENDP

                  |L1.80|
                          DCD      ||.constdata||+0x10

                          AREA ||i.bt_gap_set_scan_mode||, CODE, READONLY, ALIGN=2

                  bt_gap_set_scan_mode PROC
;;;30     
;;;31     bt_status_t bt_gap_set_scan_mode(bt_gap_scan_mode_t scan_mode)
000000  b511              PUSH     {r0,r4,lr}
;;;32     {
000002  b083              SUB      sp,sp,#0xc
;;;33     	bt_status_t status;
;;;34     	bt_hci_cmd_t hci_cmd = {BT_HCI_CMD_WRITE_SCAN_ENABLE, 0, NULL};
000004  490c              LDR      r1,|L2.56|
000006  c903              LDM      r1,{r0,r1}
000008  e9cd0101          STRD     r0,r1,[sp,#4]
;;;35     	BT_MUTEX_LOCK();
00000c  f7fffffe          BL       bt_task_mutex_lock
;;;36     	hci_cmd.length = sizeof(bt_gap_scan_mode_t);
000010  2001              MOVS     r0,#1
000012  f88d0006          STRB     r0,[sp,#6]
;;;37     	hci_cmd.param = (void *)&scan_mode;
000016  a803              ADD      r0,sp,#0xc
000018  9002              STR      r0,[sp,#8]
;;;38     	status = bt_hci_cmd_send(hci_cmd, 0, BT_HCI_CMD_TIMEOUT, NULL);
00001a  2000              MOVS     r0,#0
00001c  f44f737a          MOV      r3,#0x3e8
000020  4602              MOV      r2,r0
000022  9000              STR      r0,[sp,#0]
000024  e9dd0101          LDRD     r0,r1,[sp,#4]
000028  f7fffffe          BL       bt_hci_cmd_send
00002c  4604              MOV      r4,r0
;;;39     	BT_MUTEX_UNLOCK();
00002e  f7fffffe          BL       bt_task_mutex_unlock
;;;40     	return status;
000032  4620              MOV      r0,r4
;;;41     }
000034  b004              ADD      sp,sp,#0x10
000036  bd10              POP      {r4,pc}
;;;42     
                          ENDP

                  |L2.56|
                          DCD      ||.constdata||+0x8

                          AREA ||i.bt_gap_write_eir||, CODE, READONLY, ALIGN=2

                  bt_gap_write_eir PROC
;;;15     
;;;16     bt_status_t bt_gap_write_eir(uint8_t *eir_data, uint8_t length)
000000  b570              PUSH     {r4-r6,lr}
;;;17     {
000002  b0c0              SUB      sp,sp,#0x100
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;18     	bt_status_t status;
;;;19     	bt_gap_write_eir_t write_eir;
;;;20     	bt_hci_cmd_t hci_cmd = {BT_HCI_CMD_WRITE_EXT_INQ_RESPONSE, 0, NULL};
000008  4911              LDR      r1,|L3.80|
00000a  c903              LDM      r1,{r0,r1}
00000c  e9cd0101          STRD     r0,r1,[sp,#4]
;;;21     	BT_MUTEX_LOCK();
000010  f7fffffe          BL       bt_task_mutex_lock
;;;22     	write_eir.fec_required = 1;
000014  2001              MOVS     r0,#1
000016  f88d000c          STRB     r0,[sp,#0xc]
;;;23     	bt_memcpy(write_eir.eir, eir_data, length);
00001a  462a              MOV      r2,r5
00001c  4621              MOV      r1,r4
00001e  f10d000d          ADD      r0,sp,#0xd
000022  f7fffffe          BL       bt_memcpy
;;;24     	hci_cmd.length = sizeof(bt_gap_write_eir_t);
000026  20f1              MOVS     r0,#0xf1
000028  f88d0006          STRB     r0,[sp,#6]
;;;25     	hci_cmd.param = (void *)&write_eir;
00002c  a803              ADD      r0,sp,#0xc
00002e  9002              STR      r0,[sp,#8]
;;;26     	status = bt_hci_cmd_send(hci_cmd, 0, BT_HCI_CMD_TIMEOUT, NULL);
000030  2000              MOVS     r0,#0
000032  f44f737a          MOV      r3,#0x3e8
000036  4602              MOV      r2,r0
000038  9000              STR      r0,[sp,#0]
00003a  e9dd0101          LDRD     r0,r1,[sp,#4]
00003e  f7fffffe          BL       bt_hci_cmd_send
000042  4606              MOV      r6,r0
;;;27     	BT_MUTEX_UNLOCK();
000044  f7fffffe          BL       bt_task_mutex_unlock
;;;28     	return status;
000048  4630              MOV      r0,r6
;;;29     }
00004a  b040              ADD      sp,sp,#0x100
00004c  bd70              POP      {r4-r6,pc}
;;;30     
                          ENDP

00004e  0000              DCW      0x0000
                  |L3.80|
                          DCD      ||.constdata||

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  0c52              DCW      0x0c52
000002  0000              DCB      0x00,0x00
                          DCD      0x00000000
000008  0c1a              DCW      0x0c1a
00000a  0000              DCB      0x00,0x00
                          DCD      0x00000000
000010  0401              DCW      0x0401
000012  0000              DCB      0x00,0x00
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\Middleware\\blue_angel\\src\\core\\gap\\bt_gap_classic.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_bt_gap_classic_c_ab1100ae____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_bt_gap_classic_c_ab1100ae____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_bt_gap_classic_c_ab1100ae____REVSH|
#line 128
|__asm___16_bt_gap_classic_c_ab1100ae____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
