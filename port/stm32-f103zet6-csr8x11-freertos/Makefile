##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.1.0] date: [Thu Mar 07 21:47:00 CET 2019] 
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = stm32f103zet6-csr8x11-freertos


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -O0

######################################
# compile variables
######################################

BR_EDR_ENABLE = y

BLE_ENABLE = y

EXAMPLE_PLUS_ENABLE = n

FREERTOS_ENABLE = n

AT_CMD_ENABLE = n

CUNIT_ENABLE = n
#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

BTSTACK_ROOT ?= ../..
VPATH += ${BTSTACK_ROOT}/example

######################################
# source
######################################
# C sources
ifeq (${BLE_ENABLE}, y)
C_DEFS += -DBLE_ENABLE

C_SOURCES += ${BTSTACK_ROOT}/src/ad_parser.c
C_SOURCES += ${BTSTACK_ROOT}/src/ble/att_db.c
C_SOURCES += ${BTSTACK_ROOT}/src/ble/att_dispatch.c
C_SOURCES += ${BTSTACK_ROOT}/src/ble/att_server.c
C_SOURCES += ${BTSTACK_ROOT}/src/ble/gatt-service/ancs_client.c
C_SOURCES += ${BTSTACK_ROOT}/src/ble/gatt-service/battery_service_client.c
C_SOURCES += ${BTSTACK_ROOT}/src/ble/gatt-service/battery_service_server.c
C_SOURCES += ${BTSTACK_ROOT}/src/ble/gatt-service/device_information_service_client.c
C_SOURCES += ${BTSTACK_ROOT}/src/ble/gatt-service/device_information_service_server.c
C_SOURCES += ${BTSTACK_ROOT}/src/ble/gatt-service/hids_device.c
C_SOURCES += ${BTSTACK_ROOT}/src/ble/gatt_client.c
C_SOURCES += ${BTSTACK_ROOT}/src/ble/le_device_db_memory.c
C_SOURCES += ${BTSTACK_ROOT}/src/ble/le_device_db_tlv.c
C_SOURCES += ${BTSTACK_ROOT}/src/ble/sm.c
endif

ifeq (${BR_EDR_ENABLE}, y)
C_DEFS += -DBR_EDR_ENABLE

C_SOURCES += ${BTSTACK_ROOT}/src/classic/a2dp_sink.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/a2dp_source.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/avdtp.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/avdtp_acceptor.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/avdtp_initiator.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/avdtp_sink.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/avdtp_source.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/avdtp_util.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/avrcp.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/avrcp_browsing_controller.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/avrcp_controller.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/avrcp_media_item_iterator.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/avrcp_target.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/bnep.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/btstack_cvsd_plc.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/btstack_link_key_db_tlv.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/btstack_sbc_decoder_bluedroid.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/btstack_sbc_encoder_bluedroid.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/btstack_sbc_plc.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/device_id_server.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/goep_client.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/hfp.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/hfp_ag.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/hfp_gsm_model.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/hfp_hf.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/hfp_msbc.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/hid_device.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/hid_host.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/hsp_ag.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/hsp_hs.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/obex_iterator.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/obex_message_builder.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/pan.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/pbap_client.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/rfcomm.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/gatt_sdp.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/sdp_client.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/sdp_client_rfcomm.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/sdp_server.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/sdp_util.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/spp_server.c
endif

ifeq (${FREERTOS_ENABLE}, y)
	C_DEFS += -DFREERTOS_ENABLE

	C_SOURCES += ${BTSTACK_ROOT}/platform/freertos/btstack_run_loop_freertos.c
	C_SOURCES += ${BTSTACK_ROOT}/platform/freertos/btstack_uart_block_freertos.c
else
	C_SOURCES += ${BTSTACK_ROOT}/platform/embedded/btstack_audio_embedded.c
	C_SOURCES += ${BTSTACK_ROOT}/platform/embedded/btstack_run_loop_embedded.c
	C_SOURCES += ${BTSTACK_ROOT}/platform/embedded/btstack_stdin_embedded.c
	C_SOURCES += ${BTSTACK_ROOT}/platform/embedded/btstack_tlv_flash_bank.c
	C_SOURCES += ${BTSTACK_ROOT}/platform/embedded/btstack_uart_block_embedded.c
	C_SOURCES += ${BTSTACK_ROOT}/platform/embedded/hci_dump_embedded_stdout.c
	C_SOURCES += ${BTSTACK_ROOT}/platform/embedded/hci_dump_segger_rtt_stdout.c
endif

#C_SOURCES += ${BTSTACK_ROOT}/3rd-party/hxcmod-player/hxcmod.c
#C_SOURCES += ${BTSTACK_ROOT}/3rd-party/hxcmod-player/mods/nao-deceased_by_disease.c
#C_SOURCES += ${BTSTACK_ROOT}/3rd-party/micro-ecc/uECC.c
#C_SOURCES += ${BTSTACK_ROOT}/3rd-party/segger-rtt/SEGGER_RTT.c
#C_SOURCES += ${BTSTACK_ROOT}/3rd-party/segger-rtt/SEGGER_RTT_printf.c
#C_SOURCES += ${BTSTACK_ROOT}/3rd-party/segger-rtt/SEGGER_RTT_Syscalls_GCC.c
#C_SOURCES += ${BTSTACK_ROOT}/3rd-party/yxml/yxml.c
#C_SOURCES += ${BTSTACK_ROOT}/3rd-party/md5/md5.c
C_SOURCES += ${BTSTACK_ROOT}/chipset/csr/btstack_chipset_csr.c
#C_SOURCES += ${BTSTACK_ROOT}/example/gap_le_advertisements.c
#C_SOURCES += ${BTSTACK_ROOT}/example/gap_link_keys.c
#C_SOURCES += ${BTSTACK_ROOT}/example/hid_mouse_demo.c
#C_SOURCES += ${BTSTACK_ROOT}/example/gatt_device_information_query.c
C_SOURCES += ${BTSTACK_ROOT}/example/gatt_counter.c
C_SOURCES += ${BTSTACK_ROOT}/src/btstack_audio.c
C_SOURCES += ${BTSTACK_ROOT}/src/btstack_crypto.c
C_SOURCES += ${BTSTACK_ROOT}/src/btstack_hid_parser.c
C_SOURCES += ${BTSTACK_ROOT}/src/btstack_linked_list.c
C_SOURCES += ${BTSTACK_ROOT}/src/btstack_memory.c
C_SOURCES += ${BTSTACK_ROOT}/src/btstack_memory_pool.c
C_SOURCES += ${BTSTACK_ROOT}/src/btstack_resample.c
C_SOURCES += ${BTSTACK_ROOT}/src/btstack_ring_buffer.c
C_SOURCES += ${BTSTACK_ROOT}/src/btstack_run_loop.c
C_SOURCES += ${BTSTACK_ROOT}/src/btstack_tlv.c
C_SOURCES += ${BTSTACK_ROOT}/src/btstack_util.c
C_SOURCES += ${BTSTACK_ROOT}/src/hci.c
C_SOURCES += ${BTSTACK_ROOT}/src/hci_cmd.c
C_SOURCES += ${BTSTACK_ROOT}/src/hci_dump.c
C_SOURCES += ${BTSTACK_ROOT}/src/hci_transport_h4.c
C_SOURCES += ${BTSTACK_ROOT}/src/l2cap.c
C_SOURCES += ${BTSTACK_ROOT}/src/l2cap_signaling.c

#customize
C_SOURCES +=  \
Src/main.c \
Src/stm32f1xx_it.c \
Src/stm32f1xx_hal_msp.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_gpio_ex.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_tim.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_tim_ex.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc_ex.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_gpio.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_dma.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_cortex.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_pwr.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_flash_ex.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_exti.c \
Src/system_stm32f1xx.c \
Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_uart.c \
Src/gpio.c \
Src/dma.c \
Src/usart.c \
Port/btstack_port.c \
Port/hal_flash_bank_stm32.c

ifeq (${FREERTOS_ENABLE}, y)
C_SOURCES += FreeRTOS/portable/MemMang/heap_4.c
C_SOURCES += FreeRTOS/portable/GCC/ARM_CM3/port.c
C_SOURCES += FreeRTOS/croutine.c
C_SOURCES += FreeRTOS/event_groups.c
C_SOURCES += FreeRTOS/list.c
C_SOURCES += FreeRTOS/queue.c
C_SOURCES += FreeRTOS/tasks.c
C_SOURCES += FreeRTOS/timers.c
endif

ifeq (${AT_CMD_ENABLE}, y)
C_DEFS += -DAT_CMD_ENABLE

C_SOURCES += Middleware/at_command/at_command.c
C_SOURCES += Middleware/at_command/at_command_bt.c
endif

ifeq (${CUNIT_ENABLE}, y)
C_DEFS += -DCUNIT_ENABLE

C_SOURCES += Middleware/ut_manager/Cunit/Sources/Basic/Basic.c
C_SOURCES += Middleware/ut_manager/Cunit/Sources/Framework/CUError.c
C_SOURCES += Middleware/ut_manager/Cunit/Sources/Framework/MyMem.c
C_SOURCES += Middleware/ut_manager/Cunit/Sources/Framework/TestDB.c
C_SOURCES += Middleware/ut_manager/Cunit/Sources/Framework/TestRun.c
C_SOURCES += Middleware/ut_manager/Cunit/Sources/Framework/Util.c
C_SOURCES += Middleware/ut_manager/Cunit/Sources/cunit_misc.c
C_SOURCES += Middleware/ut_manager/Cunit/interface/cunit_interface.c
endif

# ASM sources
ASM_SOURCES =  \
startup_stm32f10x_hd.s


#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m3

# fpu
#FPU = -mfpu=fpv4-sp-d16

# float-abi
#FLOAT-ABI = -mfloat-abi=softfp

# mcu
#MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)
MCU = $(CPU) -mthumb

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS +=  \
-DUSE_HAL_DRIVER \
-DSTM32F103xE \
-DNDEBUG \



# AS includes
AS_INCLUDES = 

C_INCLUDES =  \
-IInc \
-IDrivers/STM32F1xx_HAL_Driver/Inc \
-IDrivers/STM32F1xx_HAL_Driver/Inc/Legacy \
-IDrivers/CMSIS/Device/ST/STM32F1xx/Include \
-IDrivers/CMSIS/Include \
-IFreeRTOS/include \
-IFreeRTOS/portable/GCC/ARM_CM3 \
-IMiddleware/at_command \
-Iut_manager/Cunit/interface \
-IMiddleware/ut_manager/Cunit/interface \
-IMiddleware/ut_manager/Cunit/Headers

C_INCLUDES += -I$(BUILD_DIR)
C_INCLUDES += -I${BTSTACK_ROOT}/src/ble
C_INCLUDES += -I${BTSTACK_ROOT}/src/ble/gatt-service
C_INCLUDES += -I${BTSTACK_ROOT}/src/classic
C_INCLUDES += -I${BTSTACK_ROOT}/src
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/micro-ecc
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/bluedroid/decoder/include
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/bluedroid/encoder/include
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/hxcmod-player
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/hxcmod-player/mods
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/lwip/core/src/include
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/lwip/dhcp-server
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/md5
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/yxml
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/segger-rtt
C_INCLUDES += -I${BTSTACK_ROOT}/platform/embedded
C_INCLUDES += -I${BTSTACK_ROOT}/platform/freertos
C_INCLUDES += -I${BTSTACK_ROOT}/platform/lwip
C_INCLUDES += -I${BTSTACK_ROOT}/platform/lwip/port
C_INCLUDES += -I${BTSTACK_ROOT}/chipset/csr
C_INCLUDES += -I${BTSTACK_ROOT}/tool

C_INCLUDES += -I Port
C_INCLUDES += -I Src
C_INCLUDES += -I Inc

# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32F103ZETx_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys
LIBDIR =
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

# default action: build all
EXAMPLES = gatt_counter

#ifeq (${EXAMPLE_PLUS_ENABLE}, y)
#EXAMPLES += 				\
	audio_duplex            \
	a2dp_sink_demo			\
	a2dp_source_demo        \
	ancs_client_demo		\
	dut_mode_classic        \
	gap_dedicated_bonding	\
	gap_inquiry 			\
	gap_le_advertisements   \
	gatt_battery_query		\
	gatt_browser            \
	gatt_counter            \
	gatt_streamer_server    \
	hfp_ag_demo             \
	hfp_hf_demo             \
	hid_host_demo           \
	hid_keyboard_demo 	    \
	hid_mouse_demo          \
	hog_keyboard_demo       \
	hog_mouse_demo          \
	hsp_ag_demo             \
	hsp_hs_demo             \
	mod_player              \
	le_streamer_client      \
	pan_lwip_http_server    \
	pbap_client_demo		\
	sdp_bnep_query 			\
	sdp_general_query		\
	sdp_rfcomm_query		\
	sine_player             \
	sm_pairing_central      \
	sm_pairing_peripheral   \
	spp_and_gatt_counter 	\
	spp_and_gatt_streamer   \
	spp_counter 			\
	spp_streamer			\
	spp_streamer_client     \
#endif

GATT_FILES = \
	ancs_client_demo.gatt \
	gatt_counter.gatt \
	gatt_streamer_server.gatt \
	gatt_device_information_query.gatt \
	gatt_browser.gatt \
	gatt_battery_query.gatt \
	hog_keyboard_demo.gatt \
	hog_mouse_demo.gatt \
	sm_pairing_peripheral.gatt \
	sm_pairing_central.gatt \
	spp_and_gatt_counter.gatt \
	spp_and_gatt_streamer.gatt \

# SBC codec
#include ${BTSTACK_ROOT}/3rd-party/bluedroid/decoder/Makefile.inc
#include ${BTSTACK_ROOT}/3rd-party/bluedroid/encoder/Makefile.inc

#VPATH += ${BTSTACK_ROOT}/3rd-party/bluedroid/decoder/srce
#VPATH += ${BTSTACK_ROOT}/3rd-party/bluedroid/encoder/srce
#C_SOURCES += ${SBC_ENCODER}
#C_SOURCES += ${SBC_DECODER}

#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

all: \
	$(OBJECTS) \
	$(addprefix $(BUILD_DIR)/,$(GATT_FILES:.gatt=.h)) \
	$(addprefix $(BUILD_DIR)/,$(EXAMPLES:=.elf)) \
	$(addprefix $(BUILD_DIR)/,$(EXAMPLES:=.hex)) \
	$(addprefix $(BUILD_DIR)/,$(EXAMPLES:=.bin)) \
	#$(addprefix $(BUILD_DIR)/,$(EXAMPLES:=.jdebug)) \

#include ${BTSTACK_ROOT}/chipset/csr/Makefile.inc

$(BUILD_DIR)/%.h: %.gatt
	python3 ${BTSTACK_ROOT}/tool/compile_gatt.py $< $@ 

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR)
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/%.elf: Makefile $(OBJECTS) $(BUILD_DIR)/%.o
	$(CC) $(filter-out Makefile,$^)  $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR)/%.jdebug: ozone.jdebug | $(BUILD_DIR)
	sed -e "s|EXAMPLE|$(basename $(notdir $@))|" $<  > $@

$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)

#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***
