##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.1.0] date: [Thu Mar 07 21:47:00 CET 2019] 
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = stm32f4-discovery-csr8x11


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Os


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

BTSTACK_ROOT ?= ../..
VPATH += ${BTSTACK_ROOT}/example

######################################
# compile variables
######################################

BR_EDR_ENABLE = n

BLE_ENABLE = y

EXAMPLE_PLUS_ENABLE = n

FREERTOS_ENABLE = n

3RD_PARTY_ENABLE = y

MCUBOOT_ENALBE = y

mcuboot = none

#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

BTSTACK_ROOT ?= ../..
VPATH += ${BTSTACK_ROOT}/example

######################################
# source
######################################
# C sources
ifeq (${BLE_ENABLE}, y)
C_DEFS += -DBLE_ENABLE
C_SOURCES += ${BTSTACK_ROOT}/src/ad_parser.c
C_SOURCES += ${BTSTACK_ROOT}/src/ble/att_db.c
C_SOURCES += ${BTSTACK_ROOT}/src/ble/att_dispatch.c
C_SOURCES += ${BTSTACK_ROOT}/src/ble/att_server.c
C_SOURCES += ${BTSTACK_ROOT}/src/ble/gatt-service/ancs_client.c
C_SOURCES += ${BTSTACK_ROOT}/src/ble/gatt-service/battery_service_client.c
C_SOURCES += ${BTSTACK_ROOT}/src/ble/gatt-service/battery_service_server.c
C_SOURCES += ${BTSTACK_ROOT}/src/ble/gatt-service/device_information_service_client.c
C_SOURCES += ${BTSTACK_ROOT}/src/ble/gatt-service/device_information_service_server.c
C_SOURCES += ${BTSTACK_ROOT}/src/ble/gatt-service/hids_device.c
C_SOURCES += ${BTSTACK_ROOT}/src/ble/gatt-service/nordic_spp_service_server.c
C_SOURCES += ${BTSTACK_ROOT}/src/ble/gatt_client.c
C_SOURCES += ${BTSTACK_ROOT}/src/ble/le_device_db_memory.c
C_SOURCES += ${BTSTACK_ROOT}/src/ble/le_device_db_tlv.c
C_SOURCES += ${BTSTACK_ROOT}/src/ble/sm.c
endif

ifeq (${BR_EDR_ENABLE}, y)
C_DEFS += -DBR_EDR_ENABLE
C_SOURCES += ${BTSTACK_ROOT}/src/classic/a2dp_sink.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/a2dp_source.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/avdtp.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/avdtp_acceptor.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/avdtp_initiator.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/avdtp_sink.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/avdtp_source.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/avdtp_util.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/avrcp.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/avrcp_browsing_controller.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/avrcp_controller.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/avrcp_media_item_iterator.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/avrcp_target.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/bnep.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/btstack_cvsd_plc.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/btstack_link_key_db_tlv.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/btstack_sbc_decoder_bluedroid.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/btstack_sbc_encoder_bluedroid.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/btstack_sbc_plc.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/device_id_server.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/goep_client.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/hfp.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/hfp_ag.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/hfp_gsm_model.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/hfp_hf.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/hfp_msbc.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/hid_device.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/hid_host.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/hsp_ag.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/hsp_hs.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/obex_iterator.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/obex_message_builder.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/pan.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/pbap_client.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/rfcomm.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/gatt_sdp.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/sdp_client.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/sdp_client_rfcomm.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/sdp_server.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/sdp_util.c
C_SOURCES += ${BTSTACK_ROOT}/src/classic/spp_server.c
endif

ifeq (${FREERTOS_ENABLE}, y)
	C_SOURCES += FreeRTOS/portable/MemMang/heap_4.c
	C_SOURCES += FreeRTOS/portable/GCC/ARM_CM3/port.c
	C_SOURCES += FreeRTOS/croutine.c
	C_SOURCES += FreeRTOS/event_groups.c
	C_SOURCES += FreeRTOS/list.c
	C_SOURCES += FreeRTOS/queue.c
	C_SOURCES += FreeRTOS/tasks.c
	C_SOURCES += FreeRTOS/timers.c
	C_SOURCES += ${BTSTACK_ROOT}/platform/freertos/btstack_run_loop_freertos.c
	C_SOURCES += ${BTSTACK_ROOT}/platform/freertos/btstack_uart_block_freertos.c
else
	C_SOURCES += ${BTSTACK_ROOT}/platform/embedded/btstack_audio_embedded.c
	C_SOURCES += ${BTSTACK_ROOT}/platform/embedded/btstack_run_loop_embedded.c
	C_SOURCES += ${BTSTACK_ROOT}/platform/embedded/btstack_stdin_embedded.c
	C_SOURCES += ${BTSTACK_ROOT}/platform/embedded/btstack_tlv_flash_bank.c
	C_SOURCES += ${BTSTACK_ROOT}/platform/embedded/btstack_uart_block_embedded.c
	C_SOURCES += ${BTSTACK_ROOT}/platform/embedded/hci_dump_embedded_stdout.c
	#C_SOURCES += ${BTSTACK_ROOT}/platform/embedded/hci_dump_segger_rtt_stdout.c
endif

ifeq (${3RD_PARTY_ENABLE}, y)
ifeq (${BR_EDR_ENABLE}, y)
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/hxcmod-player/hxcmod.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/hxcmod-player/mods/nao-deceased_by_disease.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/micro-ecc/uECC.c
#C_SOURCES += ${BTSTACK_ROOT}/3rd-party/segger-rtt/SEGGER_RTT.c
#C_SOURCES += ${BTSTACK_ROOT}/3rd-party/segger-rtt/SEGGER_RTT_printf.c
#C_SOURCES += ${BTSTACK_ROOT}/3rd-party/segger-rtt/SEGGER_RTT_Syscalls_GCC.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/yxml/yxml.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/md5/md5.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/def.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/inet_chksum.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/init.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/ip.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/mem.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/memp.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/netif.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/pbuf.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/tcp.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/tcp_in.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/tcp_out.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/timeouts.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/udp.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/ipv4/acd.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/ipv4/dhcp.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/ipv4/etharp.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/ipv4/icmp.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/ipv4/ip4.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/ipv4/ip4_addr.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/lwip/core/src/core/ipv4/ip4_frag.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/lwip/core/src/netif/ethernet.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/lwip/core/src/apps/http/altcp_proxyconnect.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/lwip/core/src/apps/http/fs.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/lwip/core/src/apps/http/httpd.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/lwip/dhcp-server/dhserver.c
endif

ifeq (${BLE_ENABLE}, y)
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/nordic_dfu/port/nrf_dfu_ble.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/nordic_dfu/port/nrf_dfu_flash_port.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/nordic_dfu/src/nrf_dfu.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/nordic_dfu/src/nrf_dfu_transport.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/nordic_dfu/src/nrf_dfu_req_handler.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/nordic_dfu/src/nrf_dfu_settings.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/nordic_dfu/src/nrf_dfu_utils.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/nordic_dfu/src/dfu-cc.pb.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/nordic_dfu/src/nrf_dfu_flash.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/nordic_dfu/src/nrf_dfu_validation.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/nordic_dfu/src/nrf_dfu_handling_error.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/nordic_dfu/src/crc32.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/nordic_dfu/src/nano-pb/pb_common.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/nordic_dfu/src/nano-pb/pb_decode.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/nordic_dfu/src/nano-pb/pb_encode.c
endif


ifeq (${MCUBOOT_ENALBE}, y)
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/boot/bootutil/src/boot_record.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/boot/bootutil/src/bootutil_misc.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/boot/bootutil/src/bootutil_public.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/boot/bootutil/src/caps.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/boot/bootutil/src/encrypted.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/boot/bootutil/src/fault_injection_hardening.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/boot/bootutil/src/fault_injection_hardening_delay_rng_mbedtls.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/boot/bootutil/src/image_ec.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/boot/bootutil/src/image_ec256.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/boot/bootutil/src/image_ed25519.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/boot/bootutil/src/image_rsa.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/boot/bootutil/src/image_validate.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/boot/bootutil/src/loader.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/boot/bootutil/src/swap_misc.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/boot/bootutil/src/swap_move.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/boot/bootutil/src/swap_scratch.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/boot/bootutil/src/tlv.c

C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/boot/embedded/mcuboot_main.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/boot/embedded/boot_flash_port.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/boot/embedded/port/base64_port.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/boot/embedded/port/boot_assert_port.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/boot/embedded/port/boot_heap_port.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/boot/embedded/port/boot_log_port.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/boot/embedded/port/boot_serial_port.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/boot/embedded/port/boot_startup_port.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/boot/embedded/port/boot_wdt_port.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/boot/embedded/port/crc16_port.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/boot/embedded/port/system_port.c
#C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/boot/embedded/port/boot_shell.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/ext/tinycrypt/lib/source/sha256.c
C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/ext/tinycrypt/lib/source/utils.c
#C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/ext/tinycrypt/lib/source/ecc.c
#C_SOURCES += ${BTSTACK_ROOT}/3rd-party/mcuboot/ext/tinycrypt/lib/source/ecc_dsa.c

ifeq (${mcuboot}, boot)
C_DEFS += -DMCUBOOT_IMG_BOOTLOADER
endif
ifeq (${mcuboot}, app1)
C_DEFS += -DMCUBOOT_IMG_APPLICATION1
endif
ifeq (${mcuboot}, app2)
C_DEFS += -DMCUBOOT_IMG_APPLICATION2
endif

endif
endif

ifeq (${BR_EDR_ENABLE}, y)
C_SOURCES += ${BTSTACK_ROOT}/example/sco_demo_util.c
C_SOURCES += ${BTSTACK_ROOT}/platform/lwip/port/sys_arch.c
C_SOURCES += ${BTSTACK_ROOT}/platform/lwip/bnep_lwip.c
C_SOURCES += ${BTSTACK_ROOT}/src/btstack_audio.c
C_SOURCES += ${BTSTACK_ROOT}/src/btstack_resample.c
endif
C_SOURCES += ${BTSTACK_ROOT}/chipset/csr/btstack_chipset_csr.c
C_SOURCES += ${BTSTACK_ROOT}/src/btstack_crypto.c
C_SOURCES += ${BTSTACK_ROOT}/src/btstack_hid_parser.c
C_SOURCES += ${BTSTACK_ROOT}/src/btstack_linked_list.c
C_SOURCES += ${BTSTACK_ROOT}/src/btstack_memory.c
C_SOURCES += ${BTSTACK_ROOT}/src/btstack_memory_pool.c

C_SOURCES += ${BTSTACK_ROOT}/src/btstack_ring_buffer.c
C_SOURCES += ${BTSTACK_ROOT}/src/btstack_run_loop.c
C_SOURCES += ${BTSTACK_ROOT}/src/btstack_tlv.c
C_SOURCES += ${BTSTACK_ROOT}/src/btstack_util.c
C_SOURCES += ${BTSTACK_ROOT}/src/hci.c
C_SOURCES += ${BTSTACK_ROOT}/src/hci_cmd.c
C_SOURCES += ${BTSTACK_ROOT}/src/hci_dump.c
C_SOURCES += ${BTSTACK_ROOT}/src/hci_transport_h4.c
C_SOURCES += ${BTSTACK_ROOT}/src/l2cap.c
C_SOURCES += ${BTSTACK_ROOT}/src/l2cap_signaling.c

#customize
C_SOURCES += bsp/audio.c
C_SOURCES += bsp/cs43l22.c
C_SOURCES += bsp/stm32f4_discovery.c
C_SOURCES += bsp/stm32f4_discovery_audio.c
C_SOURCES += Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal.c
C_SOURCES += Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_cortex.c
C_SOURCES += Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma.c
C_SOURCES += Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_dma_ex.c
C_SOURCES += Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_exti.c
C_SOURCES += Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash.c
C_SOURCES += Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ex.c
C_SOURCES += Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_flash_ramfunc.c
C_SOURCES += Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_gpio.c
C_SOURCES += Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_i2c.c
C_SOURCES += Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_i2c_ex.c
C_SOURCES += Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_i2s.c
C_SOURCES += Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_i2s_ex.c
C_SOURCES += Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c
C_SOURCES += Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr_ex.c
C_SOURCES += Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc.c
C_SOURCES += Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rcc_ex.c
C_SOURCES += Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_spi.c
C_SOURCES += Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c
C_SOURCES += Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim_ex.c
C_SOURCES += Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_uart.c
C_SOURCES += port/hal_audio_f4discovery.c
C_SOURCES += port/hal_flash_bank_stm32.c
C_SOURCES += port/port.c
C_SOURCES += Src/dma.c
C_SOURCES += Src/gpio.c
C_SOURCES += Src/main.c
C_SOURCES += Src/spi.c
C_SOURCES += Src/stm32f4xx_hal_msp.c
C_SOURCES += Src/stm32f4xx_it.c
C_SOURCES += Src/system_stm32f4xx.c
C_SOURCES += Src/usart.c

# ASM sources
ASM_SOURCES =  \
startup_stm32f407xx.s


#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=softfp

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS +=  \
-DUSE_HAL_DRIVER \
-DSTM32F407xx


# AS includes
AS_INCLUDES = 

# C includes
C_INCLUDES =  \
-IInc \
-IDrivers/STM32F4xx_HAL_Driver/Inc \
-IDrivers/STM32F4xx_HAL_Driver/Inc/Legacy \
-IDrivers/CMSIS/Device/ST/STM32F4xx/Include \
-IDrivers/CMSIS/Include \

C_INCLUDES += -I$(BUILD_DIR)
C_INCLUDES += -I${BTSTACK_ROOT}/src/ble
C_INCLUDES += -I${BTSTACK_ROOT}/src/ble/gatt-service
C_INCLUDES += -I${BTSTACK_ROOT}/src/classic
C_INCLUDES += -I${BTSTACK_ROOT}/src
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/micro-ecc
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/bluedroid/decoder/include
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/bluedroid/encoder/include
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/hxcmod-player
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/hxcmod-player/mods
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/lwip/core/src/include
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/lwip/dhcp-server
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/md5
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/yxml
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/segger-rtt

ifeq (${MCUBOOT_ENALBE}, y)
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/mcuboot/boot/bootutil/include
#C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/mcuboot/boot/bootutil/src
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/mcuboot/boot/bootutil/include/bootutil/crypto
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/mcuboot/boot/boot_serial/include/boot_serial
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/mcuboot/boot/embedded/include
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/mcuboot/boot/embedded/include/mcuboot_config
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/mcuboot/boot/embedded/include/flash_map_backend
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/mcuboot/boot/embedded/include/sysflash
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/mcuboot/boot/embedded/include/os
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/mcuboot/boot/embedded/include/port
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/mcuboot/sim/mcuboot-sys/csupport
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/mcuboot/ext/tinycrypt/lib/include
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/mcuboot/ext/tinycrypt/lib/include/tinycrypt
endif

C_INCLUDES += -I${BTSTACK_ROOT}/platform/embedded
C_INCLUDES += -I${BTSTACK_ROOT}/platform/lwip
C_INCLUDES += -I${BTSTACK_ROOT}/platform/lwip/port
C_INCLUDES += -I${BTSTACK_ROOT}/chipset/csr
C_INCLUDES += -I Drivers/STM32F4xx_HAL_Driver/Inc
C_INCLUDES += -I bsp
C_INCLUDES += -I pdm
C_INCLUDES += -I port
C_INCLUDES += -I src
C_INCLUDES += -I${BTSTACK_ROOT}/tool
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/nordic_dfu/src
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/nordic_dfu/port
C_INCLUDES += -I${BTSTACK_ROOT}/3rd-party/nordic_dfu/src/nano-pb
# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
#LDSCRIPT = STM32F407VGTx_FLASH.ld

ifeq (${mcuboot}, app1)
LDSCRIPT = STM32F407VGTx_FLASH_mcuboot.ld
else ifeq (${mcuboot}, app2)
LDSCRIPT = STM32F407VGTx_FLASH_mcuboot.ld
else
LDSCRIPT = STM32F407VGTx_FLASH.ld
endif


# libraries
LIBS = -lPDMFilter_CM4_GCC -lc -lm -lnosys 
LIBDIR = -Lpdm
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

# default action: build all
ifeq (${EXAMPLE_PLUS_ENABLE}, y)
ifeq (${BLE_ENABLE}, y)
EXAMPLES += 				\
	ancs_client_demo		\
	gap_le_advertisements   \
	gatt_battery_query		\
	gatt_browser            \
	gatt_counter            \
	gatt_streamer_server    \
	le_streamer_client      \
	sm_pairing_central      \
	sm_pairing_peripheral   \
	nordic_spp_le_counter	\
	nordic_dfu_demo			\

GATT_FILES += \
	ancs_client_demo.gatt \
	gatt_counter.gatt \
	gatt_streamer_server.gatt \
	gatt_device_information_query.gatt \
	gatt_browser.gatt \
	gatt_battery_query.gatt \
	hog_keyboard_demo.gatt \
	hog_mouse_demo.gatt \
	sm_pairing_peripheral.gatt \
	sm_pairing_central.gatt \
	nordic_spp_le_counter.gatt	\
	nordic_dfu_demo.gatt	   \

endif
ifeq (${BR_EDR_ENABLE}, y)
EXAMPLES += 				\
	audio_duplex            \
	a2dp_sink_demo			\
	headset_demo			\
	a2dp_source_demo        \
	dut_mode_classic        \
	gap_dedicated_bonding	\
	gap_inquiry 			\
	hfp_ag_demo             \
	hfp_hf_demo             \
	hid_host_demo           \
	hid_keyboard_demo 	    \
	hid_mouse_demo          \
	hog_keyboard_demo       \
	hog_mouse_demo          \
	hsp_ag_demo             \
	hsp_hs_demo             \
	mod_player              \
	pan_lwip_http_server    \
	pbap_client_demo		\
	sdp_bnep_query 			\
	sdp_general_query		\
	sdp_rfcomm_query		\
	sine_player             \
	sm_pairing_central      \
	sm_pairing_peripheral   \
	spp_counter 			\
	spp_streamer			\
	spp_streamer_client     \

endif

ifeq (${BLE_ENABLE}, y)
ifeq (${BR_EDR_ENABLE}, y)
EXAMPLES += 				\
	spp_and_gatt_counter 	\
	spp_and_gatt_streamer   \

GATT_FILES += \
	spp_and_gatt_counter.gatt 	\
	spp_and_gatt_streamer.gatt  \

endif
endif

else #EXAMPLE_PLUS_ENABLE=n

ifeq (${mcuboot}, boot)
EXAMPLES += mcuboot_bootloader_demo
else ifeq (${mcuboot}, app1)
EXAMPLES += nordic_dfu_demo
GATT_FILES += nordic_dfu_demo.gatt
else ifeq (${mcuboot}, app2)
EXAMPLES += nordic_dfu_demo
GATT_FILES += nordic_dfu_demo.gatt
else
EXAMPLES += nordic_dfu_demo
GATT_FILES += nordic_dfu_demo.gatt
endif
endif

# SBC codec
include ${BTSTACK_ROOT}/3rd-party/bluedroid/decoder/Makefile.inc
include ${BTSTACK_ROOT}/3rd-party/bluedroid/encoder/Makefile.inc

VPATH += ${BTSTACK_ROOT}/3rd-party/bluedroid/decoder/srce
VPATH += ${BTSTACK_ROOT}/3rd-party/bluedroid/encoder/srce
C_SOURCES += ${SBC_ENCODER}
C_SOURCES += ${SBC_DECODER}

#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

all: \
	$(OBJECTS) \
	$(addprefix $(BUILD_DIR)/,$(GATT_FILES:.gatt=.h)) \
	$(addprefix $(BUILD_DIR)/,$(EXAMPLES:=.elf)) \
	$(addprefix $(BUILD_DIR)/,$(EXAMPLES:=.hex)) \
	$(addprefix $(BUILD_DIR)/,$(EXAMPLES:=.bin)) \
	$(addprefix $(BUILD_DIR)/,$(EXAMPLES:=.jdebug)) \

$(BUILD_DIR)/%.h: %.gatt
	python3 ${BTSTACK_ROOT}/tool/compile_gatt.py $< $@ 

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR)
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/%.elf: Makefile $(OBJECTS) $(BUILD_DIR)/%.o
	$(CC) $(filter-out Makefile,$^)  $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	

$(BUILD_DIR)/%.jdebug: ozone.jdebug | $(BUILD_DIR)
	sed -e "s|EXAMPLE|$(basename $(notdir $@))|" $<  > $@

ifeq (${mcuboot}, app1)
	python3 ${BTSTACK_ROOT}/3rd-party/mcuboot/scripts/imgtool.py sign --header-size 0x200 --align 4 --slot-size 0x20000 --version 1.0.0 --pad-header $(BUILD_DIR)/${EXAMPLES}.bin $(BUILD_DIR)/mcuboot_primary_slot.bin
else ifeq (${mcuboot}, app2)
	python3 ${BTSTACK_ROOT}/3rd-party/mcuboot/scripts/imgtool.py sign --header-size 0x200 --align 4 --slot-size 0x20000 --version 1.0.0 --pad-header $(BUILD_DIR)/${EXAMPLES}.bin $(BUILD_DIR)/mcuboot_secondary_slot.bin
	./${BTSTACK_ROOT}/3rd-party/nordic_dfu/tools/nrfutil-linux pkg generate --hw-version 52 --sd-req 0x0103 --application $(BUILD_DIR)/mcuboot_secondary_slot.bin --application-version 1 $(BUILD_DIR)/nrf_dfu_mcuboot.zip
endif

$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)

####################################### 
# Delete the intermediate products
#######################################
remove:
	rm $(BUILD_DIR)/*.o
	rm $(BUILD_DIR)/*.lst
	rm $(BUILD_DIR)/*.d
	rm $(BUILD_DIR)/*.elf
	rm $(BUILD_DIR)/*.jdebug
	rm $(BUILD_DIR)/*.map

#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***
