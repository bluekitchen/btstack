/* new todo file for BTstack */

Last milestone reached: Restart client app without restarting BTdaemon possible

NEXT:
- iPhone status icon support
  - set BTstack SpringBoard icon
- client/server part using unix domain sockets (faster than TCP/IP)
- autostart by launchd
  - Unix Socket example Mac: http://lists.apple.com/archives/Macnetworkprog/2007/Oct/msg00078.html
  - Mac OS X book: 472-485
  - check with launchd, too?
  - launch.h exists in 3.0 SDK, but also in inofficial headers before
  - socket handling using kevent
  - exists too.
  - too complicated 
- stop  BTdaemon after X minutes idle
- extend hci_logger to write to /var/hci_dump.txt as text
- better deal with Apple stack
  - detect that it is running
  - figure out how to shut it down
  - user interface
- Cocoa User Interface Components
  - Alert and shutdown of Apple's stack
  - Inquiry
  - Detect iPhone sleep mode
=== BTdaemon can run always
- implement rest of L2CAP state machine
  - incoming connections
    - list of supported PSM
	- commands and events
=== Incoming L2CAP supported
- configuration: /etc/btstack
  - single Bluetooth module supported
  - transport type: H4, H5, USB
  - h4/h5: usart name
  - usb: product/vendor ID
  - logging mode: text, bluez, packetlogger
- implement rest of L2CAP state machine
  - error handling
  - error notification
  - flow control
  - reassembly/segmentation
- DEMOS:
  - BTstack-cmd
    - info
	- inquiry
	- remote name
	- open/close l2cap connection
    - evtl. SDP browser

== Release Version 0.1
- implement RFCOMM
- implement SDP
- implement PAN

== Release Version 0.2
- naming conventions for various layers
  - if all control is done by pseudo hci commands, only bt_send_cmd(&cmd_name, ... ) is needed anyway
- auto-generate code for sending commands from structured text input file
- devise concept for access to event data
  - auto-generate event struct getter? STRUCTURE_get_FIELD
- Bluetooth low-power modes useful
